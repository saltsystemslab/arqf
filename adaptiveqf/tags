!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
.DEFAULT_GOAL	external/splinterdb/Makefile	/^.DEFAULT_GOAL := all$/;"	m
ABC	external/splinterdb/scripts/list_test.py	/^from abc import ABC, abstractmethod$/;"	i
ALIB	other_filters/acf/Makefile	/^ALIB = libcuckoofilter.a$/;"	m
ALIB	other_filters/acfsim/Makefile	/^ALIB = libcuckoofilter.a$/;"	m
ALIB	other_filters/cf/Makefile	/^ALIB = libcuckoofilter.a$/;"	m
ALL_TESTS	external/splinterdb/scripts/list_test.py	/^ALL_TESTS = OrderedDict([$/;"	v
ALL_UNIT_TESTSRC	external/splinterdb/Makefile	/^ALL_UNIT_TESTSRC := $(call rwildcard, $(UNIT_TESTSDIR), *.c)$/;"	m
AL_FREE	external/splinterdb/src/allocator.h	21;"	d
AL_NO_REFS	external/splinterdb/src/allocator.h	20;"	d
AL_ONE_REF	external/splinterdb/src/allocator.h	19;"	d
ANSI_BBLUE	external/splinterdb/tests/unit/main.c	61;"	d	file:
ANSI_BCYAN	external/splinterdb/tests/unit/main.c	63;"	d	file:
ANSI_BGREEN	external/splinterdb/tests/unit/main.c	59;"	d	file:
ANSI_BLACK	external/splinterdb/tests/unit/main.c	49;"	d	file:
ANSI_BLUE	external/splinterdb/tests/unit/main.c	53;"	d	file:
ANSI_BMAGENTA	external/splinterdb/tests/unit/main.c	62;"	d	file:
ANSI_BRED	external/splinterdb/tests/unit/main.c	58;"	d	file:
ANSI_BYELLOW	external/splinterdb/tests/unit/main.c	60;"	d	file:
ANSI_CYAN	external/splinterdb/tests/unit/main.c	55;"	d	file:
ANSI_DARKGREY	external/splinterdb/tests/unit/main.c	57;"	d	file:
ANSI_GREEN	external/splinterdb/tests/unit/main.c	51;"	d	file:
ANSI_GREY	external/splinterdb/tests/unit/main.c	56;"	d	file:
ANSI_MAGENTA	external/splinterdb/tests/unit/main.c	54;"	d	file:
ANSI_NORMAL	external/splinterdb/tests/unit/main.c	65;"	d	file:
ANSI_RED	external/splinterdb/tests/unit/main.c	50;"	d	file:
ANSI_WHITE	external/splinterdb/tests/unit/main.c	64;"	d	file:
ANSI_YELLOW	external/splinterdb/tests/unit/main.c	52;"	d	file:
AQF_EXT_H	other_filters/taf/src/ext.h	4;"	d
AQF_EXT_H	src/taf.cc	28;"	d	file:
AQF_REMAINDERS_H	other_filters/taf/src/remainder.h	2;"	d
AQF_REMAINDERS_H	src/taf.cc	1165;"	d	file:
AQF_UTAF_H	other_filters/taf/src/utaf.h	6;"	d
AR	other_filters/acf/Makefile	/^AR = ar$/;"	m
AR	other_filters/acfsim/Makefile	/^AR = ar$/;"	m
AR	other_filters/cf/Makefile	/^AR = ar$/;"	m
ARCD_H	other_filters/taf/src/arcd.h	2;"	d
ARCH	Makefile	/^	ARCH=$/;"	m
ARCH	Makefile	/^	ARCH=-msse4.2 -D__SSE4_2_$/;"	m
ARCH	other_filters/cqf/Makefile	/^	ARCH=$/;"	m
ARCH	other_filters/cqf/Makefile	/^	ARCH=-msse4.2 -D__SSE4_2_$/;"	m
ARCH	other_filters/taf/Makefile	/^	ARCH=$/;"	m
ARCH	other_filters/taf/Makefile	/^	ARCH=-msse4.2 -D__SSE4_2_$/;"	m
ARGS	external/splinterdb/scripts/run_ycsb.py	/^ARGS = CL_PARSER.parse_args()$/;"	v
ARRAY_SIZE	external/splinterdb/src/platform_linux/platform.h	64;"	d
ASSERT_DATA	external/splinterdb/tests/unit/ctest.h	226;"	d
ASSERT_DBL_FAR	external/splinterdb/tests/unit/ctest.h	320;"	d
ASSERT_DBL_FAR_TOL	external/splinterdb/tests/unit/ctest.h	322;"	d
ASSERT_DBL_NEAR	external/splinterdb/tests/unit/ctest.h	309;"	d
ASSERT_DBL_NEAR_TOL	external/splinterdb/tests/unit/ctest.h	311;"	d
ASSERT_EQUAL	external/splinterdb/tests/unit/ctest.h	236;"	d
ASSERT_EQUAL_U	external/splinterdb/tests/unit/ctest.h	255;"	d
ASSERT_EXPR	external/splinterdb/src/platform_linux/platform.h	47;"	d
ASSERT_FAIL	external/splinterdb/tests/unit/ctest.h	301;"	d
ASSERT_FALSE	external/splinterdb/tests/unit/ctest.h	296;"	d
ASSERT_INTERVAL	external/splinterdb/tests/unit/ctest.h	278;"	d
ASSERT_NOT_EQUAL	external/splinterdb/tests/unit/ctest.h	264;"	d
ASSERT_NOT_EQUAL_U	external/splinterdb/tests/unit/ctest.h	269;"	d
ASSERT_NOT_NULL	external/splinterdb/tests/unit/ctest.h	287;"	d
ASSERT_NULL	external/splinterdb/tests/unit/ctest.h	283;"	d
ASSERT_OUTBUF_LEN	external/splinterdb/tests/unit/misc_test.c	17;"	d	file:
ASSERT_STR	external/splinterdb/tests/unit/ctest.h	210;"	d
ASSERT_STREQ	external/splinterdb/tests/unit/ctest.h	240;"	d
ASSERT_STREQN	external/splinterdb/tests/unit/ctest.h	250;"	d
ASSERT_TRUE	external/splinterdb/tests/unit/ctest.h	291;"	d
ASSERT_WSTR	external/splinterdb/tests/unit/ctest.h	217;"	d
ASYNC	external/splinterdb/scripts/list_test.py	/^ASYNC = 'async'$/;"	v
ASYNC_LU	external/splinterdb/tests/functional/splinter_test.c	/^   ASYNC_LU,$/;"	e	enum:lookup_type	file:
AVLTREE_H	external/splinterdb/tests/functional/avlTree.h	12;"	d
Adapt	other_filters/acf/src/cuckoofilter.h	/^		Status CuckooFilter<ItemType, bits_per_item, TableType, HashFamily>::Adapt(const ItemType key, splinterdb *backing_map, const size_t bm_max_key_size, const size_t bm_max_val_size, splinterdb_lookup_result *bm_result, unsigned char* buffer) {$/;"	f	class:cuckoofilter::CuckooFilter
Adapt	other_filters/acfsim/src/cuckoofilter.h	/^		Status CuckooFilter<ItemType, bits_per_item, TableType, HashFamily>::Adapt(const ItemType key, splinterdb *backing_map, const size_t bm_max_key_size, const size_t bm_max_val_size, splinterdb_lookup_result *bm_result, unsigned char* buffer) {$/;"	f	class:cuckoofilter::CuckooFilter
AdaptAndRecord	other_filters/acfsim/src/cuckoofilter.h	/^		Status CuckooFilter<ItemType, bits_per_item, TableType, HashFamily>::AdaptAndRecord(const ItemType key, set_node *set, uint64_t set_len, FILE *fp) {$/;"	f	class:cuckoofilter::CuckooFilter
AdaptFromRecording	other_filters/acfsim/src/cuckoofilter.h	/^		Status CuckooFilter<ItemType, bits_per_item, TableType, HashFamily>::AdaptFromRecording(const operation *ops, uint64_t *i) {$/;"	f	class:cuckoofilter::CuckooFilter
AdaptUsingSet	other_filters/acf/src/cuckoofilter.h	/^		Status CuckooFilter<ItemType, bits_per_item, TableType, HashFamily>::AdaptUsingSet(const ItemType key, set_node *set, uint64_t set_len) {$/;"	f	class:cuckoofilter::CuckooFilter
Add	other_filters/acf/benchmarks/bulk-insert-and-query.cc	/^  static void Add(uint64_t key, Table * table) {$/;"	f	struct:FilterAPI
Add	other_filters/acf/benchmarks/bulk-insert-and-query.cc	/^  static void Add(uint64_t key, Table* table) {$/;"	f	struct:FilterAPI
Add	other_filters/acf/src/cuckoofilter.h	/^		Status CuckooFilter<ItemType, bits_per_item, TableType, HashFamily>::Add(const ItemType item) {$/;"	f	class:cuckoofilter::CuckooFilter
Add	other_filters/acfsim/src/cuckoofilter.h	/^		Status CuckooFilter<ItemType, bits_per_item, TableType, HashFamily>::Add(const ItemType item) {$/;"	f	class:cuckoofilter::CuckooFilter
Add	other_filters/cf/benchmarks/bulk-insert-and-query.cc	/^  static void Add(uint64_t key, Table * table) {$/;"	f	struct:FilterAPI
Add	other_filters/cf/benchmarks/bulk-insert-and-query.cc	/^  static void Add(uint64_t key, Table* table) {$/;"	f	struct:FilterAPI
Add	other_filters/cf/src/cuckoofilter.h	/^Status CuckooFilter<ItemType, bits_per_item, TableType, HashFamily>::Add($/;"	f	class:cuckoofilter::CuckooFilter
AddAndRecord	other_filters/acfsim/src/cuckoofilter.h	/^		Status CuckooFilter<ItemType, bits_per_item, TableType, HashFamily>::AddAndRecord(const uint64_t key, set_node *set, uint64_t set_len, FILE *fp) {$/;"	f	class:cuckoofilter::CuckooFilter
AddFromRecording	other_filters/acfsim/src/cuckoofilter.h	/^		Status CuckooFilter<ItemType, bits_per_item, TableType, HashFamily>::AddFromRecording(const operation *ops, uint64_t *i) {$/;"	f	class:cuckoofilter::CuckooFilter
AddImpl	other_filters/acf/src/cuckoofilter.h	/^		Status CuckooFilter<ItemType, bits_per_item, TableType, HashFamily>::AddImpl(const uint64_t key) {$/;"	f	class:cuckoofilter::CuckooFilter
AddImpl	other_filters/acfsim/src/cuckoofilter.h	/^		Status CuckooFilter<ItemType, bits_per_item, TableType, HashFamily>::AddImpl(const uint64_t key) {$/;"	f	class:cuckoofilter::CuckooFilter
AddImpl	other_filters/cf/src/cuckoofilter.h	/^Status CuckooFilter<ItemType, bits_per_item, TableType, HashFamily>::AddImpl($/;"	f	class:cuckoofilter::CuckooFilter
AddUsingBackingMap	other_filters/acf/src/cuckoofilter.h	/^		Status CuckooFilter<ItemType, bits_per_item, TableType, HashFamily>::AddUsingBackingMap(const uint64_t key, splinterdb *backing_map, const size_t bm_max_key_size, const size_t bm_max_val_size, splinterdb_lookup_result *bm_result, unsigned char* buffer) {$/;"	f	class:cuckoofilter::CuckooFilter
AddUsingSet	other_filters/acf/src/cuckoofilter.h	/^		Status CuckooFilter<ItemType, bits_per_item, TableType, HashFamily>::AddUsingSet(const uint64_t key, set_node *set, uint64_t set_len) {$/;"	f	class:cuckoofilter::CuckooFilter
AltIndex	other_filters/cf/src/cuckoofilter.h	/^  inline size_t AltIndex(const size_t index, const uint32_t tag) const {$/;"	f	class:cuckoofilter::CuckooFilter
AltIndexFromKey	other_filters/acf/src/cuckoofilter.h	/^				 inline size_t AltIndexFromKey(const size_t index, const uint64_t key) const {$/;"	f	class:cuckoofilter::CuckooFilter
AltIndexFromKey	other_filters/acfsim/src/cuckoofilter.h	/^				 inline size_t AltIndexFromKey(const size_t index, const uint64_t key) const {$/;"	f	class:cuckoofilter::CuckooFilter
AvlTree	external/splinterdb/tests/functional/avlTree.h	/^typedef struct AvlTree {$/;"	s
AvlTree	external/splinterdb/tests/functional/avlTree.h	/^} AvlTree;$/;"	t	typeref:struct:AvlTree
AvlTreeDeleteInt	external/splinterdb/tests/functional/avlTree.c	/^AvlTreeDeleteInt(const AvlTree *tree,      \/\/ IN$/;"	f	file:
AvlTreeGetHeight	external/splinterdb/tests/functional/avlTree.c	/^AvlTreeGetHeight(AvlTreeLinks *n)$/;"	f	file:
AvlTreeInsertInt	external/splinterdb/tests/functional/avlTree.c	/^AvlTreeInsertInt(const AvlTree *tree,    \/\/ IN$/;"	f	file:
AvlTreeIter	external/splinterdb/tests/functional/avlTree.h	/^} AvlTreeIter;$/;"	t	typeref:struct:__anon60
AvlTreeIterFindSmallest	external/splinterdb/tests/functional/avlTree.c	/^AvlTreeIterFindSmallest(AvlTreeIter  *iter, \/\/ IN iterator$/;"	f	file:
AvlTreeIter_Advance	external/splinterdb/tests/functional/avlTree.c	/^AvlTreeIter_Advance(AvlTreeIter *iter)$/;"	f
AvlTreeIter_AllocSize	external/splinterdb/tests/functional/avlTree.h	/^AvlTreeIter_AllocSize(unsigned max) \/\/ IN height of the avl tree$/;"	f
AvlTreeIter_GetCurrent	external/splinterdb/tests/functional/avlTree.c	/^AvlTreeIter_GetCurrent(AvlTreeIter *iter)$/;"	f
AvlTreeIter_Init	external/splinterdb/tests/functional/avlTree.c	/^AvlTreeIter_Init(AvlTreeIter *iter, \/\/ IN iterator$/;"	f
AvlTreeIter_IsAtEnd	external/splinterdb/tests/functional/avlTree.c	/^AvlTreeIter_IsAtEnd(AvlTreeIter *iter)$/;"	f
AvlTreeKey	external/splinterdb/tests/functional/avlTree.h	/^typedef void *AvlTreeKey;$/;"	t
AvlTreeKeyComparator	external/splinterdb/tests/functional/avlTree.h	/^typedef int (*AvlTreeKeyComparator)(const AvlTreeLinks *node, AvlTreeKey key);$/;"	t
AvlTreeLinks	external/splinterdb/tests/functional/avlTree.h	/^typedef struct AvlTreeLinks {$/;"	s
AvlTreeLinks	external/splinterdb/tests/functional/avlTree.h	/^} AvlTreeLinks;$/;"	t	typeref:struct:AvlTreeLinks
AvlTreeNodeComparator	external/splinterdb/tests/functional/avlTree.h	/^typedef int (*AvlTreeNodeComparator)(const AvlTreeLinks *a,$/;"	t
AvlTreeRebalanceNode	external/splinterdb/tests/functional/avlTree.c	/^AvlTreeRebalanceNode(const AvlTree *tree, \/\/ IN\/OUT$/;"	f	file:
AvlTreeRotateLeft	external/splinterdb/tests/functional/avlTree.c	/^AvlTreeRotateLeft(const AvlTree *tree, \/\/ IN$/;"	f	file:
AvlTreeRotateRight	external/splinterdb/tests/functional/avlTree.c	/^AvlTreeRotateRight(const AvlTree *tree, \/\/ IN$/;"	f	file:
AvlTreeSetNode	external/splinterdb/tests/functional/avlTree.c	/^AvlTreeSetNode(AvlTreeLinks *n,$/;"	f	file:
AvlTreeStackInit	external/splinterdb/tests/functional/avlTree.c	/^AvlTreeStackInit(AvlTreeIter *iter, unsigned max)$/;"	f	file:
AvlTreeStackIsEmpty	external/splinterdb/tests/functional/avlTree.c	/^AvlTreeStackIsEmpty(AvlTreeIter *iter)$/;"	f	file:
AvlTreeStackPop	external/splinterdb/tests/functional/avlTree.c	/^AvlTreeStackPop(AvlTreeIter *iter)$/;"	f	file:
AvlTreeStackPush	external/splinterdb/tests/functional/avlTree.c	/^AvlTreeStackPush(AvlTreeIter *iter, AvlTreeLinks *cur)$/;"	f	file:
AvlTreeUpdateHeight	external/splinterdb/tests/functional/avlTree.c	/^AvlTreeUpdateHeight(const AvlTree *tree, \/\/ IN$/;"	f	file:
AvlTree_Delete	external/splinterdb/tests/functional/avlTree.c	/^AvlTree_Delete(AvlTree      *tree, \/\/ IN\/OUT$/;"	f
AvlTree_FindNode	external/splinterdb/tests/functional/avlTree.c	/^AvlTree_FindNode(const AvlTree *tree, \/\/ IN$/;"	f
AvlTree_FindNodeGeq	external/splinterdb/tests/functional/avlTree.c	/^AvlTree_FindNodeGeq(const AvlTree *tree, \/\/ IN$/;"	f
AvlTree_FindNodeLeq	external/splinterdb/tests/functional/avlTree.c	/^AvlTree_FindNodeLeq(const AvlTree *tree, \/\/ IN$/;"	f
AvlTree_Init	external/splinterdb/tests/functional/avlTree.c	/^AvlTree_Init(AvlTree              *tree,    \/\/ IN\/OUT$/;"	f
AvlTree_InitNode	external/splinterdb/tests/functional/avlTree.c	/^AvlTree_InitNode(AvlTreeLinks *node)$/;"	f
AvlTree_Insert	external/splinterdb/tests/functional/avlTree.c	/^AvlTree_Insert(AvlTree      *tree, \/\/ IN\/OUT$/;"	f
AvlTree_IsUnlinked	external/splinterdb/tests/functional/avlTree.c	/^AvlTree_IsUnlinked(AvlTreeLinks *node)$/;"	f
AvlTree_Max	external/splinterdb/tests/functional/avlTree.c	/^AvlTree_Max(const AvlTree *tree) \/\/ IN$/;"	f
AvlTree_Min	external/splinterdb/tests/functional/avlTree.c	/^AvlTree_Min(const AvlTree *tree) \/\/ IN$/;"	f
AvlTree_Predecessor	external/splinterdb/tests/functional/avlTree.c	/^AvlTree_Predecessor(const AvlTree      *tree, \/\/ IN$/;"	f
AvlTree_Successor	external/splinterdb/tests/functional/avlTree.c	/^AvlTree_Successor(const AvlTree      *tree, \/\/ IN$/;"	f
BACKING_MAP_INSERT	other_filters/cf/example/test_ext_throughput.cc	48;"	d	file:
BACKING_MAP_INSERT	other_filters/cf/example/test_ext_throughput.cc	51;"	d	file:
BACKING_MAP_INSERT	src/test_ext_churn.cc	80;"	d	file:
BACKING_MAP_INSERT	src/test_ext_churn.cc	83;"	d	file:
BACKING_MAP_INSERT	src/test_ext_inc_throughput.cc	174;"	d	file:
BACKING_MAP_INSERT	src/test_ext_inc_throughput.cc	177;"	d	file:
BACKING_MAP_INSERT	src/test_ext_throughput.cc	174;"	d	file:
BACKING_MAP_INSERT	src/test_ext_throughput.cc	177;"	d	file:
BACKING_MAP_INSERT	src/test_zipf_throughput.cc	136;"	d	file:
BACKING_MAP_INSERT	src/test_zipf_throughput.cc	139;"	d	file:
BACKING_MAP_T	other_filters/cf/example/test_ext_throughput.cc	47;"	d	file:
BACKING_MAP_T	other_filters/cf/example/test_ext_throughput.cc	50;"	d	file:
BACKING_MAP_T	other_filters/cqf/src/test_ext_throughput.cc	100;"	d	file:
BACKING_MAP_T	other_filters/cqf/src/test_ext_throughput.cc	98;"	d	file:
BACKING_MAP_T	src/test_ext_churn.cc	79;"	d	file:
BACKING_MAP_T	src/test_ext_churn.cc	82;"	d	file:
BACKING_MAP_T	src/test_ext_inc_throughput.cc	173;"	d	file:
BACKING_MAP_T	src/test_ext_inc_throughput.cc	176;"	d	file:
BACKING_MAP_T	src/test_ext_throughput.cc	173;"	d	file:
BACKING_MAP_T	src/test_ext_throughput.cc	176;"	d	file:
BACKING_MAP_T	src/test_zipf_throughput.cc	135;"	d	file:
BACKING_MAP_T	src/test_zipf_throughput.cc	138;"	d	file:
BIG_CONSTANT	other_filters/taf/src/murmur3.c	36;"	d	file:
BIG_CONSTANT	src/taf.cc	347;"	d	file:
BILLION	external/splinterdb/src/platform_linux/platform.h	118;"	d
BILLION	other_filters/cqf/src/gqf.c	46;"	d	file:
BILLION	src/gqf.c	40;"	d	file:
BILLION	src/gqf_backup.c	37;"	d	file:
BINDIR	external/splinterdb/Makefile	/^	BINDIR=$(BINDIR) .\/test.sh$/;"	m
BINDIR	external/splinterdb/Makefile	/^BINDIR = $(BUILD_PATH)\/bin$/;"	m
BINS	other_filters/acf/benchmarks/Makefile	/^BINS = conext-table3.exe conext-figure5.exe bulk-insert-and-query.exe$/;"	m
BINS	other_filters/cf/benchmarks/Makefile	/^BINS = conext-table3.exe conext-figure5.exe bulk-insert-and-query.exe$/;"	m
BITMASK	other_filters/cqf/src/gqf.c	32;"	d	file:
BITMASK	src/gqf.c	26;"	d	file:
BITMASK	src/gqf_backup.c	23;"	d	file:
BRIEF	external/splinterdb/Makefile	/^   BRIEF=@ >\/dev\/null echo$/;"	m
BRIEF	external/splinterdb/Makefile	/^   BRIEF=@echo$/;"	m
BRIEF_FORMATTED	external/splinterdb/Makefile	/^   BRIEF_FORMATTED=@ >\/dev\/null echo$/;"	m
BRIEF_FORMATTED	external/splinterdb/Makefile	/^   BRIEF_FORMATTED=@printf$/;"	m
BRIEF_PARTIAL	external/splinterdb/Makefile	/^   BRIEF_PARTIAL=@echo -n >\/dev\/null$/;"	m
BRIEF_PARTIAL	external/splinterdb/Makefile	/^   BRIEF_PARTIAL=@echo -n$/;"	m
BTREEPERF	external/splinterdb/scripts/list_test.py	/^BTREEPERF = 'btreeperf'$/;"	v
BTREE_DEFRAGMENT_THRESHOLD	external/splinterdb/src/btree.c	92;"	d	file:
BTREE_MAX_HEIGHT	external/splinterdb/src/btree.h	28;"	d
BTREE_PIVOT_STATS_UNKNOWN	external/splinterdb/src/btree.c	/^static const btree_pivot_stats BTREE_PIVOT_STATS_UNKNOWN = {$/;"	v	file:
BTREE_SPLIT_THRESHOLD	external/splinterdb/src/btree.c	85;"	d	file:
BTREE_SYS	external/splinterdb/Makefile	/^BTREE_SYS = $(OBJDIR)\/$(SRCDIR)\/btree.o           \\$/;"	m
BTREE_UNKNOWN_COUNTER	external/splinterdb/src/btree.c	102;"	d	file:
BUILD_ASAN	external/splinterdb/Makefile	/^   BUILD_ASAN=0$/;"	m
BUILD_DIR	external/splinterdb/Makefile	/^   BUILD_DIR:=$(BUILD_DIR)-asan$/;"	m
BUILD_DIR	external/splinterdb/Makefile	/^   BUILD_DIR:=$(BUILD_DIR)-msan$/;"	m
BUILD_DIR	external/splinterdb/Makefile	/^BUILD_DIR := $(BUILD_MODE)$/;"	m
BUILD_MODE	external/splinterdb/Makefile	/^   BUILD_MODE=release$/;"	m
BUILD_MSAN	external/splinterdb/Makefile	/^   BUILD_MSAN=0$/;"	m
BUILD_PATH	external/splinterdb/Makefile	/^BUILD_PATH=$(BUILD_ROOT)\/$(BUILD_DIR)$/;"	m
BUILD_ROOT	external/splinterdb/Makefile	/^   BUILD_ROOT := build$/;"	m
BUILD_VERBOSE	external/splinterdb/Makefile	/^   BUILD_VERBOSE=0$/;"	m
BUILD_VERSION	external/splinterdb/src/splinterdb.c	/^const char *BUILD_VERSION = "splinterdb_build_version " GIT_VERSION;$/;"	v
B_TO_GiB	external/splinterdb/src/platform_linux/platform.h	106;"	d
B_TO_GiB_FRACT	external/splinterdb/src/platform_linux/platform.h	112;"	d
B_TO_KiB	external/splinterdb/src/platform_linux/platform.h	104;"	d
B_TO_KiB_FRACT	external/splinterdb/src/platform_linux/platform.h	110;"	d
B_TO_MiB	external/splinterdb/src/platform_linux/platform.h	105;"	d
B_TO_MiB_FRACT	external/splinterdb/src/platform_linux/platform.h	111;"	d
B_TO_TiB	external/splinterdb/src/platform_linux/platform.h	107;"	d
B_TO_TiB_FRACT	external/splinterdb/src/platform_linux/platform.h	113;"	d
BitsPerItem	other_filters/acf/src/cuckoofilter.h	/^				 double BitsPerItem() const { return 8.0 * table_->SizeInBytes() \/ Size(); }$/;"	f	class:cuckoofilter::CuckooFilter
BitsPerItem	other_filters/acfsim/src/cuckoofilter.h	/^				 double BitsPerItem() const { return 8.0 * table_->SizeInBytes() \/ Size(); }$/;"	f	class:cuckoofilter::CuckooFilter
BitsPerItem	other_filters/cf/src/cuckoofilter.h	/^  double BitsPerItem() const { return 8.0 * table_->SizeInBytes() \/ Size(); }$/;"	f	class:cuckoofilter::CuckooFilter
BobHash	other_filters/acf/src/hashutil.cc	/^uint32_t HashUtil::BobHash(const std::string &s, uint32_t seed) {$/;"	f	class:cuckoofilter::HashUtil
BobHash	other_filters/acf/src/hashutil.cc	/^uint32_t HashUtil::BobHash(const void *buf, size_t length, uint32_t seed) {$/;"	f	class:cuckoofilter::HashUtil
BobHash	other_filters/acf/src/hashutil.cc	/^void HashUtil::BobHash(const std::string &s, uint32_t *idx1, uint32_t *idx2) {$/;"	f	class:cuckoofilter::HashUtil
BobHash	other_filters/acf/src/hashutil.cc	/^void HashUtil::BobHash(const void *buf, size_t length, uint32_t *idx1,$/;"	f	class:cuckoofilter::HashUtil
BobHash	other_filters/acfsim/src/hashutil.cc	/^uint32_t HashUtil::BobHash(const std::string &s, uint32_t seed) {$/;"	f	class:cuckoofilter::HashUtil
BobHash	other_filters/acfsim/src/hashutil.cc	/^uint32_t HashUtil::BobHash(const void *buf, size_t length, uint32_t seed) {$/;"	f	class:cuckoofilter::HashUtil
BobHash	other_filters/acfsim/src/hashutil.cc	/^void HashUtil::BobHash(const std::string &s, uint32_t *idx1, uint32_t *idx2) {$/;"	f	class:cuckoofilter::HashUtil
BobHash	other_filters/acfsim/src/hashutil.cc	/^void HashUtil::BobHash(const void *buf, size_t length, uint32_t *idx1,$/;"	f	class:cuckoofilter::HashUtil
BobHash	other_filters/cf/src/hashutil.cc	/^uint32_t HashUtil::BobHash(const std::string &s, uint32_t seed) {$/;"	f	class:cuckoofilter::HashUtil
BobHash	other_filters/cf/src/hashutil.cc	/^uint32_t HashUtil::BobHash(const void *buf, size_t length, uint32_t seed) {$/;"	f	class:cuckoofilter::HashUtil
BobHash	other_filters/cf/src/hashutil.cc	/^void HashUtil::BobHash(const std::string &s, uint32_t *idx1, uint32_t *idx2) {$/;"	f	class:cuckoofilter::HashUtil
BobHash	other_filters/cf/src/hashutil.cc	/^void HashUtil::BobHash(const void *buf, size_t length, uint32_t *idx1,$/;"	f	class:cuckoofilter::HashUtil
Bucket	other_filters/acf/src/mirroredtable.h	/^		struct Bucket {$/;"	s	class:cuckoofilter::MirroredTable
Bucket	other_filters/acf/src/singletable.h	/^  struct Bucket {$/;"	s	class:cuckoofilter::SingleTable
Bucket	other_filters/acfsim/src/mirroredtable.h	/^		struct Bucket {$/;"	s	class:cuckoofilter::MirroredTable
Bucket	other_filters/acfsim/src/singletable.h	/^  struct Bucket {$/;"	s	class:cuckoofilter::SingleTable
Bucket	other_filters/cf/src/singletable.h	/^  struct Bucket {$/;"	s	class:cuckoofilter::SingleTable
CACHEPERF	external/splinterdb/scripts/list_test.py	/^CACHEPERF = 'cacheperf'$/;"	v
CACHESTRESS	external/splinterdb/scripts/list_test.py	/^CACHESTRESS = 'cachestress'$/;"	v
CACHE_SIZE_MB	external/splinterdb/examples/splinterdb_custom_ipv4_addr_sortcmp_example.c	38;"	d	file:
CACHE_SIZE_MB	external/splinterdb/examples/splinterdb_intro_example.c	17;"	d	file:
CACHE_SIZE_MB	external/splinterdb/examples/splinterdb_iterators_example.c	15;"	d	file:
CACHE_SIZE_MB	external/splinterdb/examples/splinterdb_wide_values_example.c	15;"	d	file:
CC	Makefile	/^CC = gcc -std=gnu11$/;"	m
CC	other_filters/acf/Makefile	/^CC = g++$/;"	m
CC	other_filters/acfsim/Makefile	/^CC = g++$/;"	m
CC	other_filters/cf/Makefile	/^CC = g++$/;"	m
CC	other_filters/cqf/Makefile	/^CC = gcc -std=gnu11$/;"	m
CC	other_filters/taf/Makefile	/^CC = gcc -std=gnu11$/;"	m
CC	other_filters/taf/src/Makefile	/^CC=gcc$/;"	m
CC_ACCESSED	external/splinterdb/src/clockcache.c	557;"	d	file:
CC_ACCESSED_STATUS	external/splinterdb/src/clockcache.c	575;"	d	file:
CC_ALLOC_STATUS	external/splinterdb/src/clockcache.c	578;"	d	file:
CC_CLAIMED	external/splinterdb/src/clockcache.c	562;"	d	file:
CC_CLEAN	external/splinterdb/src/clockcache.c	558;"	d	file:
CC_CLEANABLE1_STATUS	external/splinterdb/src/clockcache.c	581;"	d	file:
CC_CLEANABLE2_STATUS	external/splinterdb/src/clockcache.c	584;"	d	file:
CC_CLEANER_GAP	external/splinterdb/src/clockcache.c	38;"	d	file:
CC_DEFAULT_MAX_IO_EVENTS	external/splinterdb/src/clockcache.c	41;"	d	file:
CC_ENTRIES_PER_BATCH	external/splinterdb/src/clockcache.c	35;"	d	file:
CC_EVICTABLE_STATUS	external/splinterdb/src/clockcache.c	569;"	d	file:
CC_FREE	external/splinterdb/src/clockcache.c	556;"	d	file:
CC_FREE_STATUS	external/splinterdb/src/clockcache.c	566;"	d	file:
CC_LOADING	external/splinterdb/src/clockcache.c	560;"	d	file:
CC_LOCKED_EVICTABLE_STATUS	external/splinterdb/src/clockcache.c	572;"	d	file:
CC_RC_WIDTH	external/splinterdb/src/clockcache.h	23;"	d
CC_READ_LOADING_STATUS	external/splinterdb/src/clockcache.c	593;"	d	file:
CC_UNMAPPED_ADDR	external/splinterdb/src/clockcache.c	32;"	d	file:
CC_UNMAPPED_ENTRY	external/splinterdb/src/clockcache.c	31;"	d	file:
CC_WRITEBACK	external/splinterdb/src/clockcache.c	559;"	d	file:
CC_WRITEBACK1_STATUS	external/splinterdb/src/clockcache.c	587;"	d	file:
CC_WRITEBACK2_STATUS	external/splinterdb/src/clockcache.c	590;"	d	file:
CC_WRITELOCKED	external/splinterdb/src/clockcache.c	561;"	d	file:
CFLAGS	other_filters/taf/src/Makefile	/^	CFLAGS=-O3 -lm$/;"	m
CFLAGS	other_filters/taf/src/Makefile	/^	CFLAGS=-g -O0 -lm -rdynamic -Wall$/;"	m
CFLAGS	other_filters/taf/src/Makefile	/^debug: CFLAGS=$(DEBUGFLAGS)$/;"	m
CFLAGS	other_filters/taf/src/Makefile	/^prof: CFLAGS=$(PROFFLAGS)$/;"	m
CLOCKCACHE_SYS	external/splinterdb/Makefile	/^CLOCKCACHE_SYS = $(OBJDIR)\/$(SRCDIR)\/clockcache.o	  \\$/;"	m
CLUSTER_SIZE	other_filters/cqf/src/gqf.c	35;"	d	file:
CLUSTER_SIZE	src/gqf.c	29;"	d	file:
CLUSTER_SIZE	src/gqf_backup.c	26;"	d	file:
CL_PARSER	external/splinterdb/scripts/run_ycsb.py	/^CL_PARSER = argparse.ArgumentParser(description=DESC, allow_abbrev=False)$/;"	v
COMMAND	external/splinterdb/Makefile	/^   COMMAND=$/;"	m
COMMAND	external/splinterdb/Makefile	/^   COMMAND=@$/;"	m
COMMON_TESTOBJ	external/splinterdb/Makefile	/^COMMON_TESTOBJ= $(COMMON_TESTSRC:%.c=$(OBJDIR)\/%.o)$/;"	m
COMMON_TESTSRC	external/splinterdb/Makefile	/^COMMON_TESTSRC := $(wildcard $(TESTS_DIR)\/*.c)$/;"	m
COMMON_UNIT_TESTOBJ	external/splinterdb/Makefile	/^COMMON_UNIT_TESTOBJ= $(COMMON_UNIT_TESTSRC:%.c=$(OBJDIR)\/%.o)$/;"	m
COMMON_UNIT_TESTSRC	external/splinterdb/Makefile	/^COMMON_UNIT_TESTSRC := $(wildcard $(UNIT_TESTSDIR)\/*tests_common.c)$/;"	m
COMPILE.c	external/splinterdb/Makefile	/^COMPILE.c = $(CC) $(DEPFLAGS) -MT $@ -MF $(OBJDIR)\/$*.d $(CFLAGS) $(GIT_VERSION_CFLAGS) $(INCLUDE) $(TARGET_ARCH) -c$/;"	m
CONFIG_FILE	external/splinterdb/Makefile	/^CONFIG_FILE = $(CONFIG_FILE_PREFIX)$(CONFIG_HASH)$/;"	m
CONFIG_FILE_PREFIX	external/splinterdb/Makefile	/^CONFIG_FILE_PREFIX = $(BUILD_PATH)\/build-config.$/;"	m
CONFIG_HASH	external/splinterdb/Makefile	/^CONFIG_HASH = $(shell echo $(CC) $(DEPFLAGS) $(CFLAGS) $(INCLUDE) $(TARGET_ARCH) $(LD) $(LDFLAGS) $(LIBS) $(AR) | md5sum | cut -f1 -d" ")$/;"	m
CONFIG_OPTIONS	external/splinterdb/scripts/run_ycsb.py	/^CONFIG_OPTIONS = ARGS.config$/;"	v
CONST_STATUS	external/splinterdb/src/platform_linux/platform.h	166;"	d
CTARGETS	Makefile	/^CTARGETS=test_micro test_throughput test_split_throughput test_adversarial test_splinter_lltable_throughput test_splinter_parallel test_parallel test_range_filter# test_fill_varied_throughput test_near_full test_deletions test_merge test_hash_accesses test_bulk test_whitelist test_resize test_micro_throughput test_micro_write test_micro_read test_lltable_throughput$/;"	m
CTARGETS	other_filters/cqf/Makefile	/^CTARGETS=test_splinter_ops test_splinter_throughput test_splinter_zipfian_histogram test_splinter_adversarial test_micro_throughput test_micro_super test_parallel test_threadsafe #test_pc bm test_hash_accesses #test_fill_varied_throughput #test$/;"	m
CTARGETS	other_filters/taf/Makefile	/^CTARGETS=test test_threadsafe test_pc bm test_throughput test_fill_varied_throughput test_near_full test_deletions test_merge test_hash_accesses test_bulk test_whitelist$/;"	m
CTEST	external/splinterdb/tests/unit/ctest.h	201;"	d
CTEST	external/splinterdb/tests/unit/main.c	/^CTEST(suite, test) {}$/;"	f
CTEST2	external/splinterdb/tests/unit/btree_stress_test.c	/^CTEST2(btree_stress, test_random_inserts_concurrent)$/;"	f
CTEST2	external/splinterdb/tests/unit/btree_test.c	/^CTEST2(btree, test_index_hdr)$/;"	f
CTEST2	external/splinterdb/tests/unit/btree_test.c	/^CTEST2(btree, test_index_hdr_search)$/;"	f
CTEST2	external/splinterdb/tests/unit/btree_test.c	/^CTEST2(btree, test_leaf_hdr)$/;"	f
CTEST2	external/splinterdb/tests/unit/btree_test.c	/^CTEST2(btree, test_leaf_hdr_search)$/;"	f
CTEST2	external/splinterdb/tests/unit/btree_test.c	/^CTEST2(btree, test_leaf_split)$/;"	f
CTEST2	external/splinterdb/tests/unit/config_parse_test.c	/^CTEST2(config_parse, test_basic_parsing)$/;"	f
CTEST2	external/splinterdb/tests/unit/ctest.h	204;"	d
CTEST2	external/splinterdb/tests/unit/large_inserts_stress_test.c	/^CTEST2(large_inserts_stress, test_random_key_random_values_inserts)$/;"	f
CTEST2	external/splinterdb/tests/unit/large_inserts_stress_test.c	/^CTEST2(large_inserts_stress, test_random_key_seq_values_inserts)$/;"	f
CTEST2	external/splinterdb/tests/unit/large_inserts_stress_test.c	/^CTEST2(large_inserts_stress, test_random_keys_random_values_threaded)$/;"	f
CTEST2	external/splinterdb/tests/unit/large_inserts_stress_test.c	/^CTEST2(large_inserts_stress, test_random_keys_seq_values_threaded)$/;"	f
CTEST2	external/splinterdb/tests/unit/large_inserts_stress_test.c	/^CTEST2(large_inserts_stress, test_seq_key_random_values_inserts)$/;"	f
CTEST2	external/splinterdb/tests/unit/large_inserts_stress_test.c	/^CTEST2(large_inserts_stress, test_seq_key_seq_values_inserts)$/;"	f
CTEST2	external/splinterdb/tests/unit/large_inserts_stress_test.c	/^CTEST2(large_inserts_stress, test_seq_key_seq_values_inserts_forked)$/;"	f
CTEST2	external/splinterdb/tests/unit/large_inserts_stress_test.c	/^CTEST2(large_inserts_stress, test_seq_keys_random_values_threaded)$/;"	f
CTEST2	external/splinterdb/tests/unit/large_inserts_stress_test.c	/^CTEST2(large_inserts_stress,$/;"	f
CTEST2	external/splinterdb/tests/unit/limitations_test.c	/^CTEST2(limitations, test_create_zero_disk_size)$/;"	f
CTEST2	external/splinterdb/tests/unit/limitations_test.c	/^CTEST2(limitations, test_create_zero_extent_capacity)$/;"	f
CTEST2	external/splinterdb/tests/unit/limitations_test.c	/^CTEST2(limitations, test_disk_size_not_integral_multiple_of_extents)$/;"	f
CTEST2	external/splinterdb/tests/unit/limitations_test.c	/^CTEST2(limitations, test_disk_size_not_integral_multiple_of_page_size)$/;"	f
CTEST2	external/splinterdb/tests/unit/limitations_test.c	/^CTEST2(limitations, test_file_error_returns)$/;"	f
CTEST2	external/splinterdb/tests/unit/limitations_test.c	/^CTEST2(limitations, test_io_init_invalid_extent_size)$/;"	f
CTEST2	external/splinterdb/tests/unit/limitations_test.c	/^CTEST2(limitations, test_io_init_invalid_page_size)$/;"	f
CTEST2	external/splinterdb/tests/unit/limitations_test.c	/^CTEST2(limitations, test_splinterdb_create_invalid_extent_size)$/;"	f
CTEST2	external/splinterdb/tests/unit/limitations_test.c	/^CTEST2(limitations, test_splinterdb_create_invalid_page_size)$/;"	f
CTEST2	external/splinterdb/tests/unit/limitations_test.c	/^CTEST2(limitations, test_splinterdb_create_invalid_task_system_config)$/;"	f
CTEST2	external/splinterdb/tests/unit/limitations_test.c	/^CTEST2(limitations, test_trunk_config_init_fails_for_invalid_configs)$/;"	f
CTEST2	external/splinterdb/tests/unit/limitations_test.c	/^CTEST2(limitations, test_zero_cache_size)$/;"	f
CTEST2	external/splinterdb/tests/unit/misc_test.c	/^CTEST2(misc, test_assert_basic_msg)$/;"	f
CTEST2	external/splinterdb/tests/unit/misc_test.c	/^CTEST2(misc, test_assert_msg_with_args)$/;"	f
CTEST2	external/splinterdb/tests/unit/misc_test.c	/^CTEST2(misc, test_bytes_to_fractional_value_macros)$/;"	f
CTEST2	external/splinterdb/tests/unit/misc_test.c	/^CTEST2(misc, test_ctest_assert_prints_user_msg_with_params)$/;"	f
CTEST2	external/splinterdb/tests/unit/misc_test.c	/^CTEST2(misc, test_size_to_str)$/;"	f
CTEST2	external/splinterdb/tests/unit/platform_apis_test.c	/^CTEST2(platform_api, test_platform_buffer_init)$/;"	f
CTEST2	external/splinterdb/tests/unit/platform_apis_test.c	/^CTEST2(platform_api, test_platform_buffer_init_fails_for_very_large_length)$/;"	f
CTEST2	external/splinterdb/tests/unit/platform_apis_test.c	/^CTEST2(platform_api, test_platform_condvar_init_destroy)$/;"	f
CTEST2	external/splinterdb/tests/unit/platform_apis_test.c	/^CTEST2(platform_api, test_platform_mutex_init_destroy)$/;"	f
CTEST2	external/splinterdb/tests/unit/platform_apis_test.c	/^CTEST2(platform_api, test_platform_semaphore_init_destroy)$/;"	f
CTEST2	external/splinterdb/tests/unit/platform_apis_test.c	/^CTEST2(platform_api, test_platform_spinlock_init_destroy)$/;"	f
CTEST2	external/splinterdb/tests/unit/splinter_shmem_test.c	/^CTEST2(splinter_shmem, test_aligned_allocations)$/;"	f
CTEST2	external/splinterdb/tests/unit/splinter_shmem_test.c	/^CTEST2(splinter_shmem, test_allocations_causing_OOMs)$/;"	f
CTEST2	external/splinterdb/tests/unit/splinter_shmem_test.c	/^CTEST2(splinter_shmem, test_allocations_using_get_heap_id)$/;"	f
CTEST2	external/splinterdb/tests/unit/splinter_shmem_test.c	/^CTEST2(splinter_shmem, test_concurrent_allocs_by_n_threads)$/;"	f
CTEST2	external/splinterdb/tests/unit/splinter_shmem_test.c	/^CTEST2(splinter_shmem, test_create_destroy_shmem)$/;"	f
CTEST2	external/splinterdb/tests/unit/splinter_shmem_test.c	/^CTEST2(splinter_shmem, test_free)$/;"	f
CTEST2	external/splinterdb/tests/unit/splinter_shmem_test.c	/^CTEST2(splinter_shmem, test_free_realloc_around_inuse_fragments)$/;"	f
CTEST2	external/splinterdb/tests/unit/splinter_shmem_test.c	/^CTEST2(splinter_shmem, test_realloc_of_free_fragments_uses_first_fit)$/;"	f
CTEST2	external/splinterdb/tests/unit/splinter_shmem_test.c	/^CTEST2(splinter_shmem, test_realloc_of_large_fragment)$/;"	f
CTEST2	external/splinterdb/tests/unit/splinter_shmem_test.c	/^CTEST2(splinter_shmem, test_unaligned_allocations)$/;"	f
CTEST2	external/splinterdb/tests/unit/splinter_test.c	/^CTEST2(splinter, test_inserts)$/;"	f
CTEST2	external/splinterdb/tests/unit/splinter_test.c	/^CTEST2(splinter, test_lookups)$/;"	f
CTEST2	external/splinterdb/tests/unit/splinter_test.c	/^CTEST2(splinter, test_splinter_print_diags)$/;"	f
CTEST2	external/splinterdb/tests/unit/splinterdb_forked_child_test.c	/^CTEST2(splinterdb_forked_child, test_data_structures_handles)$/;"	f
CTEST2	external/splinterdb/tests/unit/splinterdb_forked_child_test.c	/^CTEST2(splinterdb_forked_child, test_multiple_forked_process_doing_IOs)$/;"	f
CTEST2	external/splinterdb/tests/unit/splinterdb_forked_child_test.c	/^CTEST2(splinterdb_forked_child, test_one_insert_then_close_bug)$/;"	f
CTEST2	external/splinterdb/tests/unit/splinterdb_forked_child_test.c	/^CTEST2(splinterdb_forked_child,$/;"	f
CTEST2	external/splinterdb/tests/unit/splinterdb_heap_id_mgmt_test.c	/^CTEST2(splinterdb_heap_id_mgmt, test_create_close)$/;"	f
CTEST2	external/splinterdb/tests/unit/splinterdb_heap_id_mgmt_test.c	/^CTEST2(splinterdb_heap_id_mgmt, test_create_close_and_reopen)$/;"	f
CTEST2	external/splinterdb/tests/unit/splinterdb_heap_id_mgmt_test.c	/^CTEST2(splinterdb_heap_id_mgmt, test_failed_init_config)$/;"	f
CTEST2	external/splinterdb/tests/unit/splinterdb_quick_test.c	/^CTEST2(splinterdb_quick, test_apis_for_max_key_length)$/;"	f
CTEST2	external/splinterdb/tests/unit/splinterdb_quick_test.c	/^CTEST2(splinterdb_quick, test_basic_flow)$/;"	f
CTEST2	external/splinterdb/tests/unit/splinterdb_quick_test.c	/^CTEST2(splinterdb_quick, test_basic_iterator)$/;"	f
CTEST2	external/splinterdb/tests/unit/splinterdb_quick_test.c	/^CTEST2(splinterdb_quick, test_close_and_reopen)$/;"	f
CTEST2	external/splinterdb/tests/unit/splinterdb_quick_test.c	/^CTEST2(splinterdb_quick, test_custom_data_config)$/;"	f
CTEST2	external/splinterdb/tests/unit/splinterdb_quick_test.c	/^CTEST2(splinterdb_quick, test_empty_iterator)$/;"	f
CTEST2	external/splinterdb/tests/unit/splinterdb_quick_test.c	/^CTEST2(splinterdb_quick, test_iterator_custom_comparator)$/;"	f
CTEST2	external/splinterdb/tests/unit/splinterdb_quick_test.c	/^CTEST2(splinterdb_quick, test_iterator_init_bug)$/;"	f
CTEST2	external/splinterdb/tests/unit/splinterdb_quick_test.c	/^CTEST2(splinterdb_quick, test_iterator_prev_and_next)$/;"	f
CTEST2	external/splinterdb/tests/unit/splinterdb_quick_test.c	/^CTEST2(splinterdb_quick, test_key_size_gt_max_key_size)$/;"	f
CTEST2	external/splinterdb/tests/unit/splinterdb_quick_test.c	/^CTEST2(splinterdb_quick, test_repeated_insert_close_reopen)$/;"	f
CTEST2	external/splinterdb/tests/unit/splinterdb_quick_test.c	/^CTEST2(splinterdb_quick, test_splinterdb_create_w_all_background_threads)$/;"	f
CTEST2	external/splinterdb/tests/unit/splinterdb_quick_test.c	/^CTEST2(splinterdb_quick, test_splinterdb_create_w_background_threads)$/;"	f
CTEST2	external/splinterdb/tests/unit/splinterdb_quick_test.c	/^CTEST2(splinterdb_quick, test_splinterdb_iterator_with_non_existent_startkey)$/;"	f
CTEST2	external/splinterdb/tests/unit/splinterdb_quick_test.c	/^CTEST2(splinterdb_quick, test_splinterdb_iterator_with_startkey)$/;"	f
CTEST2	external/splinterdb/tests/unit/splinterdb_quick_test.c	/^CTEST2(splinterdb_quick, test_value_size_gt_max_value_size)$/;"	f
CTEST2	external/splinterdb/tests/unit/splinterdb_quick_test.c	/^CTEST2(splinterdb_quick, test_variable_length_values)$/;"	f
CTEST2	external/splinterdb/tests/unit/splinterdb_quick_test.c	/^CTEST2(splinterdb_quick,$/;"	f
CTEST2	external/splinterdb/tests/unit/splinterdb_stress_test.c	/^CTEST2(splinterdb_stress, test_iterator_over_many_kvs)$/;"	f
CTEST2	external/splinterdb/tests/unit/splinterdb_stress_test.c	/^CTEST2(splinterdb_stress, test_naive_range_delete)$/;"	f
CTEST2	external/splinterdb/tests/unit/splinterdb_stress_test.c	/^CTEST2(splinterdb_stress, test_random_inserts_concurrent)$/;"	f
CTEST2	external/splinterdb/tests/unit/task_system_test.c	/^CTEST2(task_system, test_basic_create_destroy)$/;"	f
CTEST2	external/splinterdb/tests/unit/task_system_test.c	/^CTEST2(task_system, test_max_threads_using_lower_apis)$/;"	f
CTEST2	external/splinterdb/tests/unit/task_system_test.c	/^CTEST2(task_system, test_one_thread_using_extern_apis)$/;"	f
CTEST2	external/splinterdb/tests/unit/task_system_test.c	/^CTEST2(task_system, test_one_thread_using_lower_apis)$/;"	f
CTEST2	external/splinterdb/tests/unit/task_system_test.c	/^CTEST2(task_system, test_task_system_creation_with_bg_threads)$/;"	f
CTEST2	external/splinterdb/tests/unit/task_system_test.c	/^CTEST2(task_system, test_use_all_but_one_threads_for_bg_threads)$/;"	f
CTEST2	external/splinterdb/tests/unit/util_test.c	/^CTEST2(util, test_debug_hex_encode)$/;"	f
CTEST2	external/splinterdb/tests/unit/writable_buffer_test.c	/^CTEST2(writable_buffer, test_basic_copy_slice)$/;"	f
CTEST2	external/splinterdb/tests/unit/writable_buffer_test.c	/^CTEST2(writable_buffer, test_basic_empty_buffer)$/;"	f
CTEST2	external/splinterdb/tests/unit/writable_buffer_test.c	/^CTEST2(writable_buffer, test_basic_length_after_deinit)$/;"	f
CTEST2	external/splinterdb/tests/unit/writable_buffer_test.c	/^CTEST2(writable_buffer, test_basic_user_buffer)$/;"	f
CTEST2	external/splinterdb/tests/unit/writable_buffer_test.c	/^CTEST2(writable_buffer, test_copy_slice_causing_resize_larger)$/;"	f
CTEST2	external/splinterdb/tests/unit/writable_buffer_test.c	/^CTEST2(writable_buffer, test_resize_empty_buffer)$/;"	f
CTEST2	external/splinterdb/tests/unit/writable_buffer_test.c	/^CTEST2(writable_buffer, test_resize_empty_buffer_then_check_apis_after_deinit)$/;"	f
CTEST2	external/splinterdb/tests/unit/writable_buffer_test.c	/^CTEST2(writable_buffer, test_resize_empty_buffer_to_larger)$/;"	f
CTEST2	external/splinterdb/tests/unit/writable_buffer_test.c	/^CTEST2(writable_buffer, test_resize_empty_buffer_to_smaller)$/;"	f
CTEST2	external/splinterdb/tests/unit/writable_buffer_test.c	/^CTEST2(writable_buffer, test_resize_user_buffer_to_larger)$/;"	f
CTEST2	external/splinterdb/tests/unit/writable_buffer_test.c	/^CTEST2(writable_buffer, test_resize_user_buffer_to_same_length)$/;"	f
CTEST2	external/splinterdb/tests/unit/writable_buffer_test.c	/^CTEST2(writable_buffer, test_resize_user_buffer_to_smaller)$/;"	f
CTEST2	external/splinterdb/tests/unit/writable_buffer_test.c	/^CTEST2(writable_buffer, test_writable_buffer_append)$/;"	f
CTEST2	external/splinterdb/tests/unit/writable_buffer_test.c	/^CTEST2(writable_buffer, test_writable_buffer_append_beyond_orig_length)$/;"	f
CTEST2_SKIP	external/splinterdb/tests/unit/ctest.h	205;"	d
CTEST2_SKIP	external/splinterdb/tests/unit/large_inserts_stress_test.c	/^CTEST2_SKIP(large_inserts_stress, test_seq_key_seq_values_inserts_threaded)$/;"	f
CTEST2_SKIP	external/splinterdb/tests/unit/large_inserts_stress_test.c	/^CTEST2_SKIP(large_inserts_stress,$/;"	f
CTEST2_SKIP	external/splinterdb/tests/unit/splinterdb_stress_test.c	/^CTEST2_SKIP(splinterdb_stress, test_issue_458_mini_destroy_unused_debug_assert)$/;"	f
CTEST_DATA	external/splinterdb/tests/unit/btree_stress_test.c	/^CTEST_DATA(btree_stress)$/;"	f
CTEST_DATA	external/splinterdb/tests/unit/btree_test.c	/^CTEST_DATA(btree)$/;"	f
CTEST_DATA	external/splinterdb/tests/unit/config_parse_test.c	/^CTEST_DATA(config_parse)$/;"	f
CTEST_DATA	external/splinterdb/tests/unit/ctest.h	167;"	d
CTEST_DATA	external/splinterdb/tests/unit/large_inserts_stress_test.c	/^CTEST_DATA(large_inserts_stress)$/;"	f
CTEST_DATA	external/splinterdb/tests/unit/limitations_test.c	/^CTEST_DATA(limitations)$/;"	f
CTEST_DATA	external/splinterdb/tests/unit/misc_test.c	/^CTEST_DATA(misc)$/;"	f
CTEST_DATA	external/splinterdb/tests/unit/platform_apis_test.c	/^CTEST_DATA(platform_api)$/;"	f
CTEST_DATA	external/splinterdb/tests/unit/splinter_shmem_test.c	/^CTEST_DATA(splinter_shmem)$/;"	f
CTEST_DATA	external/splinterdb/tests/unit/splinter_test.c	/^CTEST_DATA(splinter)$/;"	f
CTEST_DATA	external/splinterdb/tests/unit/splinterdb_forked_child_test.c	/^CTEST_DATA(splinterdb_forked_child)$/;"	f
CTEST_DATA	external/splinterdb/tests/unit/splinterdb_heap_id_mgmt_test.c	/^CTEST_DATA(splinterdb_heap_id_mgmt)$/;"	f
CTEST_DATA	external/splinterdb/tests/unit/splinterdb_quick_test.c	/^CTEST_DATA(splinterdb_quick)$/;"	f
CTEST_DATA	external/splinterdb/tests/unit/splinterdb_stress_test.c	/^CTEST_DATA(splinterdb_stress)$/;"	f
CTEST_DATA	external/splinterdb/tests/unit/task_system_test.c	/^CTEST_DATA(task_system)$/;"	f
CTEST_DATA	external/splinterdb/tests/unit/util_test.c	/^CTEST_DATA(util){};$/;"	f
CTEST_DATA	external/splinterdb/tests/unit/writable_buffer_test.c	/^CTEST_DATA(writable_buffer)$/;"	f
CTEST_ERR	external/splinterdb/tests/unit/main.c	/^CTEST_ERR(const char *fmt, ...)$/;"	f
CTEST_H	external/splinterdb/tests/unit/ctest.h	18;"	d
CTEST_IMPL_CTEST	external/splinterdb/tests/unit/ctest.h	175;"	d
CTEST_IMPL_CTEST2	external/splinterdb/tests/unit/ctest.h	180;"	d
CTEST_IMPL_DATA_SNAME	external/splinterdb/tests/unit/ctest.h	117;"	d
CTEST_IMPL_DATA_TNAME	external/splinterdb/tests/unit/ctest.h	118;"	d
CTEST_IMPL_DIAG_POP	external/splinterdb/tests/unit/ctest.h	48;"	d
CTEST_IMPL_DIAG_POP	external/splinterdb/tests/unit/ctest.h	53;"	d
CTEST_IMPL_DIAG_POP	external/splinterdb/tests/unit/ctest.h	58;"	d
CTEST_IMPL_DIAG_PUSH_IGNORED	external/splinterdb/tests/unit/ctest.h	45;"	d
CTEST_IMPL_DIAG_PUSH_IGNORED	external/splinterdb/tests/unit/ctest.h	51;"	d
CTEST_IMPL_DIAG_PUSH_IGNORED	external/splinterdb/tests/unit/ctest.h	57;"	d
CTEST_IMPL_FNAME	external/splinterdb/tests/unit/ctest.h	115;"	d
CTEST_IMPL_FORMAT_PRINTF	external/splinterdb/tests/unit/ctest.h	21;"	d
CTEST_IMPL_FORMAT_PRINTF	external/splinterdb/tests/unit/ctest.h	23;"	d
CTEST_IMPL_MAGIC	external/splinterdb/tests/unit/ctest.h	129;"	d
CTEST_IMPL_NAME	external/splinterdb/tests/unit/ctest.h	114;"	d
CTEST_IMPL_PRAGMA	external/splinterdb/tests/unit/ctest.h	39;"	d
CTEST_IMPL_SECTION	external/splinterdb/tests/unit/ctest.h	131;"	d
CTEST_IMPL_SECTION	external/splinterdb/tests/unit/ctest.h	134;"	d
CTEST_IMPL_SETUP_FNAME	external/splinterdb/tests/unit/ctest.h	120;"	d
CTEST_IMPL_SETUP_FPNAME	external/splinterdb/tests/unit/ctest.h	121;"	d
CTEST_IMPL_SETUP_TPNAME	external/splinterdb/tests/unit/ctest.h	122;"	d
CTEST_IMPL_STRUCT	external/splinterdb/tests/unit/ctest.h	138;"	d
CTEST_IMPL_TEARDOWN_FNAME	external/splinterdb/tests/unit/ctest.h	124;"	d
CTEST_IMPL_TEARDOWN_FPNAME	external/splinterdb/tests/unit/ctest.h	125;"	d
CTEST_IMPL_TEARDOWN_TPNAME	external/splinterdb/tests/unit/ctest.h	126;"	d
CTEST_IMPL_TNAME	external/splinterdb/tests/unit/ctest.h	116;"	d
CTEST_LOG	external/splinterdb/tests/unit/main.c	/^CTEST_LOG(const char *fmt, ...)$/;"	f
CTEST_LOG_INFO	external/splinterdb/tests/unit/ctest.h	99;"	d
CTEST_MAIN	external/splinterdb/tests/unit/main.c	7;"	d	file:
CTEST_SEGFAULT	external/splinterdb/tests/unit/main.c	10;"	d	file:
CTEST_SETUP	external/splinterdb/tests/unit/btree_stress_test.c	/^CTEST_SETUP(btree_stress)$/;"	f
CTEST_SETUP	external/splinterdb/tests/unit/btree_test.c	/^CTEST_SETUP(btree)$/;"	f
CTEST_SETUP	external/splinterdb/tests/unit/config_parse_test.c	/^CTEST_SETUP(config_parse)$/;"	f
CTEST_SETUP	external/splinterdb/tests/unit/ctest.h	150;"	d
CTEST_SETUP	external/splinterdb/tests/unit/large_inserts_stress_test.c	/^CTEST_SETUP(large_inserts_stress)$/;"	f
CTEST_SETUP	external/splinterdb/tests/unit/limitations_test.c	/^CTEST_SETUP(limitations)$/;"	f
CTEST_SETUP	external/splinterdb/tests/unit/misc_test.c	/^CTEST_SETUP(misc)$/;"	f
CTEST_SETUP	external/splinterdb/tests/unit/platform_apis_test.c	/^CTEST_SETUP(platform_api)$/;"	f
CTEST_SETUP	external/splinterdb/tests/unit/splinter_shmem_test.c	/^CTEST_SETUP(splinter_shmem)$/;"	f
CTEST_SETUP	external/splinterdb/tests/unit/splinter_test.c	/^CTEST_SETUP(splinter)$/;"	f
CTEST_SETUP	external/splinterdb/tests/unit/splinterdb_forked_child_test.c	/^CTEST_SETUP(splinterdb_forked_child)$/;"	f
CTEST_SETUP	external/splinterdb/tests/unit/splinterdb_heap_id_mgmt_test.c	/^CTEST_SETUP(splinterdb_heap_id_mgmt)$/;"	f
CTEST_SETUP	external/splinterdb/tests/unit/splinterdb_quick_test.c	/^CTEST_SETUP(splinterdb_quick)$/;"	f
CTEST_SETUP	external/splinterdb/tests/unit/splinterdb_stress_test.c	/^CTEST_SETUP(splinterdb_stress)$/;"	f
CTEST_SETUP	external/splinterdb/tests/unit/task_system_test.c	/^CTEST_SETUP(task_system)$/;"	f
CTEST_SETUP	external/splinterdb/tests/unit/util_test.c	/^CTEST_SETUP(util) {}$/;"	f
CTEST_SETUP	external/splinterdb/tests/unit/writable_buffer_test.c	/^CTEST_SETUP(writable_buffer)$/;"	f
CTEST_SKIP	external/splinterdb/tests/unit/ctest.h	202;"	d
CTEST_TEARDOWN	external/splinterdb/tests/unit/btree_stress_test.c	/^CTEST_TEARDOWN(btree_stress)$/;"	f
CTEST_TEARDOWN	external/splinterdb/tests/unit/btree_test.c	/^CTEST_TEARDOWN(btree)$/;"	f
CTEST_TEARDOWN	external/splinterdb/tests/unit/config_parse_test.c	/^CTEST_TEARDOWN(config_parse)$/;"	f
CTEST_TEARDOWN	external/splinterdb/tests/unit/ctest.h	158;"	d
CTEST_TEARDOWN	external/splinterdb/tests/unit/large_inserts_stress_test.c	/^CTEST_TEARDOWN(large_inserts_stress)$/;"	f
CTEST_TEARDOWN	external/splinterdb/tests/unit/limitations_test.c	/^CTEST_TEARDOWN(limitations)$/;"	f
CTEST_TEARDOWN	external/splinterdb/tests/unit/misc_test.c	/^CTEST_TEARDOWN(misc) {}$/;"	f
CTEST_TEARDOWN	external/splinterdb/tests/unit/platform_apis_test.c	/^CTEST_TEARDOWN(platform_api)$/;"	f
CTEST_TEARDOWN	external/splinterdb/tests/unit/splinter_shmem_test.c	/^CTEST_TEARDOWN(splinter_shmem)$/;"	f
CTEST_TEARDOWN	external/splinterdb/tests/unit/splinter_test.c	/^CTEST_TEARDOWN(splinter)$/;"	f
CTEST_TEARDOWN	external/splinterdb/tests/unit/splinterdb_forked_child_test.c	/^CTEST_TEARDOWN(splinterdb_forked_child) {}$/;"	f
CTEST_TEARDOWN	external/splinterdb/tests/unit/splinterdb_heap_id_mgmt_test.c	/^CTEST_TEARDOWN(splinterdb_heap_id_mgmt)$/;"	f
CTEST_TEARDOWN	external/splinterdb/tests/unit/splinterdb_quick_test.c	/^CTEST_TEARDOWN(splinterdb_quick)$/;"	f
CTEST_TEARDOWN	external/splinterdb/tests/unit/splinterdb_stress_test.c	/^CTEST_TEARDOWN(splinterdb_stress)$/;"	f
CTEST_TEARDOWN	external/splinterdb/tests/unit/task_system_test.c	/^CTEST_TEARDOWN(task_system)$/;"	f
CTEST_TEARDOWN	external/splinterdb/tests/unit/util_test.c	/^CTEST_TEARDOWN(util) {}$/;"	f
CTEST_TEARDOWN	external/splinterdb/tests/unit/writable_buffer_test.c	/^CTEST_TEARDOWN(writable_buffer)$/;"	f
CUCKOO_FILTER_BITS_H_	other_filters/acf/src/bitsutil.h	2;"	d
CUCKOO_FILTER_BITS_H_	other_filters/acfsim/src/bitsutil.h	2;"	d
CUCKOO_FILTER_BITS_H_	other_filters/cf/src/bitsutil.h	2;"	d
CUCKOO_FILTER_CUCKOO_FILTER_H_	other_filters/acf/src/cuckoofilter.h	2;"	d
CUCKOO_FILTER_CUCKOO_FILTER_H_	other_filters/acfsim/src/cuckoofilter.h	2;"	d
CUCKOO_FILTER_CUCKOO_FILTER_H_	other_filters/cf/src/cuckoofilter.h	2;"	d
CUCKOO_FILTER_DEBUG_H_	other_filters/acf/src/debug.h	2;"	d
CUCKOO_FILTER_DEBUG_H_	other_filters/acfsim/src/debug.h	2;"	d
CUCKOO_FILTER_DEBUG_H_	other_filters/cf/src/debug.h	2;"	d
CUCKOO_FILTER_HASHUTIL_H_	other_filters/acf/src/hashutil.h	2;"	d
CUCKOO_FILTER_HASHUTIL_H_	other_filters/acfsim/src/hashutil.h	2;"	d
CUCKOO_FILTER_HASHUTIL_H_	other_filters/cf/src/hashutil.h	2;"	d
CUCKOO_FILTER_MIRRORED_TABLE_H_	other_filters/acf/src/mirroredtable.h	2;"	d
CUCKOO_FILTER_MIRRORED_TABLE_H_	other_filters/acfsim/src/mirroredtable.h	2;"	d
CUCKOO_FILTER_PACKED_TABLE_H_	other_filters/acf/src/packedtable.h	2;"	d
CUCKOO_FILTER_PACKED_TABLE_H_	other_filters/acfsim/src/packedtable.h	2;"	d
CUCKOO_FILTER_PACKED_TABLE_H_	other_filters/cf/src/packedtable.h	2;"	d
CUCKOO_FILTER_PERM_ENCODING_H_	other_filters/acf/src/permencoding.h	2;"	d
CUCKOO_FILTER_PERM_ENCODING_H_	other_filters/acfsim/src/permencoding.h	2;"	d
CUCKOO_FILTER_PERM_ENCODING_H_	other_filters/cf/src/permencoding.h	2;"	d
CUCKOO_FILTER_PRINTUTIL_H_	other_filters/acf/src/printutil.h	2;"	d
CUCKOO_FILTER_PRINTUTIL_H_	other_filters/acfsim/src/printutil.h	2;"	d
CUCKOO_FILTER_PRINTUTIL_H_	other_filters/cf/src/printutil.h	2;"	d
CUCKOO_FILTER_SINGLE_TABLE_H_	other_filters/acf/src/singletable.h	2;"	d
CUCKOO_FILTER_SINGLE_TABLE_H_	other_filters/acfsim/src/singletable.h	2;"	d
CUCKOO_FILTER_SINGLE_TABLE_H_	other_filters/cf/src/singletable.h	2;"	d
CXX	Makefile	/^CXX = g++ -std=c++11$/;"	m
CXX	other_filters/cqf/Makefile	/^CXX = g++ -std=c++11$/;"	m
CXX	other_filters/taf/Makefile	/^CXX = g++ -std=c++11$/;"	m
CXXFLAGS	Makefile	/^CXXFLAGS = -Wall $(DEBUG) $(PROFILE) $(OPT) $(ARCH) -m64 -I. -Iinclude -Iexternal\/splinterdb\/include -DSPLINTERDB_PLATFORM_DIR=platform_linux -DSKIP_BOOL_DEF -D_GNU_SOURCE$/;"	m
CXXFLAGS	other_filters/cqf/Makefile	/^CXXFLAGS = -Wall $(DEBUG) $(PROFILE) $(OPT) $(ARCH) -DSPLINTERDB_PLATFORM_DIR=platform_linux -DSKIP_BOOL_DEF -D_GNU_SOURCE -m64 -I. -Iinclude -I..\/..\/external\/splinterdb\/include$/;"	m
CXXFLAGS	other_filters/taf/Makefile	/^CXXFLAGS = -Wall $(DEBUG) $(PROFILE) $(OPT) $(ARCH) -lpthread -lssl -lcrypto -m64 -I. -Iinclude$/;"	m
CXXTARGETS	Makefile	/^CXXTARGETS=test_ext_throughput test_ext_inc_throughput test_zipf_throughput test_ext_churn taf$/;"	m
CXXTARGETS	other_filters/cqf/Makefile	/^CXXTARGETS=test_ext_throughput test_adversarial$/;"	m
CXXTARGETS	other_filters/taf/Makefile	/^CXXTARGETS=taf$/;"	m
CompareGreater	other_filters/cf/example/test_ext_throughput.cc	/^struct CompareGreater {$/;"	s	file:
CompareGreater	other_filters/cqf/src/test_adversarial.cc	/^struct CompareGreater {$/;"	s	file:
CompareGreater	other_filters/cqf/src/test_ext_throughput.cc	/^struct CompareGreater {$/;"	s	file:
CompareGreater	src/taf.cc	/^struct CompareGreater {$/;"	s	file:
CompareGreater	src/test_ext_churn.cc	/^struct CompareGreater {$/;"	s	file:
CompareGreater	src/test_ext_inc_throughput.cc	/^struct CompareGreater {$/;"	s	file:
CompareGreater	src/test_ext_throughput.cc	/^struct CompareGreater {$/;"	s	file:
CompareGreater	src/test_zipf_throughput.cc	/^struct CompareGreater {$/;"	s	file:
ConfigDB	external/splinterdb/scripts/config_reader.py	/^class ConfigDB():$/;"	c
ConstructFromAddCount	other_filters/acf/benchmarks/bulk-insert-and-query.cc	/^  static Table ConstructFromAddCount(size_t add_count) { return Table(add_count); }$/;"	f	struct:FilterAPI
ConstructFromAddCount	other_filters/acf/benchmarks/bulk-insert-and-query.cc	/^  static Table ConstructFromAddCount(size_t add_count) {$/;"	f	struct:FilterAPI
ConstructFromAddCount	other_filters/cf/benchmarks/bulk-insert-and-query.cc	/^  static Table ConstructFromAddCount(size_t add_count) { return Table(add_count); }$/;"	f	struct:FilterAPI
ConstructFromAddCount	other_filters/cf/benchmarks/bulk-insert-and-query.cc	/^  static Table ConstructFromAddCount(size_t add_count) {$/;"	f	struct:FilterAPI
Contain	other_filters/acf/benchmarks/bulk-insert-and-query.cc	/^  static bool Contain(uint64_t key, const Table * table) {$/;"	f	struct:FilterAPI
Contain	other_filters/acf/src/cuckoofilter.h	/^		Status CuckooFilter<ItemType, bits_per_item, TableType, HashFamily>::Contain(const ItemType key) const {$/;"	f	class:cuckoofilter::CuckooFilter
Contain	other_filters/acfsim/src/cuckoofilter.h	/^		Status CuckooFilter<ItemType, bits_per_item, TableType, HashFamily>::Contain(const ItemType key) const {$/;"	f	class:cuckoofilter::CuckooFilter
Contain	other_filters/cf/benchmarks/bulk-insert-and-query.cc	/^  static bool Contain(uint64_t key, const Table * table) {$/;"	f	struct:FilterAPI
Contain	other_filters/cf/src/cuckoofilter.h	/^Status CuckooFilter<ItemType, bits_per_item, TableType, HashFamily>::Contain($/;"	f	class:cuckoofilter::CuckooFilter
ContainReturn	other_filters/acf/src/cuckoofilter.h	/^		Status CuckooFilter<ItemType, bits_per_item, TableType, HashFamily>::ContainReturn(const ItemType key, uint64_t *ret_location) const {$/;"	f	class:cuckoofilter::CuckooFilter
ContainReturn	other_filters/acfsim/src/cuckoofilter.h	/^		Status CuckooFilter<ItemType, bits_per_item, TableType, HashFamily>::ContainReturn(const ItemType key, uint64_t *ret_location) const {$/;"	f	class:cuckoofilter::CuckooFilter
Ctest_argc	external/splinterdb/tests/unit/main.c	/^int          Ctest_argc = 0;$/;"	v
Ctest_argv	external/splinterdb/tests/unit/main.c	/^const char **Ctest_argv = NULL;$/;"	v
Ctest_verbosity	external/splinterdb/tests/unit/main.c	/^msg_level Ctest_verbosity = MSG_LEVEL_SILENT;$/;"	v
CuckooBenchmark	other_filters/acf/benchmarks/conext-figure5.cc	/^array<double, 5> CuckooBenchmark($/;"	f
CuckooBenchmark	other_filters/acf/benchmarks/conext-table3.cc	/^Metrics CuckooBenchmark(size_t add_count, const vector<uint64_t>& input) {$/;"	f
CuckooBenchmark	other_filters/cf/benchmarks/conext-figure5.cc	/^array<double, 5> CuckooBenchmark($/;"	f
CuckooBenchmark	other_filters/cf/benchmarks/conext-table3.cc	/^Metrics CuckooBenchmark(size_t add_count, const vector<uint64_t>& input) {$/;"	f
CuckooFilter	other_filters/acf/src/cuckoofilter.h	/^				 explicit CuckooFilter(const size_t max_num_keys) : num_items_(0), victim_(), hasher_() {$/;"	f	class:cuckoofilter::CuckooFilter
CuckooFilter	other_filters/acf/src/cuckoofilter.h	/^			 class CuckooFilter {$/;"	c	namespace:cuckoofilter
CuckooFilter	other_filters/acfsim/src/cuckoofilter.h	/^				 explicit CuckooFilter(const size_t max_num_keys) : num_items_(0), victim_(), hasher_() {$/;"	f	class:cuckoofilter::CuckooFilter
CuckooFilter	other_filters/acfsim/src/cuckoofilter.h	/^			 class CuckooFilter {$/;"	c	namespace:cuckoofilter
CuckooFilter	other_filters/cf/src/cuckoofilter.h	/^  explicit CuckooFilter(const size_t max_num_keys) : num_items_(0), victim_(), hasher_() {$/;"	f	class:cuckoofilter::CuckooFilter
CuckooFilter	other_filters/cf/src/cuckoofilter.h	/^class CuckooFilter {$/;"	c	namespace:cuckoofilter
DATA_LEAF_BLOCK_SIZE	other_filters/acf/example/test_churn.cc	16;"	d	file:
DATA_LEAF_BLOCK_SIZE	other_filters/acf/example/test_zipf_throughput.cc	77;"	d	file:
DATA_LEAF_BLOCK_SIZE	other_filters/acfsim/example/test_churn.cc	16;"	d	file:
DATA_LEAF_BLOCK_SIZE	other_filters/acfsim/example/test_zipf_throughput.cc	77;"	d	file:
DATA_LEAF_BLOCK_SIZE	other_filters/cf/example/test_ext_throughput.cc	16;"	d	file:
DATA_LEAF_BLOCK_SIZE	other_filters/cqf/src/test_adversarial.cc	98;"	d	file:
DATA_LEAF_BLOCK_SIZE	other_filters/cqf/src/test_ext_throughput.cc	107;"	d	file:
DATA_LEAF_BLOCK_SIZE	src/taf.cc	18;"	d	file:
DATA_LEAF_BLOCK_SIZE	src/test_ext_churn.cc	90;"	d	file:
DATA_LEAF_BLOCK_SIZE	src/test_ext_inc_throughput.cc	184;"	d	file:
DATA_LEAF_BLOCK_SIZE	src/test_ext_throughput.cc	184;"	d	file:
DATA_LEAF_BLOCK_SIZE	src/test_zipf_throughput.cc	146;"	d	file:
DATA_NODE_BLOCK_SIZE	other_filters/acf/example/test_churn.cc	15;"	d	file:
DATA_NODE_BLOCK_SIZE	other_filters/acf/example/test_zipf_throughput.cc	76;"	d	file:
DATA_NODE_BLOCK_SIZE	other_filters/acfsim/example/test_churn.cc	15;"	d	file:
DATA_NODE_BLOCK_SIZE	other_filters/acfsim/example/test_zipf_throughput.cc	76;"	d	file:
DATA_NODE_BLOCK_SIZE	other_filters/cf/example/test_ext_throughput.cc	15;"	d	file:
DATA_NODE_BLOCK_SIZE	other_filters/cqf/src/test_adversarial.cc	97;"	d	file:
DATA_NODE_BLOCK_SIZE	other_filters/cqf/src/test_ext_throughput.cc	106;"	d	file:
DATA_NODE_BLOCK_SIZE	src/taf.cc	17;"	d	file:
DATA_NODE_BLOCK_SIZE	src/test_ext_churn.cc	89;"	d	file:
DATA_NODE_BLOCK_SIZE	src/test_ext_inc_throughput.cc	183;"	d	file:
DATA_NODE_BLOCK_SIZE	src/test_ext_throughput.cc	183;"	d	file:
DATA_NODE_BLOCK_SIZE	src/test_zipf_throughput.cc	145;"	d	file:
DATETIME_STRING	external/splinterdb/scripts/run_ycsb.py	/^DATETIME_STRING = datetime.today().strftime('%Y_%m_%d_%H:%M')$/;"	v
DB_FILE_NAME	external/splinterdb/examples/splinterdb_custom_ipv4_addr_sortcmp_example.c	36;"	d	file:
DB_FILE_NAME	external/splinterdb/examples/splinterdb_intro_example.c	15;"	d	file:
DB_FILE_NAME	external/splinterdb/examples/splinterdb_iterators_example.c	13;"	d	file:
DB_FILE_NAME	external/splinterdb/examples/splinterdb_wide_values_example.c	13;"	d	file:
DB_FILE_SIZE_MB	external/splinterdb/examples/splinterdb_custom_ipv4_addr_sortcmp_example.c	37;"	d	file:
DB_FILE_SIZE_MB	external/splinterdb/examples/splinterdb_intro_example.c	16;"	d	file:
DB_FILE_SIZE_MB	external/splinterdb/examples/splinterdb_iterators_example.c	14;"	d	file:
DB_FILE_SIZE_MB	external/splinterdb/examples/splinterdb_wide_values_example.c	14;"	d	file:
DB_SIZE	external/splinterdb/scripts/run_ycsb.py	/^DB_SIZE = ARGS.db_size$/;"	v
DEBUG	Makefile	/^	DEBUG=$/;"	m
DEBUG	Makefile	/^	DEBUG=-g$/;"	m
DEBUG	other_filters/cqf/Makefile	/^	DEBUG=$/;"	m
DEBUG	other_filters/cqf/Makefile	/^	DEBUG=-g$/;"	m
DEBUG	other_filters/taf/Makefile	/^	DEBUG=$/;"	m
DEBUG	other_filters/taf/Makefile	/^	DEBUG=-g$/;"	m
DEBUG_ALL	other_filters/acf/src/debug.h	48;"	d
DEBUG_ALL	other_filters/acfsim/src/debug.h	48;"	d
DEBUG_ALL	other_filters/cf/src/debug.h	48;"	d
DEBUG_CQF	other_filters/cqf/src/gqf.c	54;"	d	file:
DEBUG_CQF	src/gqf.c	48;"	d	file:
DEBUG_CQF	src/gqf_backup.c	45;"	d	file:
DEBUG_CUCKOO	other_filters/acf/src/debug.h	44;"	d
DEBUG_CUCKOO	other_filters/acfsim/src/debug.h	44;"	d
DEBUG_CUCKOO	other_filters/cf/src/debug.h	44;"	d
DEBUG_DUMP	other_filters/cqf/src/gqf.c	57;"	d	file:
DEBUG_DUMP	src/gqf.c	51;"	d	file:
DEBUG_DUMP	src/gqf_backup.c	48;"	d	file:
DEBUG_ENCODE	other_filters/acf/src/debug.h	46;"	d
DEBUG_ENCODE	other_filters/acfsim/src/debug.h	46;"	d
DEBUG_ENCODE	other_filters/cf/src/debug.h	46;"	d
DEBUG_ERRS	other_filters/acf/src/debug.h	43;"	d
DEBUG_ERRS	other_filters/acfsim/src/debug.h	43;"	d
DEBUG_ERRS	other_filters/cf/src/debug.h	43;"	d
DEBUG_NONE	other_filters/acf/src/debug.h	42;"	d
DEBUG_NONE	other_filters/acfsim/src/debug.h	42;"	d
DEBUG_NONE	other_filters/cf/src/debug.h	42;"	d
DEBUG_PERROR	other_filters/acf/src/debug.h	25;"	d
DEBUG_PERROR	other_filters/acfsim/src/debug.h	25;"	d
DEBUG_PERROR	other_filters/cf/src/debug.h	25;"	d
DEBUG_TABLE	other_filters/acf/src/debug.h	45;"	d
DEBUG_TABLE	other_filters/acfsim/src/debug.h	45;"	d
DEBUG_TABLE	other_filters/cf/src/debug.h	45;"	d
DECIMAL_STRING_WIDTH	external/splinterdb/src/util.h	380;"	d
DECLARE_AUTO_KEY_BUFFER	external/splinterdb/src/data_internal.h	212;"	d
DECLARE_AUTO_WRITABLE_BUFFER	external/splinterdb/src/util.h	201;"	d
DECLARE_AUTO_WRITABLE_BUFFER_N	external/splinterdb/src/util.h	195;"	d
DEC_TO	other_filters/cqf/src/test_partitioned_counter.c	27;"	d	file:
DEC_TO	src/test_partitioned_counter.c	18;"	d	file:
DEFAULT_KEY_BUFFER_SIZE	external/splinterdb/src/data_internal.h	127;"	d
DEFAULT_THROTTLE_INTERVAL_SEC	external/splinterdb/src/platform_linux/platform.h	820;"	d
DELETE	external/splinterdb/scripts/list_test.py	/^DELETE = 'delete'$/;"	v
DELETE_MESSAGE	external/splinterdb/src/data_internal.h	322;"	d
DEPFLAGS	external/splinterdb/Makefile	/^DEPFLAGS  = -MMD -MP$/;"	m
DEPS	other_filters/taf/src/Makefile	/^DEPS = arcd.h constants.h macros.h murmur3.h bit_util.h remainder.h rsqf.h set.h$/;"	m
DESC	external/splinterdb/scripts/run_ycsb.py	/^        combination of thread_count and\/or memory_size."$/;"	v
DEVICE	external/splinterdb/scripts/run_ycsb.py	/^DEVICE = ARGS.device$/;"	v
DEVICE_SIZE_MB	external/splinterdb/tests/functional/io_apis_test.c	77;"	d	file:
DISTANCE_FROM_HOME_SLOT_CUTOFF	other_filters/cqf/src/gqf.c	45;"	d	file:
DISTANCE_FROM_HOME_SLOT_CUTOFF	src/gqf.c	39;"	d	file:
DISTANCE_FROM_HOME_SLOT_CUTOFF	src/gqf_backup.c	36;"	d	file:
DPRINTF	other_filters/acf/src/debug.h	21;"	d
DPRINTF	other_filters/acfsim/src/debug.h	21;"	d
DPRINTF	other_filters/cf/src/debug.h	21;"	d
Delete	other_filters/acf/src/cuckoofilter.h	/^		Status CuckooFilter<ItemType, bits_per_item, TableType, HashFamily>::Delete(const ItemType key, splinterdb *backing_map, const size_t bm_max_key_size, const size_t bm_max_val_size, splinterdb_lookup_result *bm_result, unsigned char* buffer) {$/;"	f	class:cuckoofilter::CuckooFilter
Delete	other_filters/acfsim/src/cuckoofilter.h	/^		Status CuckooFilter<ItemType, bits_per_item, TableType, HashFamily>::Delete(const ItemType key, splinterdb *backing_map, const size_t bm_max_key_size, const size_t bm_max_val_size, splinterdb_lookup_result *bm_result, unsigned char* buffer) {$/;"	f	class:cuckoofilter::CuckooFilter
Delete	other_filters/cf/src/cuckoofilter.h	/^Status CuckooFilter<ItemType, bits_per_item, TableType, HashFamily>::Delete($/;"	f	class:cuckoofilter::CuckooFilter
DeleteTagFromBucket	other_filters/acf/src/mirroredtable.h	/^		inline int DeleteTagFromBucket(const size_t i, const uint64_t tag) {$/;"	f	class:cuckoofilter::MirroredTable
DeleteTagFromBucket	other_filters/acf/src/packedtable.h	/^  bool DeleteTagFromBucket(const size_t i, const uint32_t tag) {$/;"	f	class:cuckoofilter::PackedTable
DeleteTagFromBucket	other_filters/acf/src/singletable.h	/^  inline bool DeleteTagFromBucket(const size_t i, const uint32_t tag) {$/;"	f	class:cuckoofilter::SingleTable
DeleteTagFromBucket	other_filters/acfsim/src/mirroredtable.h	/^		inline int DeleteTagFromBucket(const size_t i, const uint64_t tag) {$/;"	f	class:cuckoofilter::MirroredTable
DeleteTagFromBucket	other_filters/acfsim/src/packedtable.h	/^  bool DeleteTagFromBucket(const size_t i, const uint32_t tag) {$/;"	f	class:cuckoofilter::PackedTable
DeleteTagFromBucket	other_filters/acfsim/src/singletable.h	/^  inline bool DeleteTagFromBucket(const size_t i, const uint32_t tag) {$/;"	f	class:cuckoofilter::SingleTable
DeleteTagFromBucket	other_filters/cf/src/packedtable.h	/^  bool DeleteTagFromBucket(const size_t i, const uint32_t tag) {$/;"	f	class:cuckoofilter::PackedTable
DeleteTagFromBucket	other_filters/cf/src/singletable.h	/^  inline bool DeleteTagFromBucket(const size_t i, const uint32_t tag) {$/;"	f	class:cuckoofilter::SingleTable
Dict	external/splinterdb/scripts/list_test.py	/^from typing import List, Tuple, Dict$/;"	i
ENTRY_DID_NOT_EXIST	external/splinterdb/src/btree_private.h	/^      ENTRY_DID_NOT_EXIST,$/;"	e	enum:leaf_incorporate_spec::__anon11
ENTRY_HAS_BEEN_REMOVED	external/splinterdb/src/btree_private.h	/^      ENTRY_HAS_BEEN_REMOVED$/;"	e	enum:leaf_incorporate_spec::__anon11
ENTRY_STILL_EXISTS	external/splinterdb/src/btree_private.h	/^      ENTRY_STILL_EXISTS,$/;"	e	enum:leaf_incorporate_spec::__anon11
EVP_MD_CTX_free	other_filters/acf/src/hashutil.cc	/^void EVP_MD_CTX_free(EVP_MD_CTX *ctx)$/;"	f	namespace:cuckoofilter
EVP_MD_CTX_free	other_filters/acfsim/src/hashutil.cc	/^void EVP_MD_CTX_free(EVP_MD_CTX *ctx)$/;"	f	namespace:cuckoofilter
EVP_MD_CTX_free	other_filters/cf/src/hashutil.cc	/^void EVP_MD_CTX_free(EVP_MD_CTX *ctx)$/;"	f	namespace:cuckoofilter
EVP_MD_CTX_new	other_filters/acf/src/hashutil.cc	/^EVP_MD_CTX *EVP_MD_CTX_new(void)$/;"	f	namespace:cuckoofilter
EVP_MD_CTX_new	other_filters/acfsim/src/hashutil.cc	/^EVP_MD_CTX *EVP_MD_CTX_new(void)$/;"	f	namespace:cuckoofilter
EVP_MD_CTX_new	other_filters/cf/src/hashutil.cc	/^EVP_MD_CTX *EVP_MD_CTX_new(void)$/;"	f	namespace:cuckoofilter
EXAF_CONSTANTS_H	other_filters/taf/src/constants.h	6;"	d
EXAF_CONSTANTS_H	src/taf.cc	1156;"	d	file:
EXAF_H	other_filters/taf/src/exaf.h	6;"	d
EXAF_SEED	other_filters/taf/src/exaf.c	671;"	d	file:
EXAMPLES_BINS	external/splinterdb/Makefile	/^EXAMPLES_BINS=$(EXAMPLES_BIN_SRC:$(EXAMPLES_DIR)\/%_example.c=$(BINDIR)\/$(EXAMPLES_DIR)\/%_example)$/;"	m
EXAMPLES_BIN_SRC	external/splinterdb/Makefile	/^EXAMPLES_BIN_SRC=$(filter %_example.c, $(EXAMPLES_SRC))$/;"	m
EXAMPLES_DIR	external/splinterdb/Makefile	/^EXAMPLES_DIR         = examples$/;"	m
EXAMPLES_OBJ	external/splinterdb/Makefile	/^EXAMPLES_OBJ= $(EXAMPLES_SRC:%.c=$(OBJDIR)\/%.o)$/;"	m
EXAMPLES_SRC	external/splinterdb/Makefile	/^EXAMPLES_SRC := $(call rwildcard, $(EXAMPLES_DIR), *.c)$/;"	m
EXT_CODE_BYTES	other_filters/taf/src/ext.h	13;"	d
EXT_CODE_BYTES	src/taf.cc	37;"	d	file:
EXT_CODE_LEN	other_filters/taf/src/ext.h	12;"	d
EXT_CODE_LEN	src/taf.cc	36;"	d	file:
ExAF	other_filters/taf/src/exaf.h	/^} ExAF;$/;"	t	typeref:struct:exaf_t
ExAFBlock	other_filters/taf/src/exaf.h	/^} ExAFBlock;$/;"	t	typeref:struct:exaf_block_t
Ext	other_filters/taf/src/ext.h	/^} Ext;$/;"	t	typeref:struct:ext_t
Ext	src/taf.cc	/^} Ext;$/;"	t	typeref:struct:ext_t	file:
FALSE	external/splinterdb/include/splinterdb/platform_linux/public_platform.h	62;"	d
FAST_UNIT_TESTOBJS	external/splinterdb/Makefile	/^FAST_UNIT_TESTOBJS := $(FAST_UNIT_TESTSRC:%.c=$(OBJDIR)\/%.o)$/;"	m
FAST_UNIT_TESTSRC	external/splinterdb/Makefile	/^FAST_UNIT_TESTSRC := $(sort $(filter-out $(SLOW_UNIT_TESTSRC_FILTER), $(ALL_UNIT_TESTSRC)))$/;"	m
FLEXIBLE_STRUCT_SIZE	external/splinterdb/src/platform_linux/platform.h	397;"	d
FORCE_INLINE	other_filters/taf/src/murmur3.c	18;"	d	file:
FORCE_INLINE	other_filters/taf/src/murmur3.c	20;"	d	file:
FORCE_INLINE	src/taf.cc	329;"	d	file:
FORCE_INLINE	src/taf.cc	331;"	d	file:
FPR_SAMPLE_SIZE	other_filters/acf/benchmarks/conext-table3.cc	/^const size_t FPR_SAMPLE_SIZE = 1000 * 1000;$/;"	v
FPR_SAMPLE_SIZE	other_filters/cf/benchmarks/conext-table3.cc	/^const size_t FPR_SAMPLE_SIZE = 1000 * 1000;$/;"	v
FRACTION_ARGS	external/splinterdb/src/platform_linux/platform_types.h	72;"	d
FRACTION_FMT	external/splinterdb/src/platform_linux/platform_types.h	71;"	d
FUNCTIONAL_TESTOBJ	external/splinterdb/Makefile	/^FUNCTIONAL_TESTOBJ= $(FUNCTIONAL_TESTSRC:%.c=$(OBJDIR)\/%.o)$/;"	m
FUNCTIONAL_TESTSDIR	external/splinterdb/Makefile	/^FUNCTIONAL_TESTSDIR  = $(TESTS_DIR)\/functional$/;"	m
FUNCTIONAL_TESTSRC	external/splinterdb/Makefile	/^FUNCTIONAL_TESTSRC := $(call rwildcard, $(FUNCTIONAL_TESTSDIR), *.c)$/;"	m
Filter	external/splinterdb/scripts/list_test.py	/^class Filter(ABC):$/;"	c
FilterAPI	other_filters/acf/benchmarks/bulk-insert-and-query.cc	/^struct FilterAPI {};$/;"	s	file:
FilterAPI	other_filters/acf/benchmarks/bulk-insert-and-query.cc	/^struct FilterAPI<CuckooFilter<ItemType, bits_per_item, TableType>> {$/;"	s	file:
FilterAPI	other_filters/acf/benchmarks/bulk-insert-and-query.cc	/^struct FilterAPI<SimdBlockFilter<>> {$/;"	s	file:
FilterAPI	other_filters/cf/benchmarks/bulk-insert-and-query.cc	/^struct FilterAPI {};$/;"	s	file:
FilterAPI	other_filters/cf/benchmarks/bulk-insert-and-query.cc	/^struct FilterAPI<CuckooFilter<ItemType, bits_per_item, TableType>> {$/;"	s	file:
FilterAPI	other_filters/cf/benchmarks/bulk-insert-and-query.cc	/^struct FilterAPI<SimdBlockFilter<>> {$/;"	s	file:
FilterBenchmark	other_filters/acf/benchmarks/bulk-insert-and-query.cc	/^Statistics FilterBenchmark($/;"	f
FilterBenchmark	other_filters/cf/benchmarks/bulk-insert-and-query.cc	/^Statistics FilterBenchmark($/;"	f
FindTagInBucket	other_filters/acf/src/mirroredtable.h	/^		inline bool FindTagInBucket(const size_t i, const uint64_t tag) const {$/;"	f	class:cuckoofilter::MirroredTable
FindTagInBucket	other_filters/acf/src/packedtable.h	/^  bool FindTagInBucket(const size_t i, const uint32_t tag) const {$/;"	f	class:cuckoofilter::PackedTable
FindTagInBucket	other_filters/acf/src/singletable.h	/^  inline bool FindTagInBucket(const size_t i, const uint32_t tag) const {$/;"	f	class:cuckoofilter::SingleTable
FindTagInBucket	other_filters/acfsim/src/mirroredtable.h	/^		inline bool FindTagInBucket(const size_t i, const uint64_t tag) const {$/;"	f	class:cuckoofilter::MirroredTable
FindTagInBucket	other_filters/acfsim/src/packedtable.h	/^  bool FindTagInBucket(const size_t i, const uint32_t tag) const {$/;"	f	class:cuckoofilter::PackedTable
FindTagInBucket	other_filters/acfsim/src/singletable.h	/^  inline bool FindTagInBucket(const size_t i, const uint32_t tag) const {$/;"	f	class:cuckoofilter::SingleTable
FindTagInBucket	other_filters/cf/src/packedtable.h	/^  bool FindTagInBucket(const size_t i, const uint32_t tag) const {$/;"	f	class:cuckoofilter::PackedTable
FindTagInBucket	other_filters/cf/src/singletable.h	/^  inline bool FindTagInBucket(const size_t i, const uint32_t tag) const {$/;"	f	class:cuckoofilter::SingleTable
FindTagInBuckets	other_filters/acf/src/mirroredtable.h	/^		inline int FindTagInBuckets(const size_t i1, const size_t i2,$/;"	f	class:cuckoofilter::MirroredTable
FindTagInBuckets	other_filters/acf/src/packedtable.h	/^  bool FindTagInBuckets(const size_t i1, const size_t i2,$/;"	f	class:cuckoofilter::PackedTable
FindTagInBuckets	other_filters/acf/src/singletable.h	/^  inline bool FindTagInBuckets(const size_t i1, const size_t i2,$/;"	f	class:cuckoofilter::SingleTable
FindTagInBuckets	other_filters/acfsim/src/mirroredtable.h	/^		inline int FindTagInBuckets(const size_t i1, const size_t i2,$/;"	f	class:cuckoofilter::MirroredTable
FindTagInBuckets	other_filters/acfsim/src/packedtable.h	/^  bool FindTagInBuckets(const size_t i1, const size_t i2,$/;"	f	class:cuckoofilter::PackedTable
FindTagInBuckets	other_filters/acfsim/src/singletable.h	/^  inline bool FindTagInBuckets(const size_t i1, const size_t i2,$/;"	f	class:cuckoofilter::SingleTable
FindTagInBuckets	other_filters/cf/src/packedtable.h	/^  bool FindTagInBuckets(const size_t i1, const size_t i2,$/;"	f	class:cuckoofilter::PackedTable
FindTagInBuckets	other_filters/cf/src/singletable.h	/^  inline bool FindTagInBuckets(const size_t i1, const size_t i2,$/;"	f	class:cuckoofilter::SingleTable
FindTagLocationInBucket	other_filters/acf/src/mirroredtable.h	/^		inline int FindTagLocationInBucket(const size_t i, const uint64_t tag) const {$/;"	f	class:cuckoofilter::MirroredTable
FindTagLocationInBucket	other_filters/acfsim/src/mirroredtable.h	/^		inline int FindTagLocationInBucket(const size_t i, const uint64_t tag) const {$/;"	f	class:cuckoofilter::MirroredTable
FullTAF	other_filters/taf/src/utaf.h	/^} FullTAF;$/;"	t	typeref:struct:utaf_t
FullTAFBlock	other_filters/taf/src/utaf.h	/^} FullTAFBlock;$/;"	t	typeref:struct:utaf_block_t
FullTAF_SEED	other_filters/taf/src/utaf.c	558;"	d	file:
GENERATOR_MIN_PAYLOAD_SIZE	external/splinterdb/tests/functional/test.h	148;"	d
GET	other_filters/taf/src/macros.h	33;"	d
GET	src/taf.cc	239;"	d	file:
GET_KEY_HASH	other_filters/cqf/src/gqf.c	43;"	d	file:
GET_KEY_HASH	src/gqf.c	37;"	d	file:
GET_KEY_HASH	src/gqf_backup.c	34;"	d	file:
GET_NO_LOCK	other_filters/cqf/src/gqf.c	40;"	d	file:
GET_NO_LOCK	src/gqf.c	34;"	d	file:
GET_NO_LOCK	src/gqf_backup.c	31;"	d	file:
GET_RC_CONFLICT	external/splinterdb/src/clockcache.c	/^   GET_RC_CONFLICT,$/;"	e	enum:__anon13	file:
GET_RC_EVICTED	external/splinterdb/src/clockcache.c	/^   GET_RC_EVICTED,$/;"	e	enum:__anon13	file:
GET_RC_FLUSHING	external/splinterdb/src/clockcache.c	/^   GET_RC_FLUSHING,$/;"	e	enum:__anon13	file:
GET_RC_SUCCESS	external/splinterdb/src/clockcache.c	/^   GET_RC_SUCCESS = 0,$/;"	e	enum:__anon13	file:
GET_TRY_ONCE_LOCK	other_filters/cqf/src/gqf.c	41;"	d	file:
GET_TRY_ONCE_LOCK	src/gqf.c	35;"	d	file:
GET_TRY_ONCE_LOCK	src/gqf_backup.c	32;"	d	file:
GET_WAIT_FOR_LOCK	other_filters/cqf/src/gqf.c	42;"	d	file:
GET_WAIT_FOR_LOCK	src/gqf.c	36;"	d	file:
GET_WAIT_FOR_LOCK	src/gqf_backup.c	33;"	d	file:
GIB	external/splinterdb/scripts/run_ycsb.py	/^GIB = 1024 * 1024 * 1024$/;"	v
GIT_VERSION	external/splinterdb/Makefile	/^GIT_VERSION := "$(shell git describe --abbrev=8 --dirty --always --tags)"$/;"	m
GQF_WRAPPER_H	include/gqf_wrapper.h	2;"	d
GQF_WRAPPER_H	other_filters/cqf/include/gqf_wrapper.h	11;"	d
GenerateAltIndexHash	other_filters/acf/src/cuckoofilter.h	/^				 inline size_t GenerateAltIndexHash(const ItemType item, const uint64_t first_index) const {$/;"	f	class:cuckoofilter::CuckooFilter
GenerateAltIndexHash	other_filters/acfsim/src/cuckoofilter.h	/^				 inline size_t GenerateAltIndexHash(const ItemType item, const uint64_t first_index) const {$/;"	f	class:cuckoofilter::CuckooFilter
GenerateIndexHash	other_filters/acf/src/cuckoofilter.h	/^				 inline size_t GenerateIndexHash(const ItemType item) const {$/;"	f	class:cuckoofilter::CuckooFilter
GenerateIndexHash	other_filters/acfsim/src/cuckoofilter.h	/^				 inline size_t GenerateIndexHash(const ItemType item) const {$/;"	f	class:cuckoofilter::CuckooFilter
GenerateIndexTagHash	other_filters/cf/src/cuckoofilter.h	/^  inline void GenerateIndexTagHash(const ItemType& item, size_t* index,$/;"	f	class:cuckoofilter::CuckooFilter
GenerateRandom64	other_filters/acf/benchmarks/random.h	/^::std::vector<::std::uint64_t> GenerateRandom64(::std::size_t count) {$/;"	f
GenerateRandom64	other_filters/cf/benchmarks/random.h	/^::std::vector<::std::uint64_t> GenerateRandom64(::std::size_t count) {$/;"	f
GenerateTagHash	other_filters/acf/src/cuckoofilter.h	/^				 inline uint64_t GenerateTagHash(const ItemType item, const size_t index) const {$/;"	f	class:cuckoofilter::CuckooFilter
GenerateTagHash	other_filters/acfsim/src/cuckoofilter.h	/^				 inline uint64_t GenerateTagHash(const ItemType item, const size_t index) const {$/;"	f	class:cuckoofilter::CuckooFilter
GetKeys	other_filters/acf/src/mirroredtable.h	/^		inline void GetKeys(const size_t i, uint64_t *ret_keys) {$/;"	f	class:cuckoofilter::MirroredTable
GetKeys	other_filters/acfsim/src/mirroredtable.h	/^		inline void GetKeys(const size_t i, uint64_t *ret_keys) {$/;"	f	class:cuckoofilter::MirroredTable
GiB	external/splinterdb/src/platform_linux/platform.h	94;"	d
GiB_TO_B	external/splinterdb/src/platform_linux/platform.h	100;"	d
Giga	external/splinterdb/tests/unit/unit_tests.h	16;"	d
Giga	include/splinter_util.h	19;"	d
Giga	other_filters/acf/example/test_acf_ops.cc	20;"	d	file:
Giga	other_filters/acf/example/test_ext_throughput.cc	15;"	d	file:
Giga	other_filters/acf/example/test_splinter_adversarial.cc	22;"	d	file:
Giga	other_filters/acf/example/test_splinter_inc_throughput.cc	20;"	d	file:
Giga	other_filters/acf/example/test_splinter_ops.cc	23;"	d	file:
Giga	other_filters/acf/example/test_splinter_throughput.cc	22;"	d	file:
Giga	other_filters/acf/example/test_splinter_zipfian_histogram.cc	21;"	d	file:
Giga	other_filters/acfsim/example/test_acf_ops.cc	20;"	d	file:
Giga	other_filters/acfsim/example/test_ext_throughput.cc	15;"	d	file:
Giga	other_filters/acfsim/example/test_splinter_adversarial.cc	22;"	d	file:
Giga	other_filters/acfsim/example/test_splinter_inc_throughput.cc	20;"	d	file:
Giga	other_filters/acfsim/example/test_splinter_ops.cc	23;"	d	file:
Giga	other_filters/acfsim/example/test_splinter_throughput.cc	22;"	d	file:
Giga	other_filters/acfsim/example/test_splinter_zipfian_histogram.cc	21;"	d	file:
Giga	other_filters/cf/example/test_splinter_adversarial.cc	23;"	d	file:
Giga	other_filters/cf/example/test_splinter_ops.cc	23;"	d	file:
Giga	other_filters/cf/example/test_splinter_throughput.cc	22;"	d	file:
Giga	other_filters/cf/example/test_splinter_zipfian_histogram.cc	22;"	d	file:
Giga	other_filters/cqf/src/test_splinter_adversarial.c	36;"	d	file:
Giga	other_filters/cqf/src/test_splinter_ops.c	36;"	d	file:
Giga	other_filters/cqf/src/test_splinter_throughput.c	35;"	d	file:
Giga	other_filters/cqf/src/test_splinter_zipfian_histogram.c	34;"	d	file:
Giga	other_filters/taf/src/splinter_taf.c	31;"	d	file:
Giga	src/test_splinter_adversarial.c	26;"	d	file:
Giga	src/test_splinter_inserts.c	27;"	d	file:
Giga	src/test_splinter_inserts_2.c	27;"	d	file:
Giga	src/test_splinter_ops.c	27;"	d	file:
Giga	src/test_splinter_replace_lltable_throughput.c	28;"	d	file:
Giga	src/test_splinter_throughput.c	26;"	d	file:
Giga	src/test_splinter_zipfian_histogram.c	25;"	d	file:
HASH_LITTLE_ENDIAN	other_filters/acf/src/hashutil.cc	26;"	d	file:
HASH_LITTLE_ENDIAN	other_filters/acfsim/src/hashutil.cc	26;"	d	file:
HASH_LITTLE_ENDIAN	other_filters/cf/src/hashutil.cc	26;"	d	file:
HASH_SEED	external/splinterdb/src/platform_linux/platform.h	76;"	d
HASH_SEED	src/hash_table.c	47;"	d	file:
HASH_SET_H	other_filters/taf/src/set.h	2;"	d
HASH_SET_H	src/taf.cc	1188;"	d	file:
HASH_SET_SEED	other_filters/acf/example/test.cc	85;"	d	file:
HASH_SET_SEED	other_filters/acf/example/test_fill_varied_throughput.cc	85;"	d	file:
HASH_SET_SEED	other_filters/acf/example/test_fp.cc	84;"	d	file:
HASH_SET_SEED	other_filters/acf/example/test_micro.cc	82;"	d	file:
HASH_SET_SEED	other_filters/acf/src/cuckoofilter.h	61;"	d
HASH_SET_SEED	other_filters/acfsim/example/test.cc	85;"	d	file:
HASH_SET_SEED	other_filters/acfsim/example/test_fill_varied_throughput.cc	85;"	d	file:
HASH_SET_SEED	other_filters/acfsim/example/test_fp.cc	84;"	d	file:
HASH_SET_SEED	other_filters/acfsim/example/test_micro.cc	82;"	d	file:
HASH_SET_SEED	other_filters/acfsim/src/cuckoofilter.h	61;"	d
HASH_SET_SEED	other_filters/cf/example/test.cc	14;"	d	file:
HASH_SET_SEED	other_filters/cf/example/test_micro_throughput.cc	91;"	d	file:
HASH_SET_SEED	other_filters/cqf/src/test_micro_super.c	67;"	d	file:
HASH_SET_SEED	other_filters/cqf/src/test_micro_throughput.c	67;"	d	file:
HASH_SET_SEED	other_filters/cqf/src/test_parallel.c	70;"	d	file:
HASH_SET_SEED	other_filters/taf/src/set.h	8;"	d
HASH_SET_SEED	src/taf.cc	1194;"	d	file:
HASH_SET_SEED	src/test_ext_inc_throughput.cc	76;"	d	file:
HASH_SET_SEED	src/test_ext_throughput.cc	76;"	d	file:
HASH_SET_SEED	src/test_lltable_throughput.c	53;"	d	file:
HASH_SET_SEED	src/test_micro_throughput.c	39;"	d	file:
HASH_SET_SEED	src/test_micro_write.c	54;"	d	file:
HASH_SET_SEED	src/test_progress.c	18;"	d	file:
HASH_SET_SEED	src/test_unit.c	178;"	d	file:
HASH_SET_SEED	src/test_unit_old.c	330;"	d	file:
HASH_TABLE_SIZE	src/test_bulk.c	70;"	d	file:
HASH_TABLE_SIZE	src/test_deletions.c	67;"	d	file:
HASH_TABLE_SIZE	src/test_fill_varied_throughput.c	70;"	d	file:
HASH_TABLE_SIZE	src/test_hash_accesses.c	66;"	d	file:
HASH_TABLE_SIZE	src/test_merge.c	55;"	d	file:
HASH_TABLE_SIZE	src/test_near_full.c	66;"	d	file:
HASH_TABLE_SIZE	src/test_throughput_old.c	70;"	d	file:
HASH_TABLE_SIZE	src/test_unit_old.c	57;"	d	file:
HASH_TABLE_SIZE	src/test_whitelist.c	71;"	d	file:
HEADERS	other_filters/acf/Makefile	/^HEADERS = $(wildcard src\/*.h)$/;"	m
HEADERS	other_filters/acf/benchmarks/Makefile	/^HEADERS = $(wildcard ..\/src\/*.h) *.h$/;"	m
HEADERS	other_filters/acfsim/Makefile	/^HEADERS = $(wildcard src\/*.h)$/;"	m
HEADERS	other_filters/cf/Makefile	/^HEADERS = $(wildcard src\/*.h)$/;"	m
HEADERS	other_filters/cf/benchmarks/Makefile	/^HEADERS = $(wildcard ..\/src\/*.h) *.h$/;"	m
HEAP_SIZE_MB	external/splinterdb/tests/functional/io_apis_test.c	79;"	d	file:
HIGH	other_filters/taf/src/arcd.c	11;"	d	file:
HIGH	src/taf.cc	629;"	d	file:
HOP	external/splinterdb/tests/functional/cache_test.c	/^   enum { MONO, RAND, HOP } type;$/;"	e	enum:__anon47::__anon48	file:
H_Ns	other_filters/cqf/src/zipf.c	/^    double H_Ns;                 \/\/ H_{N,s}.$/;"	m	struct:zipfian	file:
H_Ns	src/zipf.c	/^    double H_Ns;                 \/\/ H_{N,s}.$/;"	m	struct:zipfian	file:
HashFunctor	other_filters/cf/example/test_ext_throughput.cc	/^struct HashFunctor {$/;"	s	file:
HashFunctor	other_filters/cqf/src/test_adversarial.cc	/^struct HashFunctor$/;"	s	file:
HashFunctor	other_filters/cqf/src/test_ext_throughput.cc	/^struct HashFunctor$/;"	s	file:
HashFunctor	src/taf.cc	/^struct HashFunctor {$/;"	s	file:
HashFunctor	src/test_ext_churn.cc	/^struct HashFunctor$/;"	s	file:
HashFunctor	src/test_ext_inc_throughput.cc	/^struct HashFunctor$/;"	s	file:
HashFunctor	src/test_ext_throughput.cc	/^struct HashFunctor$/;"	s	file:
HashFunctor	src/test_zipf_throughput.cc	/^struct HashFunctor$/;"	s	file:
HashUtil	other_filters/acf/src/hashutil.h	/^class HashUtil {$/;"	c	namespace:cuckoofilter
HashUtil	other_filters/acfsim/src/hashutil.h	/^class HashUtil {$/;"	c	namespace:cuckoofilter
HashUtil	other_filters/cf/src/hashutil.h	/^class HashUtil {$/;"	c	namespace:cuckoofilter
Heap_id	external/splinterdb/src/platform_linux/platform.c	/^platform_heap_id Heap_id = NULL;$/;"	v
ILIST_COMPARATOR	src/test_bulk.c	83;"	d	file:
ILIST_COMPARATOR	src/test_deletions.c	79;"	d	file:
ILIST_COMPARATOR	src/test_fill_varied_throughput.c	83;"	d	file:
ILIST_COMPARATOR	src/test_hash_accesses.c	78;"	d	file:
ILIST_COMPARATOR	src/test_merge.c	68;"	d	file:
ILIST_COMPARATOR	src/test_near_full.c	78;"	d	file:
ILIST_COMPARATOR	src/test_throughput_old.c	83;"	d	file:
ILIST_COMPARATOR	src/test_unit_old.c	69;"	d	file:
ILIST_COMPARATOR	src/test_whitelist.c	83;"	d	file:
IMPLIES	external/splinterdb/src/util.h	15;"	d
IMPLIES	external/splinterdb/src/util.h	17;"	d
INCDIR	external/splinterdb/Makefile	/^INCDIR               = include$/;"	m
INCLUDE	external/splinterdb/Makefile	/^INCLUDE = -I $(INCDIR) -I $(SRCDIR) -I $(SRCDIR)\/platform_$(PLATFORM) -I $(TESTS_DIR)$/;"	m
INCLUDE_SLOW_TESTS	external/splinterdb/Makefile	/^	INCLUDE_SLOW_TESTS=true BINDIR=$(BINDIR) .\/test.sh 2>&1 | tee .\/test-results$/;"	m
INC_BY	other_filters/cqf/src/test_partitioned_counter.c	28;"	d	file:
INC_BY	src/test_partitioned_counter.c	19;"	d	file:
INC_TO	other_filters/cqf/src/test_partitioned_counter.c	26;"	d	file:
INC_TO	src/test_partitioned_counter.c	17;"	d	file:
INSTALL_PATH	external/splinterdb/Makefile	/^INSTALL_PATH ?= \/usr\/local$/;"	m
INVALID_ALLOCATOR_ROOT_ID	external/splinterdb/src/allocator.h	17;"	d
INVALID_GENERATION	external/splinterdb/src/shard_log.c	152;"	d	file:
INVALID_SLICE	external/splinterdb/include/splinterdb/public_util.h	28;"	d
INVALID_TID	external/splinterdb/src/platform_linux/platform.h	74;"	d
IP4ADDR_MAX_KEY	external/splinterdb/examples/splinterdb_custom_ipv4_addr_sortcmp_example.c	92;"	d	file:
IP4ADDR_MIN_KEY	external/splinterdb/examples/splinterdb_custom_ipv4_addr_sortcmp_example.c	91;"	d	file:
IP4_MAX_KEY_SIZE	external/splinterdb/examples/splinterdb_custom_ipv4_addr_sortcmp_example.c	47;"	d	file:
IP4_MIN_KEY_SIZE	external/splinterdb/examples/splinterdb_custom_ipv4_addr_sortcmp_example.c	44;"	d	file:
IPV4_MAX_KEY_BUF_SIZE	external/splinterdb/examples/splinterdb_custom_ipv4_addr_sortcmp_example.c	50;"	d	file:
IPV4_NUM_DOTS	external/splinterdb/examples/splinterdb_custom_ipv4_addr_sortcmp_example.c	42;"	d	file:
IPV4_NUM_FIELDS	external/splinterdb/examples/splinterdb_custom_ipv4_addr_sortcmp_example.c	41;"	d	file:
IS_ARRAY	external/splinterdb/src/platform_linux/platform.h	56;"	d
IS_POWER_OF_2	external/splinterdb/src/platform_linux/platform.h	565;"	d
IncrHashSel	other_filters/acf/src/cuckoofilter.h	/^				 inline void IncrHashSel(const size_t index) const {$/;"	f	class:cuckoofilter::CuckooFilter
IncrHashSel	other_filters/acfsim/src/cuckoofilter.h	/^				 inline void IncrHashSel(const size_t index) const {$/;"	f	class:cuckoofilter::CuckooFilter
IndexHash	other_filters/cf/src/cuckoofilter.h	/^  inline size_t IndexHash(uint32_t hv) const {$/;"	f	class:cuckoofilter::CuckooFilter
Info	other_filters/acf/src/cuckoofilter.h	/^		std::string CuckooFilter<ItemType, bits_per_item, TableType, HashFamily>::Info() const {$/;"	f	class:cuckoofilter::CuckooFilter
Info	other_filters/acf/src/mirroredtable.h	/^		std::string Info() const {$/;"	f	class:cuckoofilter::MirroredTable
Info	other_filters/acf/src/packedtable.h	/^  std::string Info() const {$/;"	f	class:cuckoofilter::PackedTable
Info	other_filters/acf/src/singletable.h	/^  std::string Info() const {$/;"	f	class:cuckoofilter::SingleTable
Info	other_filters/acfsim/src/cuckoofilter.h	/^		std::string CuckooFilter<ItemType, bits_per_item, TableType, HashFamily>::Info() const {$/;"	f	class:cuckoofilter::CuckooFilter
Info	other_filters/acfsim/src/mirroredtable.h	/^		std::string Info() const {$/;"	f	class:cuckoofilter::MirroredTable
Info	other_filters/acfsim/src/packedtable.h	/^  std::string Info() const {$/;"	f	class:cuckoofilter::PackedTable
Info	other_filters/acfsim/src/singletable.h	/^  std::string Info() const {$/;"	f	class:cuckoofilter::SingleTable
Info	other_filters/cf/src/cuckoofilter.h	/^std::string CuckooFilter<ItemType, bits_per_item, TableType, HashFamily>::Info() const {$/;"	f	class:cuckoofilter::CuckooFilter
Info	other_filters/cf/src/packedtable.h	/^  std::string Info() const {$/;"	f	class:cuckoofilter::PackedTable
Info	other_filters/cf/src/singletable.h	/^  std::string Info() const {$/;"	f	class:cuckoofilter::SingleTable
InsertTagToBucket	other_filters/acf/src/mirroredtable.h	/^		inline int InsertTagToBucket(const size_t i, const uint64_t tag, const uint64_t key,$/;"	f	class:cuckoofilter::MirroredTable
InsertTagToBucket	other_filters/acf/src/packedtable.h	/^  bool InsertTagToBucket(const size_t i, const uint32_t tag, const bool kickout,$/;"	f	class:cuckoofilter::PackedTable
InsertTagToBucket	other_filters/acf/src/singletable.h	/^  inline bool InsertTagToBucket(const size_t i, const uint32_t tag,$/;"	f	class:cuckoofilter::SingleTable
InsertTagToBucket	other_filters/acfsim/src/mirroredtable.h	/^		inline int InsertTagToBucket(const size_t i, const uint64_t tag, const uint64_t key,$/;"	f	class:cuckoofilter::MirroredTable
InsertTagToBucket	other_filters/acfsim/src/packedtable.h	/^  bool InsertTagToBucket(const size_t i, const uint32_t tag, const bool kickout,$/;"	f	class:cuckoofilter::PackedTable
InsertTagToBucket	other_filters/acfsim/src/singletable.h	/^  inline bool InsertTagToBucket(const size_t i, const uint32_t tag,$/;"	f	class:cuckoofilter::SingleTable
InsertTagToBucket	other_filters/cf/src/packedtable.h	/^  bool InsertTagToBucket(const size_t i, const uint32_t tag, const bool kickout,$/;"	f	class:cuckoofilter::PackedTable
InsertTagToBucket	other_filters/cf/src/singletable.h	/^  inline bool InsertTagToBucket(const size_t i, const uint32_t tag,$/;"	f	class:cuckoofilter::SingleTable
InsertTagToBucketWithSpecificKickout	other_filters/acfsim/src/mirroredtable.h	/^		inline int InsertTagToBucketWithSpecificKickout(const size_t i, const uint64_t tag, const uint64_t key,$/;"	f	class:cuckoofilter::MirroredTable
KEYCMP_RV_KEY1_EQ_KEY2	external/splinterdb/examples/splinterdb_custom_ipv4_addr_sortcmp_example.c	233;"	d	file:
KEYCMP_RV_KEY1_GT_KEY2	external/splinterdb/examples/splinterdb_custom_ipv4_addr_sortcmp_example.c	234;"	d	file:
KEYCMP_RV_KEY1_LT_KEY2	external/splinterdb/examples/splinterdb_custom_ipv4_addr_sortcmp_example.c	232;"	d	file:
KEY_CREATE_LOCAL_COPY	external/splinterdb/src/data_internal.h	217;"	d
KEY_FMT_LENGTH	external/splinterdb/tests/unit/splinterdb_quick_test.c	50;"	d	file:
KEY_SIZE	external/splinterdb/scripts/run_ycsb.py	/^KEY_SIZE = ARGS.key_size$/;"	v
KEY_SIZE	external/splinterdb/tests/unit/splinterdb_stress_test.c	150;"	d	file:
KiB	external/splinterdb/src/platform_linux/platform.h	92;"	d
KiB_TO_B	external/splinterdb/src/platform_linux/platform.h	98;"	d
Kilo	external/splinterdb/tests/unit/unit_tests.h	14;"	d
Kilo	include/splinter_util.h	17;"	d
Kilo	other_filters/acf/example/test_acf_ops.cc	18;"	d	file:
Kilo	other_filters/acf/example/test_ext_throughput.cc	13;"	d	file:
Kilo	other_filters/acf/example/test_splinter_adversarial.cc	20;"	d	file:
Kilo	other_filters/acf/example/test_splinter_inc_throughput.cc	18;"	d	file:
Kilo	other_filters/acf/example/test_splinter_ops.cc	21;"	d	file:
Kilo	other_filters/acf/example/test_splinter_throughput.cc	20;"	d	file:
Kilo	other_filters/acf/example/test_splinter_zipfian_histogram.cc	19;"	d	file:
Kilo	other_filters/acfsim/example/test_acf_ops.cc	18;"	d	file:
Kilo	other_filters/acfsim/example/test_ext_throughput.cc	13;"	d	file:
Kilo	other_filters/acfsim/example/test_splinter_adversarial.cc	20;"	d	file:
Kilo	other_filters/acfsim/example/test_splinter_inc_throughput.cc	18;"	d	file:
Kilo	other_filters/acfsim/example/test_splinter_ops.cc	21;"	d	file:
Kilo	other_filters/acfsim/example/test_splinter_throughput.cc	20;"	d	file:
Kilo	other_filters/acfsim/example/test_splinter_zipfian_histogram.cc	19;"	d	file:
Kilo	other_filters/cf/example/test_splinter_adversarial.cc	21;"	d	file:
Kilo	other_filters/cf/example/test_splinter_ops.cc	21;"	d	file:
Kilo	other_filters/cf/example/test_splinter_throughput.cc	20;"	d	file:
Kilo	other_filters/cf/example/test_splinter_zipfian_histogram.cc	20;"	d	file:
Kilo	other_filters/cqf/src/test_splinter_adversarial.c	34;"	d	file:
Kilo	other_filters/cqf/src/test_splinter_ops.c	34;"	d	file:
Kilo	other_filters/cqf/src/test_splinter_throughput.c	33;"	d	file:
Kilo	other_filters/cqf/src/test_splinter_zipfian_histogram.c	32;"	d	file:
Kilo	other_filters/taf/src/splinter_taf.c	29;"	d	file:
Kilo	src/test_splinter_adversarial.c	24;"	d	file:
Kilo	src/test_splinter_inserts.c	25;"	d	file:
Kilo	src/test_splinter_inserts_2.c	25;"	d	file:
Kilo	src/test_splinter_ops.c	25;"	d	file:
Kilo	src/test_splinter_replace_lltable_throughput.c	26;"	d	file:
Kilo	src/test_splinter_throughput.c	24;"	d	file:
Kilo	src/test_splinter_zipfian_histogram.c	23;"	d	file:
LAIO_DEFAULT_EXTENT_SIZE	external/splinterdb/src/platform_linux/laio.h	25;"	d
LAIO_DEFAULT_PAGES_PER_EXTENT	external/splinterdb/src/platform_linux/laio.h	24;"	d
LAIO_DEFAULT_PAGE_SIZE	external/splinterdb/src/platform_linux/laio.h	23;"	d
LAIO_HAND_BATCH_SIZE	external/splinterdb/src/platform_linux/laio.c	30;"	d	file:
LAIO_MAX_PAGE_SIZE	external/splinterdb/src/platform_linux/laio.h	21;"	d
LAIO_MIN_PAGE_SIZE	external/splinterdb/src/platform_linux/laio.h	20;"	d
LATENCYHISTO_SIZE	external/splinterdb/src/trunk.c	24;"	d	file:
LATENCY_EXPONENT_LIMIT	external/splinterdb/tests/functional/ycsb_test.c	21;"	d	file:
LATENCY_MANTISSA_BITS	external/splinterdb/tests/functional/ycsb_test.c	20;"	d	file:
LATENCY_MANTISSA_LIMIT	external/splinterdb/tests/functional/ycsb_test.c	22;"	d	file:
LD	Makefile	/^LD= gcc -std=gnu11$/;"	m
LD	other_filters/cqf/Makefile	/^LD= gcc -std=gnu11$/;"	m
LD	other_filters/taf/Makefile	/^LD= gcc -std=gnu11$/;"	m
LDFLAGS	Makefile	/^LDFLAGS = $(DEBUG) $(PROFILE) $(OPT) -lpthread -lssl -lcrypto -lm -L$(SPLINTERPATH) -lsplinterdb -Wl,-rpath=$(SPLINTERPATH)$/;"	m
LDFLAGS	other_filters/cqf/Makefile	/^LDFLAGS = $(DEBUG) $(PROFILE) $(OPT) -lpthread -lssl -lcrypto -lm -L$(SPLINTERPATH) -lsplinterdb -Wl,-rpath=$(SPLINTERPATH)$/;"	m
LDFLAGS	other_filters/taf/Makefile	/^LDFLAGS = $(DEBUG) $(PROFILE) $(OPT) -lpthread -lssl -lcrypto -lm$/;"	m
LIBDIR	external/splinterdb/Makefile	/^LIBDIR = $(BUILD_PATH)\/lib$/;"	m
LIBOBJECTS	other_filters/acf/Makefile	/^LIBOBJECTS = \\$/;"	m
LIBOBJECTS	other_filters/acfsim/Makefile	/^LIBOBJECTS = \\$/;"	m
LIBOBJECTS	other_filters/cf/Makefile	/^LIBOBJECTS = \\$/;"	m
LIBS	external/splinterdb/Makefile	/^LIBS      = -lm -lpthread -laio -lxxhash$/;"	m
LIKELY	external/splinterdb/src/platform_linux/platform_types.h	52;"	d
LOC_INCLUDE	Makefile	/^LOC_INCLUDE=include$/;"	m
LOC_INCLUDE	other_filters/cqf/Makefile	/^LOC_INCLUDE=include$/;"	m
LOC_INCLUDE	other_filters/taf/Makefile	/^LOC_INCLUDE=src$/;"	m
LOC_SRC	Makefile	/^LOC_SRC=src$/;"	m
LOC_SRC	other_filters/cqf/Makefile	/^LOC_SRC=src$/;"	m
LOC_SRC	other_filters/taf/Makefile	/^LOC_SRC=src$/;"	m
LOC_TEST	Makefile	/^LOC_TEST=test$/;"	m
LOC_TEST	other_filters/cqf/Makefile	/^LOC_TEST=test$/;"	m
LOC_TEST	other_filters/taf/Makefile	/^LOC_TEST=src$/;"	m
LOG_BUCKET_BYTE_SIZE	other_filters/acf/src/simd-block.h	/^  static constexpr int LOG_BUCKET_BYTE_SIZE = 5;$/;"	m	class:SimdBlockFilter
LOG_BUCKET_BYTE_SIZE	other_filters/acfsim/src/simd-block.h	/^  static constexpr int LOG_BUCKET_BYTE_SIZE = 5;$/;"	m	class:SimdBlockFilter
LOG_BUCKET_BYTE_SIZE	other_filters/cf/src/simd-block.h	/^  static constexpr int LOG_BUCKET_BYTE_SIZE = 5;$/;"	m	class:SimdBlockFilter
List	external/splinterdb/scripts/list_test.py	/^from typing import List, Tuple, Dict$/;"	i
ListAllFilter	external/splinterdb/scripts/list_test.py	/^class ListAllFilter(Filter):$/;"	c
List_Links	external/splinterdb/src/platform_linux/platform_types.h	/^typedef void *List_Links;$/;"	t
LoadFactor	other_filters/acf/src/cuckoofilter.h	/^				 double LoadFactor() const { return 1.0 * Size() \/ table_->SizeInTags(); }$/;"	f	class:cuckoofilter::CuckooFilter
LoadFactor	other_filters/acfsim/src/cuckoofilter.h	/^				 double LoadFactor() const { return 1.0 * Size() \/ table_->SizeInTags(); }$/;"	f	class:cuckoofilter::CuckooFilter
LoadFactor	other_filters/cf/src/cuckoofilter.h	/^  double LoadFactor() const { return 1.0 * Size() \/ table_->SizeInTags(); }$/;"	f	class:cuckoofilter::CuckooFilter
MACROS_H	other_filters/taf/src/macros.h	5;"	d
MACROS_H	src/taf.cc	211;"	d	file:
MADVISE_GRANULARITY	other_filters/cqf/src/gqf_file.c	351;"	d	file:
MADVISE_GRANULARITY	src/gqf_file.c	342;"	d	file:
MAGIC_NUMBER	include/gqf_int.h	14;"	d
MAGIC_NUMBER	other_filters/cqf/include/gqf_int.h	23;"	d
MASK_CLOSED	other_filters/taf/src/macros.h	18;"	d
MASK_CLOSED	src/taf.cc	224;"	d	file:
MASK_HALF_OPEN	other_filters/taf/src/macros.h	21;"	d
MASK_HALF_OPEN	src/taf.cc	227;"	d	file:
MATRIX_COLS	external/splinterdb/src/routing_filter.c	48;"	d	file:
MATRIX_ROWS	external/splinterdb/src/routing_filter.c	47;"	d	file:
MAX	external/splinterdb/src/platform_linux/platform.h	568;"	d
MAX_FILTERS	external/splinterdb/src/routing_filter.h	25;"	d
MAX_INLINE_KEY_SIZE	external/splinterdb/src/btree.h	54;"	d
MAX_INLINE_MESSAGE_SIZE	external/splinterdb/src/btree.h	60;"	d
MAX_KEY_SIZE	include/splinter_util.h	21;"	d
MAX_KEY_SIZE	other_filters/acf/example/test_acf_ops.cc	24;"	d	file:
MAX_KEY_SIZE	other_filters/acf/example/test_ext_throughput.cc	19;"	d	file:
MAX_KEY_SIZE	other_filters/acf/example/test_splinter_adversarial.cc	26;"	d	file:
MAX_KEY_SIZE	other_filters/acf/example/test_splinter_inc_throughput.cc	24;"	d	file:
MAX_KEY_SIZE	other_filters/acf/example/test_splinter_ops.cc	26;"	d	file:
MAX_KEY_SIZE	other_filters/acf/example/test_splinter_throughput.cc	26;"	d	file:
MAX_KEY_SIZE	other_filters/acf/example/test_splinter_zipfian_histogram.cc	25;"	d	file:
MAX_KEY_SIZE	other_filters/acfsim/example/test_acf_ops.cc	24;"	d	file:
MAX_KEY_SIZE	other_filters/acfsim/example/test_ext_throughput.cc	19;"	d	file:
MAX_KEY_SIZE	other_filters/acfsim/example/test_splinter_adversarial.cc	26;"	d	file:
MAX_KEY_SIZE	other_filters/acfsim/example/test_splinter_inc_throughput.cc	24;"	d	file:
MAX_KEY_SIZE	other_filters/acfsim/example/test_splinter_ops.cc	26;"	d	file:
MAX_KEY_SIZE	other_filters/acfsim/example/test_splinter_throughput.cc	26;"	d	file:
MAX_KEY_SIZE	other_filters/acfsim/example/test_splinter_zipfian_histogram.cc	25;"	d	file:
MAX_KEY_SIZE	other_filters/cf/example/test_splinter_adversarial.cc	27;"	d	file:
MAX_KEY_SIZE	other_filters/cf/example/test_splinter_ops.cc	26;"	d	file:
MAX_KEY_SIZE	other_filters/cf/example/test_splinter_throughput.cc	26;"	d	file:
MAX_KEY_SIZE	other_filters/cf/example/test_splinter_zipfian_histogram.cc	26;"	d	file:
MAX_KEY_SIZE	other_filters/cqf/src/test_splinter_adversarial.c	40;"	d	file:
MAX_KEY_SIZE	other_filters/cqf/src/test_splinter_ops.c	39;"	d	file:
MAX_KEY_SIZE	other_filters/cqf/src/test_splinter_throughput.c	39;"	d	file:
MAX_KEY_SIZE	other_filters/cqf/src/test_splinter_zipfian_histogram.c	38;"	d	file:
MAX_KEY_SIZE	other_filters/taf/src/splinter_taf.c	33;"	d	file:
MAX_KEY_SIZE	src/test_splinter_adversarial.c	30;"	d	file:
MAX_KEY_SIZE	src/test_splinter_inserts.c	30;"	d	file:
MAX_KEY_SIZE	src/test_splinter_inserts_2.c	30;"	d	file:
MAX_KEY_SIZE	src/test_splinter_ops.c	30;"	d	file:
MAX_KEY_SIZE	src/test_splinter_replace_lltable_throughput.c	32;"	d	file:
MAX_KEY_SIZE	src/test_splinter_throughput.c	30;"	d	file:
MAX_KEY_SIZE	src/test_splinter_zipfian_histogram.c	29;"	d	file:
MAX_MERGE_ARITY	external/splinterdb/src/merge.h	17;"	d
MAX_PAGES_PER_EXTENT	external/splinterdb/src/cache.h	48;"	d
MAX_PAGE_SIZE	external/splinterdb/src/btree.h	66;"	d
MAX_READ_REFCOUNT	external/splinterdb/src/cache.h	55;"	d
MAX_SELECTOR	other_filters/taf/src/splinter_taf.h	14;"	d
MAX_SELECTOR	other_filters/taf/src/taf.h	14;"	d
MAX_SELECTOR	other_filters/taf/src/taf_sim.h	14;"	d
MAX_SELECTOR	src/taf.cc	25;"	d	file:
MAX_STRING_LENGTH	external/splinterdb/src/platform_linux/platform.h	129;"	d
MAX_THREADS	external/splinterdb/src/platform_linux/platform.h	73;"	d
MAX_VALUE	other_filters/cqf/src/gqf.c	31;"	d	file:
MAX_VALUE	src/gqf.c	25;"	d	file:
MAX_VALUE	src/gqf_backup.c	22;"	d	file:
MAX_VAL_SIZE	include/splinter_util.h	22;"	d
MAX_VAL_SIZE	other_filters/acf/example/test_acf_ops.cc	25;"	d	file:
MAX_VAL_SIZE	other_filters/acf/example/test_ext_throughput.cc	20;"	d	file:
MAX_VAL_SIZE	other_filters/acf/example/test_splinter_adversarial.cc	27;"	d	file:
MAX_VAL_SIZE	other_filters/acf/example/test_splinter_inc_throughput.cc	25;"	d	file:
MAX_VAL_SIZE	other_filters/acf/example/test_splinter_ops.cc	27;"	d	file:
MAX_VAL_SIZE	other_filters/acf/example/test_splinter_throughput.cc	27;"	d	file:
MAX_VAL_SIZE	other_filters/acf/example/test_splinter_zipfian_histogram.cc	26;"	d	file:
MAX_VAL_SIZE	other_filters/acfsim/example/test_acf_ops.cc	25;"	d	file:
MAX_VAL_SIZE	other_filters/acfsim/example/test_ext_throughput.cc	20;"	d	file:
MAX_VAL_SIZE	other_filters/acfsim/example/test_splinter_adversarial.cc	27;"	d	file:
MAX_VAL_SIZE	other_filters/acfsim/example/test_splinter_inc_throughput.cc	25;"	d	file:
MAX_VAL_SIZE	other_filters/acfsim/example/test_splinter_ops.cc	27;"	d	file:
MAX_VAL_SIZE	other_filters/acfsim/example/test_splinter_throughput.cc	27;"	d	file:
MAX_VAL_SIZE	other_filters/acfsim/example/test_splinter_zipfian_histogram.cc	26;"	d	file:
MAX_VAL_SIZE	other_filters/cf/example/test_splinter_adversarial.cc	28;"	d	file:
MAX_VAL_SIZE	other_filters/cf/example/test_splinter_ops.cc	27;"	d	file:
MAX_VAL_SIZE	other_filters/cf/example/test_splinter_throughput.cc	27;"	d	file:
MAX_VAL_SIZE	other_filters/cf/example/test_splinter_zipfian_histogram.cc	27;"	d	file:
MAX_VAL_SIZE	other_filters/cqf/src/test_splinter_adversarial.c	41;"	d	file:
MAX_VAL_SIZE	other_filters/cqf/src/test_splinter_ops.c	40;"	d	file:
MAX_VAL_SIZE	other_filters/cqf/src/test_splinter_throughput.c	40;"	d	file:
MAX_VAL_SIZE	other_filters/cqf/src/test_splinter_zipfian_histogram.c	39;"	d	file:
MAX_VAL_SIZE	other_filters/taf/src/splinter_taf.c	34;"	d	file:
MAX_VAL_SIZE	src/test_splinter_adversarial.c	31;"	d	file:
MAX_VAL_SIZE	src/test_splinter_inserts.c	31;"	d	file:
MAX_VAL_SIZE	src/test_splinter_inserts_2.c	31;"	d	file:
MAX_VAL_SIZE	src/test_splinter_ops.c	31;"	d	file:
MAX_VAL_SIZE	src/test_splinter_replace_lltable_throughput.c	33;"	d	file:
MAX_VAL_SIZE	src/test_splinter_throughput.c	31;"	d	file:
MAX_VAL_SIZE	src/test_splinter_zipfian_histogram.c	30;"	d	file:
MD5Hash	other_filters/acf/src/hashutil.cc	/^std::string HashUtil::MD5Hash(const char *inbuf, size_t in_length) {$/;"	f	class:cuckoofilter::HashUtil
MD5Hash	other_filters/acfsim/src/hashutil.cc	/^std::string HashUtil::MD5Hash(const char *inbuf, size_t in_length) {$/;"	f	class:cuckoofilter::HashUtil
MD5Hash	other_filters/cf/src/hashutil.cc	/^std::string HashUtil::MD5Hash(const char *inbuf, size_t in_length) {$/;"	f	class:cuckoofilter::HashUtil
MEMTABLE_COUNT_GRANULARITY	external/splinterdb/src/memtable.c	17;"	d	file:
MEMTABLE_INSERT_LOCK_IDX	external/splinterdb/src/memtable.c	19;"	d	file:
MEMTABLE_LOOKUP_LOCK_IDX	external/splinterdb/src/memtable.c	20;"	d	file:
MEMTABLE_SPACE_OVERHEAD_FACTOR	external/splinterdb/src/memtable.h	17;"	d
MEMTABLE_STATE_COMPACTED	external/splinterdb/src/memtable.h	/^   MEMTABLE_STATE_COMPACTED,$/;"	e	enum:memtable_state
MEMTABLE_STATE_COMPACTING	external/splinterdb/src/memtable.h	/^   MEMTABLE_STATE_COMPACTING,$/;"	e	enum:memtable_state
MEMTABLE_STATE_FINALIZED	external/splinterdb/src/memtable.h	/^   MEMTABLE_STATE_FINALIZED,$/;"	e	enum:memtable_state
MEMTABLE_STATE_INCORPORATED	external/splinterdb/src/memtable.h	/^   MEMTABLE_STATE_INCORPORATED,$/;"	e	enum:memtable_state
MEMTABLE_STATE_INCORPORATING	external/splinterdb/src/memtable.h	/^   MEMTABLE_STATE_INCORPORATING,$/;"	e	enum:memtable_state
MEMTABLE_STATE_INCORPORATION_ASSIGNED	external/splinterdb/src/memtable.h	/^   MEMTABLE_STATE_INCORPORATION_ASSIGNED,$/;"	e	enum:memtable_state
MEMTABLE_STATE_INVALID	external/splinterdb/src/memtable.h	/^   MEMTABLE_STATE_INVALID = 0,$/;"	e	enum:memtable_state
MEMTABLE_STATE_READY	external/splinterdb/src/memtable.h	/^   MEMTABLE_STATE_READY, \/\/ if it's the correct one, go ahead and insert$/;"	e	enum:memtable_state
MEM_SIZES	external/splinterdb/scripts/run_ycsb.py	/^MEM_SIZES = [x * GIB for x in ARGS.memory]$/;"	v
MERGE_FULL	external/splinterdb/src/merge.h	56;"	d
MERGE_INTERMEDIATE	external/splinterdb/src/merge.h	55;"	d
MERGE_RAW	external/splinterdb/src/merge.h	54;"	d
MESSAGE_SIZE	external/splinterdb/scripts/run_ycsb.py	/^MESSAGE_SIZE = ARGS.message_size$/;"	v
MESSAGE_TYPE_DELETE	external/splinterdb/include/splinterdb/data.h	/^   MESSAGE_TYPE_DELETE,$/;"	e	enum:message_type
MESSAGE_TYPE_INSERT	external/splinterdb/include/splinterdb/data.h	/^   MESSAGE_TYPE_INSERT,$/;"	e	enum:message_type
MESSAGE_TYPE_INVALID	external/splinterdb/include/splinterdb/data.h	/^   MESSAGE_TYPE_INVALID = 0,$/;"	e	enum:message_type
MESSAGE_TYPE_MAX_VALID_USER_TYPE	external/splinterdb/include/splinterdb/data.h	/^   MESSAGE_TYPE_MAX_VALID_USER_TYPE = MESSAGE_TYPE_DELETE,$/;"	e	enum:message_type
MESSAGE_TYPE_PIVOT_DATA	external/splinterdb/include/splinterdb/data.h	/^   MESSAGE_TYPE_PIVOT_DATA          = 1000$/;"	e	enum:message_type
MESSAGE_TYPE_UPDATE	external/splinterdb/include/splinterdb/data.h	/^   MESSAGE_TYPE_UPDATE,$/;"	e	enum:message_type
METADATA_INC_MODE	src/gqf.c	23;"	d	file:
METADATA_WORD	other_filters/cqf/src/gqf.c	36;"	d	file:
METADATA_WORD	src/gqf.c	30;"	d	file:
METADATA_WORD	src/gqf_backup.c	27;"	d	file:
MILLION	external/splinterdb/src/platform_linux/platform.h	117;"	d
MIN	external/splinterdb/src/platform_linux/platform.h	572;"	d
MINI_MAX_BATCHES	external/splinterdb/src/mini_allocator.h	31;"	d
MINI_NO_REFS	external/splinterdb/src/mini_allocator.c	27;"	d	file:
MINI_WAIT	external/splinterdb/src/mini_allocator.c	24;"	d	file:
MISC_MSG_WITH_ARGS	external/splinterdb/tests/unit/misc_test.c	21;"	d	file:
MISC_MSG_WITH_NO_ARGS	external/splinterdb/tests/unit/misc_test.c	20;"	d	file:
MONO	external/splinterdb/tests/functional/cache_test.c	/^   enum { MONO, RAND, HOP } type;$/;"	e	enum:__anon47::__anon48	file:
MSG_LEVEL_DEBUG	external/splinterdb/tests/unit/ctest.h	/^   MSG_LEVEL_DEBUG  = 7, \/\/ All messages, including debug outputs, are printed$/;"	e	enum:msg_level
MSG_LEVEL_ERRORS	external/splinterdb/tests/unit/ctest.h	/^   MSG_LEVEL_ERRORS = 3, \/\/ Only error messages are printed$/;"	e	enum:msg_level
MSG_LEVEL_INFO	external/splinterdb/tests/unit/ctest.h	/^   MSG_LEVEL_INFO   = 6, \/\/ Informational messages are printed$/;"	e	enum:msg_level
MSG_LEVEL_SILENT	external/splinterdb/tests/unit/ctest.h	/^   MSG_LEVEL_SILENT = 0, \/\/ No messages are printed$/;"	e	enum:msg_level
MSG_SIZE	external/splinterdb/tests/unit/main.c	26;"	d	file:
Mega	external/splinterdb/tests/unit/unit_tests.h	15;"	d
Mega	include/splinter_util.h	18;"	d
Mega	other_filters/acf/example/test_acf_ops.cc	19;"	d	file:
Mega	other_filters/acf/example/test_ext_throughput.cc	14;"	d	file:
Mega	other_filters/acf/example/test_splinter_adversarial.cc	21;"	d	file:
Mega	other_filters/acf/example/test_splinter_inc_throughput.cc	19;"	d	file:
Mega	other_filters/acf/example/test_splinter_ops.cc	22;"	d	file:
Mega	other_filters/acf/example/test_splinter_throughput.cc	21;"	d	file:
Mega	other_filters/acf/example/test_splinter_zipfian_histogram.cc	20;"	d	file:
Mega	other_filters/acfsim/example/test_acf_ops.cc	19;"	d	file:
Mega	other_filters/acfsim/example/test_ext_throughput.cc	14;"	d	file:
Mega	other_filters/acfsim/example/test_splinter_adversarial.cc	21;"	d	file:
Mega	other_filters/acfsim/example/test_splinter_inc_throughput.cc	19;"	d	file:
Mega	other_filters/acfsim/example/test_splinter_ops.cc	22;"	d	file:
Mega	other_filters/acfsim/example/test_splinter_throughput.cc	21;"	d	file:
Mega	other_filters/acfsim/example/test_splinter_zipfian_histogram.cc	20;"	d	file:
Mega	other_filters/cf/example/test_splinter_adversarial.cc	22;"	d	file:
Mega	other_filters/cf/example/test_splinter_ops.cc	22;"	d	file:
Mega	other_filters/cf/example/test_splinter_throughput.cc	21;"	d	file:
Mega	other_filters/cf/example/test_splinter_zipfian_histogram.cc	21;"	d	file:
Mega	other_filters/cqf/src/test_splinter_adversarial.c	35;"	d	file:
Mega	other_filters/cqf/src/test_splinter_ops.c	35;"	d	file:
Mega	other_filters/cqf/src/test_splinter_throughput.c	34;"	d	file:
Mega	other_filters/cqf/src/test_splinter_zipfian_histogram.c	33;"	d	file:
Mega	other_filters/taf/src/splinter_taf.c	30;"	d	file:
Mega	src/test_splinter_adversarial.c	25;"	d	file:
Mega	src/test_splinter_inserts.c	26;"	d	file:
Mega	src/test_splinter_inserts_2.c	26;"	d	file:
Mega	src/test_splinter_ops.c	26;"	d	file:
Mega	src/test_splinter_replace_lltable_throughput.c	27;"	d	file:
Mega	src/test_splinter_throughput.c	25;"	d	file:
Mega	src/test_splinter_zipfian_histogram.c	24;"	d	file:
Metrics	other_filters/acf/benchmarks/conext-table3.cc	/^struct Metrics {$/;"	s	file:
Metrics	other_filters/cf/benchmarks/conext-table3.cc	/^struct Metrics {$/;"	s	file:
MiB	external/splinterdb/src/platform_linux/platform.h	93;"	d
MiB_TO_B	external/splinterdb/src/platform_linux/platform.h	99;"	d
MirroredTable	other_filters/acf/src/mirroredtable.h	/^		explicit MirroredTable(const size_t num) : num_buckets_(num) {$/;"	f	class:cuckoofilter::MirroredTable
MirroredTable	other_filters/acf/src/mirroredtable.h	/^	template <size_t bits_per_tag> class MirroredTable {$/;"	c	namespace:cuckoofilter
MirroredTable	other_filters/acfsim/src/mirroredtable.h	/^		explicit MirroredTable(const size_t num) : num_buckets_(num) {$/;"	f	class:cuckoofilter::MirroredTable
MirroredTable	other_filters/acfsim/src/mirroredtable.h	/^	template <size_t bits_per_tag> class MirroredTable {$/;"	c	namespace:cuckoofilter
MixIn	other_filters/acf/benchmarks/random.h	/^::std::vector<T> MixIn(const T* x_begin, const T* x_end, const T* y_begin, const T* y_end,$/;"	f
MixIn	other_filters/cf/benchmarks/random.h	/^::std::vector<T> MixIn(const T* x_begin, const T* x_end, const T* y_begin, const T* y_end,$/;"	f
Murmur64Hasher	other_filters/acf/src/hashutil.h	/^	Murmur64Hasher() {$/;"	f	class:cuckoofilter::Murmur64Hasher
Murmur64Hasher	other_filters/acf/src/hashutil.h	/^class Murmur64Hasher {$/;"	c	namespace:cuckoofilter
Murmur64Hasher	other_filters/acfsim/src/hashutil.h	/^	Murmur64Hasher() {$/;"	f	class:cuckoofilter::Murmur64Hasher
Murmur64Hasher	other_filters/acfsim/src/hashutil.h	/^class Murmur64Hasher {$/;"	c	namespace:cuckoofilter
MurmurHash	other_filters/acf/src/hashutil.cc	/^uint32_t HashUtil::MurmurHash(const std::string &s, uint32_t seed) {$/;"	f	class:cuckoofilter::HashUtil
MurmurHash	other_filters/acf/src/hashutil.cc	/^uint32_t HashUtil::MurmurHash(const void *buf, size_t len, uint32_t seed) {$/;"	f	class:cuckoofilter::HashUtil
MurmurHash	other_filters/acfsim/src/hashutil.cc	/^uint32_t HashUtil::MurmurHash(const std::string &s, uint32_t seed) {$/;"	f	class:cuckoofilter::HashUtil
MurmurHash	other_filters/acfsim/src/hashutil.cc	/^uint32_t HashUtil::MurmurHash(const void *buf, size_t len, uint32_t seed) {$/;"	f	class:cuckoofilter::HashUtil
MurmurHash	other_filters/cf/src/hashutil.cc	/^uint32_t HashUtil::MurmurHash(const std::string &s, uint32_t seed) {$/;"	f	class:cuckoofilter::HashUtil
MurmurHash	other_filters/cf/src/hashutil.cc	/^uint32_t HashUtil::MurmurHash(const void *buf, size_t len, uint32_t seed) {$/;"	f	class:cuckoofilter::HashUtil
MurmurHash3_x64_128	other_filters/taf/src/murmur3.c	/^void MurmurHash3_x64_128 ( const void * key, const int len,$/;"	f
MurmurHash3_x64_128	src/taf.cc	/^void MurmurHash3_x64_128 ( const void * key, const int len,$/;"	f
MurmurHash3_x86_128	other_filters/taf/src/murmur3.c	/^void MurmurHash3_x86_128 ( const void * key, const int len,$/;"	f
MurmurHash3_x86_128	src/taf.cc	/^void MurmurHash3_x86_128 ( const void * key, const int len,$/;"	f
MurmurHash3_x86_32	other_filters/taf/src/murmur3.c	/^void MurmurHash3_x86_32 ( const void * key, int len,$/;"	f
MurmurHash3_x86_32	src/taf.cc	/^void MurmurHash3_x86_32 ( const void * key, int len,$/;"	f
MurmurHash64	other_filters/acf/src/hashutil.cc	/^uint64_t HashUtil::MurmurHash64(const uint64_t key, uint64_t seed) {$/;"	f	class:cuckoofilter::HashUtil
MurmurHash64	other_filters/acf/src/hashutil.cc	/^uint64_t HashUtil::MurmurHash64(const void *key, size_t len, uint64_t seed) {$/;"	f	class:cuckoofilter::HashUtil
MurmurHash64	other_filters/acfsim/src/hashutil.cc	/^uint64_t HashUtil::MurmurHash64(const uint64_t key, uint64_t seed) {$/;"	f	class:cuckoofilter::HashUtil
MurmurHash64	other_filters/acfsim/src/hashutil.cc	/^uint64_t HashUtil::MurmurHash64(const void *key, size_t len, uint64_t seed) {$/;"	f	class:cuckoofilter::HashUtil
MurmurHash64A	other_filters/acf/example/test.cc	/^uint64_t MurmurHash64A (const void *key, int len, unsigned int seed) {$/;"	f
MurmurHash64A	other_filters/acf/example/test_fill_varied_throughput.cc	/^uint64_t MurmurHash64A (const void *key, int len, unsigned int seed) {$/;"	f
MurmurHash64A	other_filters/acf/example/test_fp.cc	/^uint64_t MurmurHash64A (const void *key, int len, unsigned int seed) {$/;"	f
MurmurHash64A	other_filters/acf/example/test_micro.cc	/^uint64_t MurmurHash64A ( const void * key, int len, unsigned int seed )$/;"	f
MurmurHash64A	other_filters/acf/example/test_zipf_throughput.cc	/^uint64_t MurmurHash64A(const void* key, int len, uint64_t seed) {$/;"	f
MurmurHash64A	other_filters/acf/src/cuckoofilter.h	/^uint64_t MurmurHash64A(const void* key, int len, uint64_t seed) {$/;"	f
MurmurHash64A	other_filters/acfsim/example/test.cc	/^uint64_t MurmurHash64A (const void *key, int len, unsigned int seed) {$/;"	f
MurmurHash64A	other_filters/acfsim/example/test_fill_varied_throughput.cc	/^uint64_t MurmurHash64A (const void *key, int len, unsigned int seed) {$/;"	f
MurmurHash64A	other_filters/acfsim/example/test_fp.cc	/^uint64_t MurmurHash64A (const void *key, int len, unsigned int seed) {$/;"	f
MurmurHash64A	other_filters/acfsim/example/test_micro.cc	/^uint64_t MurmurHash64A ( const void * key, int len, unsigned int seed )$/;"	f
MurmurHash64A	other_filters/acfsim/example/test_zipf_throughput.cc	/^uint64_t MurmurHash64A(const void* key, int len, uint64_t seed) {$/;"	f
MurmurHash64A	other_filters/acfsim/src/cuckoofilter.h	/^uint64_t MurmurHash64A(const void* key, int len, uint64_t seed) {$/;"	f
MurmurHash64A	other_filters/cf/example/test.cc	/^uint64_t MurmurHash64A (const void *key, int len, unsigned int seed) {$/;"	f
MurmurHash64A	other_filters/cf/example/test_micro_super.cc	/^uint64_t MurmurHash64A(const void* key, int len, uint64_t seed) {$/;"	f
MurmurHash64A	other_filters/cf/example/test_micro_throughput.cc	/^uint64_t MurmurHash64A(const void* key, int len, uint64_t seed) {$/;"	f
MurmurHash64A	other_filters/cf/example/test_splinter_adversarial.cc	/^uint64_t MurmurHash64A(const void* key, int len, uint64_t seed) {$/;"	f
MurmurHash64A	other_filters/cf/example/test_splinter_throughput.cc	/^uint64_t MurmurHash64A(const void* key, int len, uint64_t seed) {$/;"	f
MurmurHash64A	other_filters/cf/example/test_splinter_zipfian_histogram.cc	/^uint64_t MurmurHash64A(const void* key, int len, uint64_t seed) {$/;"	f
MurmurHash64A	other_filters/cqf/src/hashutil.c	/^uint64_t MurmurHash64A ( const void * key, int len, unsigned int seed )$/;"	f
MurmurHash64A	other_filters/cqf/src/test_adversarial.cc	/^uint64_t MurmurHash64A(const void* key, int len, uint64_t seed) {$/;"	f
MurmurHash64A	other_filters/cqf/src/test_ext_throughput.cc	/^uint64_t MurmurHash64A(const void* key, int len, uint64_t seed) {$/;"	f
MurmurHash64A	other_filters/taf/src/murmur3.c	/^uint64_t MurmurHash64A ( const void * key, int len, unsigned int seed )$/;"	f
MurmurHash64A	src/hashutil.c	/^uint64_t MurmurHash64A ( const void * key, int len, unsigned int seed )$/;"	f
MurmurHash64A	src/test_progress.c	/^uint64_t MurmurHash64A (const void *key, int len, unsigned int seed) {$/;"	f
MurmurHash64A	src/test_zipf_throughput.cc	/^uint64_t MurmurHash64A(const void* key, int len, uint64_t seed) {$/;"	f
MurmurHash64B	other_filters/cqf/src/hashutil.c	/^uint64_t MurmurHash64B ( const void * key, int len, unsigned int seed )$/;"	f
MurmurHash64B	src/hashutil.c	/^uint64_t MurmurHash64B ( const void * key, int len, unsigned int seed )$/;"	f
N	other_filters/cqf/src/zipf.c	/^    long N;                      \/\/ N, the size of the universe.$/;"	m	struct:zipfian	file:
N	src/zipf.c	/^    long N;                      \/\/ N, the size of the universe.$/;"	m	struct:zipfian	file:
NEGATIVE_INFINITY	external/splinterdb/src/data_internal.h	/^   NEGATIVE_INFINITY = 1,$/;"	e	enum:__anon37
NEGATIVE_INFINITY_KEY	external/splinterdb/src/data_internal.h	41;"	d
NO_UNUSED	other_filters/taf/src/exaf.c	187;"	d	file:
NO_UNUSED	other_filters/taf/src/rsqf.c	134;"	d	file:
NO_UNUSED	other_filters/taf/src/splinter_taf.c	289;"	d	file:
NO_UNUSED	other_filters/taf/src/taf.c	177;"	d	file:
NO_UNUSED	other_filters/taf/src/taf.cc	209;"	d	file:
NO_UNUSED	other_filters/taf/src/taf_sim.c	178;"	d	file:
NO_UNUSED	other_filters/taf/src/utaf.c	161;"	d	file:
NO_UNUSED	src/taf.cc	1620;"	d	file:
NPAIRS	other_filters/cqf/src/zipf.c	/^enum { NPAIRS = 1000000 };$/;"	e	enum:__anon2	file:
NPAIRS	src/zipf.c	/^enum { NPAIRS = 1000000 };$/;"	e	enum:__anon9	file:
NSEC_TO_MSEC	external/splinterdb/src/platform_linux/platform.h	123;"	d
NSEC_TO_SEC	external/splinterdb/src/platform_linux/platform.h	122;"	d
NSEC_TO_USEC	external/splinterdb/src/platform_linux/platform.h	124;"	d
NULL_KEY	external/splinterdb/src/data_internal.h	45;"	d
NULL_MESSAGE	external/splinterdb/src/data_internal.h	320;"	d
NULL_SLICE	external/splinterdb/include/splinterdb/public_util.h	27;"	d
NUM_HISTORY_RECORDS	external/splinterdb/src/clockcache.h	50;"	d
NUM_LOOKUP_TYPES	external/splinterdb/tests/functional/splinter_test.c	/^   NUM_LOOKUP_TYPES$/;"	e	enum:lookup_type	file:
NUM_MEMTABLE_STATES	external/splinterdb/src/memtable.h	/^   NUM_MEMTABLE_STATES,$/;"	e	enum:memtable_state
NUM_OP_TYPES	external/splinterdb/tests/functional/splinter_test.c	/^   NUM_OP_TYPES$/;"	e	enum:test_splinter_pthread_op_type	file:
NUM_PAGES_RW_ASYNC_PER_THREAD	external/splinterdb/tests/functional/io_apis_test.c	96;"	d	file:
NUM_PAGE_TYPES	external/splinterdb/src/allocator.h	/^   ARRAY_SIZE(page_type_str) == NUM_PAGE_TYPES,$/;"	v
NUM_PAGE_TYPES	external/splinterdb/src/allocator.h	/^   NUM_PAGE_TYPES,$/;"	e	enum:page_type
NUM_RUNS	other_filters/cqf/src/test_partitioned_counter.c	29;"	d	file:
NUM_RUNS	src/test_partitioned_counter.c	20;"	d	file:
NUM_SLOTS_TO_LOCK	other_filters/cqf/src/gqf.c	34;"	d	file:
NUM_SLOTS_TO_LOCK	other_filters/cqf/src/gqf_file.c	31;"	d	file:
NUM_SLOTS_TO_LOCK	src/gqf.c	28;"	d	file:
NUM_SLOTS_TO_LOCK	src/gqf_backup.c	25;"	d	file:
NUM_SLOTS_TO_LOCK	src/gqf_file.c	22;"	d	file:
NUM_TASK_TYPES	external/splinterdb/src/task.h	/^   NUM_TASK_TYPES,$/;"	e	enum:task_type
NUM_THREADS	external/splinterdb/tests/functional/io_apis_test.c	89;"	d	file:
NUM_THREADS	external/splinterdb/tests/unit/large_inserts_stress_test.c	59;"	d	file:
NUM_TRUNK_COMPACTION_TYPES	external/splinterdb/src/trunk.c	/^   NUM_TRUNK_COMPACTION_TYPES,$/;"	e	enum:trunk_compaction_type	file:
N_ENTS	other_filters/acf/src/permencoding.h	/^  static const size_t N_ENTS = 3876;$/;"	m	class:cuckoofilter::PermEncoding
N_ENTS	other_filters/acfsim/src/permencoding.h	/^  static const size_t N_ENTS = 3876;$/;"	m	class:cuckoofilter::PermEncoding
N_ENTS	other_filters/cf/src/permencoding.h	/^  static const size_t N_ENTS = 3876;$/;"	m	class:cuckoofilter::PermEncoding
NotEnoughSpace	other_filters/acf/src/cuckoofilter.h	/^		NotEnoughSpace = 2,$/;"	e	enum:cuckoofilter::Status
NotEnoughSpace	other_filters/acfsim/src/cuckoofilter.h	/^		NotEnoughSpace = 2,$/;"	e	enum:cuckoofilter::Status
NotEnoughSpace	other_filters/cf/src/cuckoofilter.h	/^  NotEnoughSpace = 2,$/;"	e	enum:cuckoofilter::Status
NotFound	other_filters/acf/src/cuckoofilter.h	/^		NotFound = 1,$/;"	e	enum:cuckoofilter::Status
NotFound	other_filters/acfsim/src/cuckoofilter.h	/^		NotFound = 1,$/;"	e	enum:cuckoofilter::Status
NotFound	other_filters/cf/src/cuckoofilter.h	/^  NotFound = 1,$/;"	e	enum:cuckoofilter::Status
NotSupported	other_filters/acf/src/cuckoofilter.h	/^		NotSupported = 3,$/;"	e	enum:cuckoofilter::Status
NotSupported	other_filters/acfsim/src/cuckoofilter.h	/^		NotSupported = 3,$/;"	e	enum:cuckoofilter::Status
NotSupported	other_filters/cf/src/cuckoofilter.h	/^  NotSupported = 3,$/;"	e	enum:cuckoofilter::Status
NowNanos	other_filters/acf/benchmarks/timing.h	/^::std::uint64_t NowNanos() {$/;"	f
NowNanos	other_filters/cf/benchmarks/timing.h	/^::std::uint64_t NowNanos() {$/;"	f
NullHash	other_filters/acf/src/hashutil.cc	/^uint32_t HashUtil::NullHash(const void *buf, size_t length,$/;"	f	class:cuckoofilter::HashUtil
NullHash	other_filters/acfsim/src/hashutil.cc	/^uint32_t HashUtil::NullHash(const void *buf, size_t length,$/;"	f	class:cuckoofilter::HashUtil
NullHash	other_filters/cf/src/hashutil.cc	/^uint32_t HashUtil::NullHash(const void *buf, size_t length,$/;"	f	class:cuckoofilter::HashUtil
NumBuckets	other_filters/acf/src/mirroredtable.h	/^		size_t NumBuckets() const {$/;"	f	class:cuckoofilter::MirroredTable
NumBuckets	other_filters/acf/src/packedtable.h	/^  size_t NumBuckets() const {$/;"	f	class:cuckoofilter::PackedTable
NumBuckets	other_filters/acf/src/singletable.h	/^  size_t NumBuckets() const {$/;"	f	class:cuckoofilter::SingleTable
NumBuckets	other_filters/acfsim/src/mirroredtable.h	/^		size_t NumBuckets() const {$/;"	f	class:cuckoofilter::MirroredTable
NumBuckets	other_filters/acfsim/src/packedtable.h	/^  size_t NumBuckets() const {$/;"	f	class:cuckoofilter::PackedTable
NumBuckets	other_filters/acfsim/src/singletable.h	/^  size_t NumBuckets() const {$/;"	f	class:cuckoofilter::SingleTable
NumBuckets	other_filters/cf/src/packedtable.h	/^  size_t NumBuckets() const {$/;"	f	class:cuckoofilter::PackedTable
NumBuckets	other_filters/cf/src/singletable.h	/^  size_t NumBuckets() const {$/;"	f	class:cuckoofilter::SingleTable
NumTagsInBucket	other_filters/acf/src/mirroredtable.h	/^		inline size_t NumTagsInBucket(const size_t i) const {$/;"	f	class:cuckoofilter::MirroredTable
NumTagsInBucket	other_filters/acf/src/singletable.h	/^  inline size_t NumTagsInBucket(const size_t i) const {$/;"	f	class:cuckoofilter::SingleTable
NumTagsInBucket	other_filters/acfsim/src/mirroredtable.h	/^		inline size_t NumTagsInBucket(const size_t i) const {$/;"	f	class:cuckoofilter::MirroredTable
NumTagsInBucket	other_filters/acfsim/src/singletable.h	/^  inline size_t NumTagsInBucket(const size_t i) const {$/;"	f	class:cuckoofilter::SingleTable
NumTagsInBucket	other_filters/cf/src/singletable.h	/^  inline size_t NumTagsInBucket(const size_t i) const {$/;"	f	class:cuckoofilter::SingleTable
OBJ	external/splinterdb/Makefile	/^OBJ := $(SRC:%.c=$(OBJDIR)\/%.o)$/;"	m
OBJ	other_filters/taf/src/Makefile	/^OBJ = arcd.o exaf.o murmur3.o bit_util.o rsqf.o set.o$/;"	m
OBJDIR	Makefile	/^OBJDIR=obj$/;"	m
OBJDIR	external/splinterdb/Makefile	/^OBJDIR = $(BUILD_PATH)\/obj$/;"	m
OBJDIR	other_filters/cqf/Makefile	/^OBJDIR=obj$/;"	m
OBJDIR	other_filters/taf/Makefile	/^OBJDIR=src$/;"	m
ONDISK	external/splinterdb/src/default_data_config.c	/^typedef struct ONDISK {$/;"	s	file:
ONDISK	external/splinterdb/src/util.h	351;"	d
ONDISK_KEY_DEFAULT_FLAGS	external/splinterdb/src/data_internal.h	241;"	d
ONDISK_KEY_LENGTH_BITS	external/splinterdb/src/data_internal.h	235;"	d
ONDISK_KEY_NEGATIVE_INFINITY	external/splinterdb/src/data_internal.h	236;"	d
ONDISK_KEY_POSITIVE_INFINITY	external/splinterdb/src/data_internal.h	238;"	d
ONDISK_MESSAGE_TYPE_BITS	external/splinterdb/src/data_internal.h	394;"	d
ONDISK_MESSAGE_TYPE_MASK	external/splinterdb/src/data_internal.h	398;"	d
ONE	other_filters/taf/src/macros.h	12;"	d
ONE	src/taf.cc	218;"	d	file:
ONES	other_filters/taf/src/macros.h	15;"	d
ONES	src/taf.cc	221;"	d	file:
OPENSSL_zalloc	other_filters/acf/src/hashutil.cc	/^static void *OPENSSL_zalloc(size_t num)$/;"	f	namespace:cuckoofilter
OPENSSL_zalloc	other_filters/acfsim/src/hashutil.cc	/^static void *OPENSSL_zalloc(size_t num)$/;"	f	namespace:cuckoofilter
OPENSSL_zalloc	other_filters/cf/src/hashutil.cc	/^static void *OPENSSL_zalloc(size_t num)$/;"	f	namespace:cuckoofilter
OPT	Makefile	/^	OPT=-O0$/;"	m
OPT	Makefile	/^	OPT=-O3 -DNDEBUG$/;"	m
OPT	other_filters/acf/Makefile	/^	OPT = -DNDEBUG -Ofast$/;"	m
OPT	other_filters/acf/Makefile	/^	OPT = -g -ggdb$/;"	m
OPT	other_filters/acf/benchmarks/Makefile	/^OPT = -O3 -DNDEBUG$/;"	m
OPT	other_filters/acfsim/Makefile	/^OPT = -g -ggdb$/;"	m
OPT	other_filters/cf/Makefile	/^	OPT = -DNDEBUG -Ofast$/;"	m
OPT	other_filters/cf/Makefile	/^	OPT = -g -ggdb$/;"	m
OPT	other_filters/cf/benchmarks/Makefile	/^OPT = -O3 -DNDEBUG$/;"	m
OPT	other_filters/cqf/Makefile	/^	OPT=$/;"	m
OPT	other_filters/cqf/Makefile	/^	OPT=-O3 -g$/;"	m
OPT	other_filters/taf/Makefile	/^	OPT=$/;"	m
OPT	other_filters/taf/Makefile	/^	OPT=-Ofast -DNDEBUG$/;"	m
OP_INSERT	external/splinterdb/tests/functional/splinter_test.c	/^   OP_INSERT = 0,$/;"	e	enum:test_splinter_pthread_op_type	file:
OP_LOOKUP	external/splinterdb/tests/functional/splinter_test.c	/^   OP_LOOKUP,$/;"	e	enum:test_splinter_pthread_op_type	file:
OS	other_filters/taf/src/Makefile	/^OS := $(shell uname)$/;"	m
Ok	other_filters/acf/src/cuckoofilter.h	/^		Ok = 0,$/;"	e	enum:cuckoofilter::Status
Ok	other_filters/acfsim/src/cuckoofilter.h	/^		Ok = 0,$/;"	e	enum:cuckoofilter::Status
Ok	other_filters/cf/src/cuckoofilter.h	/^  Ok = 0,$/;"	e	enum:cuckoofilter::Status
OrderedDict	external/splinterdb/scripts/list_test.py	/^from collections import OrderedDict$/;"	i
PACKED	external/splinterdb/src/util.h	348;"	d
PACKEDARRAY_H	external/splinterdb/src/PackedArray.h	5;"	d
PACKEDARRAY_IMPL_BITS_AVAILABLE	external/splinterdb/src/PackedArray.c	130;"	d	file:
PACKEDARRAY_IMPL_CASE_I	external/splinterdb/src/PackedArray.c	101;"	d	file:
PACKEDARRAY_IMPL_CASE_I	external/splinterdb/src/PackedArray.c	102;"	d	file:
PACKEDARRAY_IMPL_CASE_I	external/splinterdb/src/PackedArray.c	104;"	d	file:
PACKEDARRAY_IMPL_CASE_I	external/splinterdb/src/PackedArray.c	105;"	d	file:
PACKEDARRAY_IMPL_CASE_I	external/splinterdb/src/PackedArray.c	107;"	d	file:
PACKEDARRAY_IMPL_CASE_I	external/splinterdb/src/PackedArray.c	108;"	d	file:
PACKEDARRAY_IMPL_CASE_I	external/splinterdb/src/PackedArray.c	110;"	d	file:
PACKEDARRAY_IMPL_CASE_I	external/splinterdb/src/PackedArray.c	111;"	d	file:
PACKEDARRAY_IMPL_CASE_I	external/splinterdb/src/PackedArray.c	113;"	d	file:
PACKEDARRAY_IMPL_CASE_I	external/splinterdb/src/PackedArray.c	114;"	d	file:
PACKEDARRAY_IMPL_CASE_I	external/splinterdb/src/PackedArray.c	116;"	d	file:
PACKEDARRAY_IMPL_CASE_I	external/splinterdb/src/PackedArray.c	117;"	d	file:
PACKEDARRAY_IMPL_CASE_I	external/splinterdb/src/PackedArray.c	119;"	d	file:
PACKEDARRAY_IMPL_CASE_I	external/splinterdb/src/PackedArray.c	120;"	d	file:
PACKEDARRAY_IMPL_CASE_I	external/splinterdb/src/PackedArray.c	122;"	d	file:
PACKEDARRAY_IMPL_CASE_I	external/splinterdb/src/PackedArray.c	123;"	d	file:
PACKEDARRAY_IMPL_CASE_I	external/splinterdb/src/PackedArray.c	125;"	d	file:
PACKEDARRAY_IMPL_CASE_I	external/splinterdb/src/PackedArray.c	126;"	d	file:
PACKEDARRAY_IMPL_CASE_I	external/splinterdb/src/PackedArray.c	30;"	d	file:
PACKEDARRAY_IMPL_CASE_I	external/splinterdb/src/PackedArray.c	32;"	d	file:
PACKEDARRAY_IMPL_CASE_I	external/splinterdb/src/PackedArray.c	33;"	d	file:
PACKEDARRAY_IMPL_CASE_I	external/splinterdb/src/PackedArray.c	35;"	d	file:
PACKEDARRAY_IMPL_CASE_I	external/splinterdb/src/PackedArray.c	36;"	d	file:
PACKEDARRAY_IMPL_CASE_I	external/splinterdb/src/PackedArray.c	38;"	d	file:
PACKEDARRAY_IMPL_CASE_I	external/splinterdb/src/PackedArray.c	39;"	d	file:
PACKEDARRAY_IMPL_CASE_I	external/splinterdb/src/PackedArray.c	41;"	d	file:
PACKEDARRAY_IMPL_CASE_I	external/splinterdb/src/PackedArray.c	42;"	d	file:
PACKEDARRAY_IMPL_CASE_I	external/splinterdb/src/PackedArray.c	44;"	d	file:
PACKEDARRAY_IMPL_CASE_I	external/splinterdb/src/PackedArray.c	45;"	d	file:
PACKEDARRAY_IMPL_CASE_I	external/splinterdb/src/PackedArray.c	47;"	d	file:
PACKEDARRAY_IMPL_CASE_I	external/splinterdb/src/PackedArray.c	48;"	d	file:
PACKEDARRAY_IMPL_CASE_I	external/splinterdb/src/PackedArray.c	50;"	d	file:
PACKEDARRAY_IMPL_CASE_I	external/splinterdb/src/PackedArray.c	51;"	d	file:
PACKEDARRAY_IMPL_CASE_I	external/splinterdb/src/PackedArray.c	53;"	d	file:
PACKEDARRAY_IMPL_CASE_I	external/splinterdb/src/PackedArray.c	54;"	d	file:
PACKEDARRAY_IMPL_CASE_I	external/splinterdb/src/PackedArray.c	56;"	d	file:
PACKEDARRAY_IMPL_CASE_I	external/splinterdb/src/PackedArray.c	57;"	d	file:
PACKEDARRAY_IMPL_CASE_I	external/splinterdb/src/PackedArray.c	59;"	d	file:
PACKEDARRAY_IMPL_CASE_I	external/splinterdb/src/PackedArray.c	60;"	d	file:
PACKEDARRAY_IMPL_CASE_I	external/splinterdb/src/PackedArray.c	62;"	d	file:
PACKEDARRAY_IMPL_CASE_I	external/splinterdb/src/PackedArray.c	63;"	d	file:
PACKEDARRAY_IMPL_CASE_I	external/splinterdb/src/PackedArray.c	65;"	d	file:
PACKEDARRAY_IMPL_CASE_I	external/splinterdb/src/PackedArray.c	66;"	d	file:
PACKEDARRAY_IMPL_CASE_I	external/splinterdb/src/PackedArray.c	68;"	d	file:
PACKEDARRAY_IMPL_CASE_I	external/splinterdb/src/PackedArray.c	69;"	d	file:
PACKEDARRAY_IMPL_CASE_I	external/splinterdb/src/PackedArray.c	71;"	d	file:
PACKEDARRAY_IMPL_CASE_I	external/splinterdb/src/PackedArray.c	72;"	d	file:
PACKEDARRAY_IMPL_CASE_I	external/splinterdb/src/PackedArray.c	74;"	d	file:
PACKEDARRAY_IMPL_CASE_I	external/splinterdb/src/PackedArray.c	75;"	d	file:
PACKEDARRAY_IMPL_CASE_I	external/splinterdb/src/PackedArray.c	77;"	d	file:
PACKEDARRAY_IMPL_CASE_I	external/splinterdb/src/PackedArray.c	78;"	d	file:
PACKEDARRAY_IMPL_CASE_I	external/splinterdb/src/PackedArray.c	80;"	d	file:
PACKEDARRAY_IMPL_CASE_I	external/splinterdb/src/PackedArray.c	81;"	d	file:
PACKEDARRAY_IMPL_CASE_I	external/splinterdb/src/PackedArray.c	83;"	d	file:
PACKEDARRAY_IMPL_CASE_I	external/splinterdb/src/PackedArray.c	84;"	d	file:
PACKEDARRAY_IMPL_CASE_I	external/splinterdb/src/PackedArray.c	86;"	d	file:
PACKEDARRAY_IMPL_CASE_I	external/splinterdb/src/PackedArray.c	87;"	d	file:
PACKEDARRAY_IMPL_CASE_I	external/splinterdb/src/PackedArray.c	89;"	d	file:
PACKEDARRAY_IMPL_CASE_I	external/splinterdb/src/PackedArray.c	90;"	d	file:
PACKEDARRAY_IMPL_CASE_I	external/splinterdb/src/PackedArray.c	92;"	d	file:
PACKEDARRAY_IMPL_CASE_I	external/splinterdb/src/PackedArray.c	93;"	d	file:
PACKEDARRAY_IMPL_CASE_I	external/splinterdb/src/PackedArray.c	95;"	d	file:
PACKEDARRAY_IMPL_CASE_I	external/splinterdb/src/PackedArray.c	96;"	d	file:
PACKEDARRAY_IMPL_CASE_I	external/splinterdb/src/PackedArray.c	98;"	d	file:
PACKEDARRAY_IMPL_CASE_I	external/splinterdb/src/PackedArray.c	99;"	d	file:
PACKEDARRAY_IMPL_MASK	external/splinterdb/src/PackedArray.c	136;"	d	file:
PACKEDARRAY_IMPL_PACK_CASE_BREAK	external/splinterdb/src/PackedArray.c	142;"	d	file:
PACKEDARRAY_IMPL_START_BIT	external/splinterdb/src/PackedArray.c	133;"	d	file:
PACKEDARRAY_JOIN	external/splinterdb/src/PackedArray.c	18;"	d	file:
PACKEDARRAY_JOIN_	external/splinterdb/src/PackedArray.c	19;"	d	file:
PACKEDARRAY_JOIN__	external/splinterdb/src/PackedArray.c	20;"	d	file:
PACKEDARRAY_SELF	external/splinterdb/src/PackedArray.c	12;"	d	file:
PAGE_TYPE_BRANCH	external/splinterdb/src/allocator.h	/^   PAGE_TYPE_BRANCH,$/;"	e	enum:page_type
PAGE_TYPE_FILTER	external/splinterdb/src/allocator.h	/^   PAGE_TYPE_FILTER,$/;"	e	enum:page_type
PAGE_TYPE_FIRST	external/splinterdb/src/allocator.h	/^   PAGE_TYPE_FIRST   = 1,$/;"	e	enum:page_type
PAGE_TYPE_INVALID	external/splinterdb/src/allocator.h	/^   PAGE_TYPE_INVALID = 0,$/;"	e	enum:page_type
PAGE_TYPE_LOG	external/splinterdb/src/allocator.h	/^   PAGE_TYPE_LOG,$/;"	e	enum:page_type
PAGE_TYPE_MEMTABLE	external/splinterdb/src/allocator.h	/^   PAGE_TYPE_MEMTABLE,$/;"	e	enum:page_type
PAGE_TYPE_MISC	external/splinterdb/src/allocator.h	/^   PAGE_TYPE_MISC, \/\/ Used mainly as a testing hook, for cache access testing.$/;"	e	enum:page_type
PAGE_TYPE_SUPERBLOCK	external/splinterdb/src/allocator.h	/^   PAGE_TYPE_SUPERBLOCK,$/;"	e	enum:page_type
PAGE_TYPE_TRUNK	external/splinterdb/src/allocator.h	/^   PAGE_TYPE_TRUNK   = PAGE_TYPE_FIRST,$/;"	e	enum:page_type
PARALLELPERF	external/splinterdb/scripts/list_test.py	/^PARALLELPERF = 'parallelperf'$/;"	v
PC_ERROR	include/partitioned_counter.h	27;"	d
PC_ERROR	other_filters/cqf/include/partitioned_counter.h	36;"	d
PERF	external/splinterdb/scripts/list_test.py	/^PERF = 'perf'$/;"	v
PIVOT_KEY_PREFIX_LEN	external/splinterdb/src/trunk.c	8534;"	d	file:
PIVOT_STATS_BYTES_AS_STR	external/splinterdb/src/btree.c	3406;"	d	file:
PLATFORM	external/splinterdb/Makefile	/^PLATFORM = linux$/;"	m
PLATFORM_CACHELINE_ALIGNED	external/splinterdb/src/platform_linux/platform_types.h	42;"	d
PLATFORM_CACHELINE_SIZE	external/splinterdb/src/platform_linux/platform.h	/^_Static_assert(sizeof(cache_aligned_uint32) == PLATFORM_CACHELINE_SIZE,$/;"	v
PLATFORM_CACHELINE_SIZE	external/splinterdb/src/platform_linux/platform.h	/^_Static_assert(sizeof(cache_aligned_uint64) == PLATFORM_CACHELINE_SIZE,$/;"	v
PLATFORM_CACHELINE_SIZE	external/splinterdb/src/platform_linux/platform_types.h	41;"	d
PLATFORM_CR	external/splinterdb/src/platform_linux/platform_inline.h	258;"	d
PLATFORM_DIR	external/splinterdb/Makefile	/^PLATFORM_DIR = platform_$(PLATFORM)$/;"	m
PLATFORM_H	external/splinterdb/src/platform_linux/platform.h	5;"	d
PLATFORM_IO_SYS	external/splinterdb/Makefile	/^PLATFORM_IO_SYS = $(OBJDIR)\/$(SRCDIR)\/$(PLATFORM_DIR)\/laio.o$/;"	m
PLATFORM_IPC_OBJS_PERMS	external/splinterdb/src/platform_linux/shmem.c	137;"	d	file:
PLATFORM_LINUX	external/splinterdb/src/platform_linux/platform.h	30;"	d
PLATFORM_LINUX_INLINE_H	external/splinterdb/src/platform_linux/platform_inline.h	5;"	d
PLATFORM_LINUX_TYPES_H	external/splinterdb/src/platform_linux/platform_types.h	5;"	d
PLATFORM_SYS	external/splinterdb/Makefile	/^PLATFORM_SYS = $(OBJDIR)\/$(SRCDIR)\/$(PLATFORM_DIR)\/platform.o \\$/;"	m
PL_SPLINTER_TRACE_H	external/splinterdb/src/platform_linux/pl_splinter_trace.h	9;"	d
POISON_FROM_PLATFORM_IMPLEMENTATION	external/splinterdb/src/platform_linux/laio.c	20;"	d	file:
POSITIVE_INFINITY	external/splinterdb/src/data_internal.h	/^   POSITIVE_INFINITY = 3,$/;"	e	enum:__anon37
POSITIVE_INFINITY_KEY	external/splinterdb/src/data_internal.h	43;"	d
PRECHECKIN	external/splinterdb/scripts/list_test.py	/^PRECHECKIN = 'precheckin'$/;"	v
PREFIX	other_filters/acf/Makefile	/^PREFIX=\/usr\/local$/;"	m
PREFIX	other_filters/acfsim/Makefile	/^PREFIX=\/usr\/local$/;"	m
PREFIX	other_filters/cf/Makefile	/^PREFIX=\/usr\/local$/;"	m
PRINT_DEBUG	other_filters/cqf/src/gqf.c	49;"	d	file:
PRINT_DEBUG	other_filters/cqf/src/gqf.c	51;"	d	file:
PRINT_DEBUG	src/gqf.c	43;"	d	file:
PRINT_DEBUG	src/gqf.c	45;"	d	file:
PRINT_DEBUG	src/gqf_backup.c	40;"	d	file:
PRINT_DEBUG	src/gqf_backup.c	42;"	d	file:
PROCESS_PRIVATE_HEAP_ID	external/splinterdb/src/platform_linux/platform.h	231;"	d
PROFFLAGS	other_filters/taf/src/Makefile	/^PROFFLAGS=-pg -O0 -lm$/;"	m
PROFILE	Makefile	/^	PROFILE=-pg -no-pie # for bug in gprof.$/;"	m
PROFILE	other_filters/cqf/Makefile	/^	PROFILE=-pg -no-pie # for bug in gprof.$/;"	m
PROFILE	other_filters/taf/Makefile	/^	PROFILE=-pg -no-pie # for bug in gprof.$/;"	m
PROLIX	external/splinterdb/Makefile	/^   PROLIX=@ >\/dev\/null echo$/;"	m
PROLIX	external/splinterdb/Makefile	/^   PROLIX=@echo$/;"	m
PUBLIC_PLATFORM_H	external/splinterdb/include/splinterdb/public_platform.h	36;"	d
PUBLIC_PLATFORM_H	external/splinterdb/include/splinterdb/public_platform.h	41;"	d
PackedTable	other_filters/acf/src/packedtable.h	/^  explicit PackedTable(size_t num) : num_buckets_(num) {$/;"	f	class:cuckoofilter::PackedTable
PackedTable	other_filters/acf/src/packedtable.h	/^class PackedTable {$/;"	c	namespace:cuckoofilter
PackedTable	other_filters/acfsim/src/packedtable.h	/^  explicit PackedTable(size_t num) : num_buckets_(num) {$/;"	f	class:cuckoofilter::PackedTable
PackedTable	other_filters/acfsim/src/packedtable.h	/^class PackedTable {$/;"	c	namespace:cuckoofilter
PackedTable	other_filters/cf/src/packedtable.h	/^  explicit PackedTable(size_t num) : num_buckets_(num) {$/;"	f	class:cuckoofilter::PackedTable
PackedTable	other_filters/cf/src/packedtable.h	/^class PackedTable {$/;"	c	namespace:cuckoofilter
Parent_io_handle	external/splinterdb/tests/functional/io_apis_test.c	/^platform_io_handle *Parent_io_handle = NULL;$/;"	v
PermEncoding	other_filters/acf/src/permencoding.h	/^  PermEncoding() {$/;"	f	class:cuckoofilter::PermEncoding
PermEncoding	other_filters/acf/src/permencoding.h	/^class PermEncoding {$/;"	c	namespace:cuckoofilter
PermEncoding	other_filters/acfsim/src/permencoding.h	/^  PermEncoding() {$/;"	f	class:cuckoofilter::PermEncoding
PermEncoding	other_filters/acfsim/src/permencoding.h	/^class PermEncoding {$/;"	c	namespace:cuckoofilter
PermEncoding	other_filters/cf/src/permencoding.h	/^  PermEncoding() {$/;"	f	class:cuckoofilter::PermEncoding
PermEncoding	other_filters/cf/src/permencoding.h	/^class PermEncoding {$/;"	c	namespace:cuckoofilter
Platform_default_log_handle	external/splinterdb/src/platform_linux/platform.c	/^platform_log_handle *Platform_default_log_handle = NULL;$/;"	v
Platform_error_log_handle	external/splinterdb/src/platform_linux/platform.c	/^platform_log_handle *Platform_error_log_handle   = NULL;$/;"	v
PrintBucket	other_filters/acf/src/packedtable.h	/^  void PrintBucket(const size_t i) const {$/;"	f	class:cuckoofilter::PackedTable
PrintBucket	other_filters/acfsim/src/packedtable.h	/^  void PrintBucket(const size_t i) const {$/;"	f	class:cuckoofilter::PackedTable
PrintBucket	other_filters/cf/src/packedtable.h	/^  void PrintBucket(const size_t i) const {$/;"	f	class:cuckoofilter::PackedTable
PrintTags	other_filters/acf/src/packedtable.h	/^  void PrintTags(uint32_t tags[4]) const {$/;"	f	class:cuckoofilter::PackedTable
PrintTags	other_filters/acfsim/src/packedtable.h	/^  void PrintTags(uint32_t tags[4]) const {$/;"	f	class:cuckoofilter::PackedTable
PrintTags	other_filters/cf/src/packedtable.h	/^  void PrintTags(uint32_t tags[4]) const {$/;"	f	class:cuckoofilter::PackedTable
PrintUtil	other_filters/acf/src/printutil.h	/^class PrintUtil {$/;"	c	namespace:cuckoofilter
PrintUtil	other_filters/acfsim/src/printutil.h	/^class PrintUtil {$/;"	c	namespace:cuckoofilter
PrintUtil	other_filters/cf/src/printutil.h	/^class PrintUtil {$/;"	c	namespace:cuckoofilter
QF	include/gqf.h	/^	typedef quotient_filter QF;$/;"	t
QF	include/gqf_int.h	/^	typedef quotient_filter QF;$/;"	t
QF	other_filters/cqf/include/gqf.h	/^	typedef quotient_filter QF;$/;"	t
QF	other_filters/cqf/include/gqf_int.h	/^	typedef quotient_filter QF;$/;"	t
QFI_INVALID	include/gqf.h	259;"	d
QFI_INVALID	other_filters/cqf/include/gqf.h	249;"	d
QF_BITS_PER_SLOT	include/gqf_int.h	21;"	d
QF_BITS_PER_SLOT	other_filters/cqf/include/gqf_int.h	30;"	d
QF_BLOCK_OFFSET_BITS	include/gqf_int.h	24;"	d
QF_BLOCK_OFFSET_BITS	other_filters/cqf/include/gqf_int.h	33;"	d
QF_COULDNT_LOCK	include/gqf.h	138;"	d
QF_COULDNT_LOCK	other_filters/cqf/include/gqf.h	134;"	d
QF_DOESNT_EXIST	include/gqf.h	139;"	d
QF_DOESNT_EXIST	other_filters/cqf/include/gqf.h	135;"	d
QF_FLAGS	src/test_lltable_throughput.c	21;"	d	file:
QF_HASH_DEFAULT	include/gqf.h	/^		QF_HASH_DEFAULT,$/;"	e	enum:qf_hashmode
QF_HASH_DEFAULT	other_filters/cqf/include/gqf.h	/^		QF_HASH_DEFAULT,$/;"	e	enum:qf_hashmode
QF_HASH_INVERTIBLE	include/gqf.h	/^		QF_HASH_INVERTIBLE,$/;"	e	enum:qf_hashmode
QF_HASH_INVERTIBLE	other_filters/cqf/include/gqf.h	/^		QF_HASH_INVERTIBLE,$/;"	e	enum:qf_hashmode
QF_HASH_NONE	include/gqf.h	/^		QF_HASH_NONE$/;"	e	enum:qf_hashmode
QF_HASH_NONE	other_filters/cqf/include/gqf.h	/^		QF_HASH_NONE$/;"	e	enum:qf_hashmode
QF_INVALID	include/gqf.h	258;"	d
QF_INVALID	other_filters/cqf/include/gqf.h	248;"	d
QF_KEY_IS_HASH	include/gqf.h	63;"	d
QF_KEY_IS_HASH	other_filters/cqf/include/gqf.h	70;"	d
QF_METADATA_WORDS_PER_BLOCK	include/gqf_int.h	27;"	d
QF_METADATA_WORDS_PER_BLOCK	other_filters/cqf/include/gqf_int.h	36;"	d
QF_NO_LOCK	include/gqf.h	57;"	d
QF_NO_LOCK	other_filters/cqf/include/gqf.h	64;"	d
QF_NO_SPACE	include/gqf.h	137;"	d
QF_NO_SPACE	other_filters/cqf/include/gqf.h	133;"	d
QF_SLOTS_PER_BLOCK	include/gqf_int.h	26;"	d
QF_SLOTS_PER_BLOCK	other_filters/cqf/include/gqf_int.h	35;"	d
QF_TRY_ONCE_LOCK	include/gqf.h	58;"	d
QF_TRY_ONCE_LOCK	other_filters/cqf/include/gqf.h	65;"	d
QF_USEFILE_READ_ONLY	include/gqf_file.h	19;"	d
QF_USEFILE_READ_ONLY	other_filters/cqf/include/gqf_file.h	28;"	d
QF_USEFILE_READ_WRITE	include/gqf_file.h	20;"	d
QF_USEFILE_READ_WRITE	other_filters/cqf/include/gqf_file.h	29;"	d
QF_WAIT_FOR_LOCK	include/gqf.h	59;"	d
QF_WAIT_FOR_LOCK	other_filters/cqf/include/gqf.h	66;"	d
QFi	include/gqf.h	/^	typedef quotient_filter_iterator QFi;$/;"	t
QFi	other_filters/cqf/include/gqf.h	/^	typedef quotient_filter_iterator QFi;$/;"	t
RAND	external/splinterdb/tests/functional/cache_test.c	/^   enum { MONO, RAND, HOP } type;$/;"	e	enum:__anon47::__anon48	file:
RANKSELECT_H	other_filters/taf/src/bit_util.h	6;"	d
RANK_SELECT_EMPTY	other_filters/taf/src/exaf.c	120;"	d	file:
RANK_SELECT_EMPTY	other_filters/taf/src/rsqf.c	67;"	d	file:
RANK_SELECT_EMPTY	other_filters/taf/src/splinter_taf.c	222;"	d	file:
RANK_SELECT_EMPTY	other_filters/taf/src/taf.c	110;"	d	file:
RANK_SELECT_EMPTY	other_filters/taf/src/taf.cc	142;"	d	file:
RANK_SELECT_EMPTY	other_filters/taf/src/taf_sim.c	111;"	d	file:
RANK_SELECT_EMPTY	other_filters/taf/src/utaf.c	94;"	d	file:
RANK_SELECT_EMPTY	src/taf.cc	1553;"	d	file:
RANK_SELECT_OVERFLOW	other_filters/taf/src/exaf.c	121;"	d	file:
RANK_SELECT_OVERFLOW	other_filters/taf/src/rsqf.c	68;"	d	file:
RANK_SELECT_OVERFLOW	other_filters/taf/src/splinter_taf.c	223;"	d	file:
RANK_SELECT_OVERFLOW	other_filters/taf/src/taf.c	111;"	d	file:
RANK_SELECT_OVERFLOW	other_filters/taf/src/taf.cc	143;"	d	file:
RANK_SELECT_OVERFLOW	other_filters/taf/src/taf_sim.c	112;"	d	file:
RANK_SELECT_OVERFLOW	other_filters/taf/src/utaf.c	95;"	d	file:
RANK_SELECT_OVERFLOW	src/taf.cc	1554;"	d	file:
RC_ALLOCATOR_BASE_OFFSET	external/splinterdb/src/rc_allocator.c	25;"	d	file:
RC_ALLOCATOR_MAX_ROOT_IDS	external/splinterdb/src/rc_allocator.h	22;"	d
RC_ALLOCATOR_META_PAGE_CSUM_SEED	external/splinterdb/src/rc_allocator.c	19;"	d	file:
READER_BATCH_SIZE	external/splinterdb/tests/functional/cache_test.c	572;"	d	file:
REMAINDER_WORD	other_filters/cqf/src/gqf.c	702;"	d	file:
REMAINDER_WORD	src/gqf.c	745;"	d	file:
REMAINDER_WORD	src/gqf_backup.c	742;"	d	file:
REM_SIZE	other_filters/taf/src/constants.h	10;"	d
REM_SIZE	src/taf.cc	1160;"	d	file:
REQUIRE_STRING_LITERAL	external/splinterdb/src/util.h	340;"	d
RFUN	other_filters/cqf/src/bm.c	25;"	d	file:
RFUN	other_filters/cqf/src/bm.c	28;"	d	file:
RFUN	other_filters/cqf/src/zipf.c	12;"	d	file:
RFUN	other_filters/cqf/src/zipf.c	15;"	d	file:
RFUN	src/bm.c	17;"	d	file:
RFUN	src/bm.c	20;"	d	file:
RFUN	src/zipf.c	12;"	d	file:
RFUN	src/zipf.c	15;"	d	file:
ROTL32	other_filters/taf/src/murmur3.c	33;"	d	file:
ROTL32	src/taf.cc	344;"	d	file:
ROTL64	other_filters/taf/src/murmur3.c	34;"	d	file:
ROTL64	src/taf.cc	345;"	d	file:
ROUNDDOWN	external/splinterdb/src/platform_linux/platform_types.h	179;"	d
ROUNDUP	external/splinterdb/src/platform_linux/platform_types.h	178;"	d
ROUND_TO_PAGE_GROUP	other_filters/cqf/src/gqf_file.c	352;"	d	file:
ROUND_TO_PAGE_GROUP	src/gqf_file.c	343;"	d	file:
ROUTING_FPS_PER_PAGE	external/splinterdb/src/routing_filter.c	23;"	d	file:
ROUTING_NOT_FOUND	external/splinterdb/src/routing_filter.h	26;"	d
RSEED	other_filters/cqf/src/bm.c	26;"	d	file:
RSEED	other_filters/cqf/src/bm.c	29;"	d	file:
RSEED	other_filters/cqf/src/zipf.c	13;"	d	file:
RSEED	other_filters/cqf/src/zipf.c	16;"	d	file:
RSEED	src/bm.c	18;"	d	file:
RSEED	src/bm.c	21;"	d	file:
RSEED	src/zipf.c	13;"	d	file:
RSEED	src/zipf.c	16;"	d	file:
RSQF	other_filters/taf/src/rsqf.h	/^} RSQF;$/;"	t	typeref:struct:rsqf_t
RSQFBlock	other_filters/taf/src/rsqf.h	/^} RSQFBlock;$/;"	t	typeref:struct:rsqf_block_t
RSQF_H	other_filters/taf/src/rsqf.h	2;"	d
RSQF_SEED	other_filters/taf/src/rsqf.c	412;"	d	file:
RadixSort	external/splinterdb/src/routing_filter.c	/^RadixSort(uint32 *pData,$/;"	f	file:
ReadBucket	other_filters/acf/src/packedtable.h	/^  inline void ReadBucket(const size_t i, uint32_t tags[4]) const {$/;"	f	class:cuckoofilter::PackedTable
ReadBucket	other_filters/acfsim/src/packedtable.h	/^  inline void ReadBucket(const size_t i, uint32_t tags[4]) const {$/;"	f	class:cuckoofilter::PackedTable
ReadBucket	other_filters/cf/src/packedtable.h	/^  inline void ReadBucket(const size_t i, uint32_t tags[4]) const {$/;"	f	class:cuckoofilter::PackedTable
ReadTag	other_filters/acf/src/mirroredtable.h	/^		inline uint64_t ReadTag(const size_t i, const size_t j) const {$/;"	f	class:cuckoofilter::MirroredTable
ReadTag	other_filters/acf/src/singletable.h	/^  inline uint32_t ReadTag(const size_t i, const size_t j) const {$/;"	f	class:cuckoofilter::SingleTable
ReadTag	other_filters/acfsim/src/mirroredtable.h	/^		inline uint64_t ReadTag(const size_t i, const size_t j) const {$/;"	f	class:cuckoofilter::MirroredTable
ReadTag	other_filters/acfsim/src/singletable.h	/^  inline uint32_t ReadTag(const size_t i, const size_t j) const {$/;"	f	class:cuckoofilter::SingleTable
ReadTag	other_filters/cf/src/singletable.h	/^  inline uint32_t ReadTag(const size_t i, const size_t j) const {$/;"	f	class:cuckoofilter::SingleTable
Remote_elt	other_filters/taf/src/splinter_taf.h	/^} Remote_elt ;$/;"	t	typeref:struct:remote_elt_t
Remote_elt	other_filters/taf/src/taf.h	/^} Remote_elt ;$/;"	t	typeref:struct:remote_elt_t
Remote_elt	other_filters/taf/src/taf_sim.h	/^} Remote_elt ;$/;"	t	typeref:struct:remote_elt_t
Remote_elt	other_filters/taf/src/utaf.h	/^} Remote_elt ;$/;"	t	typeref:struct:remote_elt_t
Remote_elt	src/taf.cc	/^} Remote_elt ;$/;"	t	typeref:struct:remote_elt_t	file:
SAMPLE_SIZE	other_filters/acf/benchmarks/bulk-insert-and-query.cc	/^const size_t SAMPLE_SIZE = 1000 * 1000;$/;"	v
SAMPLE_SIZE	other_filters/acf/benchmarks/conext-figure5.cc	/^const size_t SAMPLE_SIZE = 1000 * 1000;$/;"	v
SAMPLE_SIZE	other_filters/cf/benchmarks/bulk-insert-and-query.cc	/^const size_t SAMPLE_SIZE = 1000 * 1000;$/;"	v
SAMPLE_SIZE	other_filters/cf/benchmarks/conext-figure5.cc	/^const size_t SAMPLE_SIZE = 1000 * 1000;$/;"	v
SAVE_DIR	external/splinterdb/scripts/run_ycsb.py	/^SAVE_DIR = ARGS.output_dir$/;"	v
SB_STATE_COMPACTED	external/splinterdb/src/trunk.c	/^   SB_STATE_COMPACTED, \/\/ compacted subbundles are always index$/;"	e	enum:trunk_subbundle_state	file:
SB_STATE_INVALID	external/splinterdb/src/trunk.c	/^   SB_STATE_INVALID = 0,$/;"	e	enum:trunk_subbundle_state	file:
SB_STATE_UNCOMPACTED_INDEX	external/splinterdb/src/trunk.c	/^   SB_STATE_UNCOMPACTED_INDEX,$/;"	e	enum:trunk_subbundle_state	file:
SB_STATE_UNCOMPACTED_LEAF	external/splinterdb/src/trunk.c	/^   SB_STATE_UNCOMPACTED_LEAF,$/;"	e	enum:trunk_subbundle_state	file:
SEC_TO_MSEC	external/splinterdb/src/platform_linux/platform.h	125;"	d
SEC_TO_NSEC	external/splinterdb/src/platform_linux/platform.h	127;"	d
SEC_TO_USEC	external/splinterdb/src/platform_linux/platform.h	126;"	d
SEL_CODE_BYTES	other_filters/taf/src/splinter_taf.h	13;"	d
SEL_CODE_BYTES	other_filters/taf/src/taf.h	13;"	d
SEL_CODE_BYTES	other_filters/taf/src/taf_sim.h	13;"	d
SEL_CODE_BYTES	src/taf.cc	24;"	d	file:
SEL_CODE_LEN	other_filters/taf/src/splinter_taf.h	12;"	d
SEL_CODE_LEN	other_filters/taf/src/taf.h	12;"	d
SEL_CODE_LEN	other_filters/taf/src/taf_sim.h	12;"	d
SEL_CODE_LEN	src/taf.cc	23;"	d	file:
SEMISEQPERF	external/splinterdb/scripts/list_test.py	/^SEMISEQPERF = 'semiseqperf'$/;"	v
SEQPERF	external/splinterdb/scripts/list_test.py	/^SEQPERF = 'seqperf'$/;"	v
SET	other_filters/taf/src/macros.h	34;"	d
SET	src/taf.cc	240;"	d	file:
SET_ARRAY_INDEX_TO_STRINGIFY	external/splinterdb/src/util.h	19;"	d
SGLIB_ARRAY_BINARY_SEARCH	include/sglib.h	158;"	d
SGLIB_ARRAY_ELEMENTS_EXCHANGER	include/sglib.h	1934;"	d
SGLIB_ARRAY_HEAP_SORT	include/sglib.h	50;"	d
SGLIB_ARRAY_QUICK_SORT	include/sglib.h	89;"	d
SGLIB_ARRAY_SINGLE_HEAP_SORT	include/sglib.h	46;"	d
SGLIB_ARRAY_SINGLE_QUICK_SORT	include/sglib.h	85;"	d
SGLIB_BIN_TREE_MAP_ON_ELEMENTS	include/sglib.h	772;"	d
SGLIB_BIN_TREE_MAP_ON_ELEMENTS_POSTORDER	include/sglib.h	780;"	d
SGLIB_BIN_TREE_MAP_ON_ELEMENTS_PREORDER	include/sglib.h	776;"	d
SGLIB_DEFINE_ARRAY_SORTING_FUNCTIONS	include/sglib.h	816;"	d
SGLIB_DEFINE_ARRAY_SORTING_PROTOTYPES	include/sglib.h	811;"	d
SGLIB_DEFINE_DL_LIST_FUNCTIONS	include/sglib.h	1329;"	d
SGLIB_DEFINE_DL_LIST_PROTOTYPES	include/sglib.h	1299;"	d
SGLIB_DEFINE_HASHED_CONTAINER_FUNCTIONS	include/sglib.h	1047;"	d
SGLIB_DEFINE_HASHED_CONTAINER_PROTOTYPES	include/sglib.h	1027;"	d
SGLIB_DEFINE_HASHED_TABLE_FUNCTIONS	include/sglib.h	959;"	d
SGLIB_DEFINE_HASHED_TABLE_PROTOTYPES	include/sglib.h	944;"	d
SGLIB_DEFINE_HEAP_FUNCTIONS	include/sglib.h	896;"	d
SGLIB_DEFINE_HEAP_PROTOTYPES	include/sglib.h	885;"	d
SGLIB_DEFINE_LIST_FUNCTIONS	include/sglib.h	1141;"	d
SGLIB_DEFINE_LIST_PROTOTYPES	include/sglib.h	1118;"	d
SGLIB_DEFINE_LIST_PROTOTYPES	src/test_bulk.c	/^SGLIB_DEFINE_LIST_PROTOTYPES(ilist, ILIST_COMPARATOR, next)$/;"	f
SGLIB_DEFINE_LIST_PROTOTYPES	src/test_deletions.c	/^SGLIB_DEFINE_LIST_PROTOTYPES(ilist, ILIST_COMPARATOR, next)$/;"	f
SGLIB_DEFINE_LIST_PROTOTYPES	src/test_fill_varied_throughput.c	/^SGLIB_DEFINE_LIST_PROTOTYPES(ilist, ILIST_COMPARATOR, next)$/;"	f
SGLIB_DEFINE_LIST_PROTOTYPES	src/test_hash_accesses.c	/^SGLIB_DEFINE_LIST_PROTOTYPES(ilist, ILIST_COMPARATOR, next)$/;"	f
SGLIB_DEFINE_LIST_PROTOTYPES	src/test_merge.c	/^SGLIB_DEFINE_LIST_PROTOTYPES(ilist, ILIST_COMPARATOR, next)$/;"	f
SGLIB_DEFINE_LIST_PROTOTYPES	src/test_near_full.c	/^SGLIB_DEFINE_LIST_PROTOTYPES(ilist, ILIST_COMPARATOR, next)$/;"	f
SGLIB_DEFINE_LIST_PROTOTYPES	src/test_throughput_old.c	/^SGLIB_DEFINE_LIST_PROTOTYPES(ilist, ILIST_COMPARATOR, next)$/;"	f
SGLIB_DEFINE_LIST_PROTOTYPES	src/test_unit_old.c	/^SGLIB_DEFINE_LIST_PROTOTYPES(ilist, ILIST_COMPARATOR, next)$/;"	f
SGLIB_DEFINE_LIST_PROTOTYPES	src/test_whitelist.c	/^SGLIB_DEFINE_LIST_PROTOTYPES(ilist, ILIST_COMPARATOR, next)$/;"	f
SGLIB_DEFINE_QUEUE_FUNCTIONS	include/sglib.h	847;"	d
SGLIB_DEFINE_QUEUE_PROTOTYPES	include/sglib.h	835;"	d
SGLIB_DEFINE_RBTREE_FUNCTIONS	include/sglib.h	1920;"	d
SGLIB_DEFINE_RBTREE_FUNCTIONS_GENERAL	include/sglib.h	1606;"	d
SGLIB_DEFINE_RBTREE_PROTOTYPES	include/sglib.h	1893;"	d
SGLIB_DEFINE_SORTED_LIST_FUNCTIONS	include/sglib.h	1232;"	d
SGLIB_DEFINE_SORTED_LIST_PROTOTYPES	include/sglib.h	1211;"	d
SGLIB_DL_LIST_ADD	include/sglib.h	561;"	d
SGLIB_DL_LIST_ADD_AFTER	include/sglib.h	539;"	d
SGLIB_DL_LIST_ADD_AFTER_IF_NOT_MEMBER	include/sglib.h	581;"	d
SGLIB_DL_LIST_ADD_BEFORE	include/sglib.h	550;"	d
SGLIB_DL_LIST_ADD_BEFORE_IF_NOT_MEMBER	include/sglib.h	577;"	d
SGLIB_DL_LIST_ADD_IF_NOT_MEMBER	include/sglib.h	585;"	d
SGLIB_DL_LIST_CONCAT	include/sglib.h	589;"	d
SGLIB_DL_LIST_DELETE	include/sglib.h	599;"	d
SGLIB_DL_LIST_DELETE_IF_MEMBER	include/sglib.h	611;"	d
SGLIB_DL_LIST_FIND_MEMBER	include/sglib.h	632;"	d
SGLIB_DL_LIST_GET_FIRST	include/sglib.h	662;"	d
SGLIB_DL_LIST_GET_LAST	include/sglib.h	671;"	d
SGLIB_DL_LIST_IS_MEMBER	include/sglib.h	623;"	d
SGLIB_DL_LIST_LEN	include/sglib.h	680;"	d
SGLIB_DL_LIST_MAP_ON_ELEMENTS	include/sglib.h	641;"	d
SGLIB_DL_LIST_REVERSE	include/sglib.h	693;"	d
SGLIB_DL_LIST_SORT	include/sglib.h	651;"	d
SGLIB_FAST_NUMERIC_COMPARATOR	include/sglib.h	1939;"	d
SGLIB_FAST_REVERSE_NUMERIC_COMPARATOR	include/sglib.h	1940;"	d
SGLIB_HASH_TAB_ADD_IF_NOT_MEMBER	include/sglib.h	274;"	d
SGLIB_HASH_TAB_FIND_MEMBER	include/sglib.h	285;"	d
SGLIB_HASH_TAB_INIT	include/sglib.h	269;"	d
SGLIB_HASH_TAB_IS_MEMBER	include/sglib.h	301;"	d
SGLIB_HASH_TAB_MAP_ON_ELEMENTS	include/sglib.h	316;"	d
SGLIB_HASH_TAB_SHIFT_CONSTANT	include/sglib.h	1949;"	d
SGLIB_HEAP_ADD	include/sglib.h	230;"	d
SGLIB_HEAP_ADD_NEXT	include/sglib.h	221;"	d
SGLIB_HEAP_DELETE	include/sglib.h	241;"	d
SGLIB_HEAP_DELETE_FIRST	include/sglib.h	235;"	d
SGLIB_HEAP_FIRST_ELEMENT	include/sglib.h	220;"	d
SGLIB_HEAP_INIT	include/sglib.h	217;"	d
SGLIB_HEAP_IS_EMPTY	include/sglib.h	218;"	d
SGLIB_HEAP_IS_FULL	include/sglib.h	219;"	d
SGLIB_LIST_ADD	include/sglib.h	332;"	d
SGLIB_LIST_ADD_IF_NOT_MEMBER	include/sglib.h	354;"	d
SGLIB_LIST_CONCAT	include/sglib.h	337;"	d
SGLIB_LIST_DELETE	include/sglib.h	347;"	d
SGLIB_LIST_DELETE_IF_MEMBER	include/sglib.h	363;"	d
SGLIB_LIST_FIND_MEMBER	include/sglib.h	378;"	d
SGLIB_LIST_IS_MEMBER	include/sglib.h	372;"	d
SGLIB_LIST_LEN	include/sglib.h	395;"	d
SGLIB_LIST_MAP_ON_ELEMENTS	include/sglib.h	384;"	d
SGLIB_LIST_REVERSE	include/sglib.h	402;"	d
SGLIB_LIST_SORT	include/sglib.h	413;"	d
SGLIB_MAX_TREE_DEEP	include/sglib.h	1945;"	d
SGLIB_NUMERIC_COMPARATOR	include/sglib.h	1941;"	d
SGLIB_QUEUE_ADD	include/sglib.h	198;"	d
SGLIB_QUEUE_ADD_NEXT	include/sglib.h	194;"	d
SGLIB_QUEUE_DELETE	include/sglib.h	206;"	d
SGLIB_QUEUE_DELETE_FIRST	include/sglib.h	202;"	d
SGLIB_QUEUE_FIRST_ELEMENT	include/sglib.h	193;"	d
SGLIB_QUEUE_INIT	include/sglib.h	190;"	d
SGLIB_QUEUE_IS_EMPTY	include/sglib.h	191;"	d
SGLIB_QUEUE_IS_FULL	include/sglib.h	192;"	d
SGLIB_REVERSE_NUMERIC_COMPARATOR	include/sglib.h	1942;"	d
SGLIB_SAFE_NUMERIC_COMPARATOR	include/sglib.h	1937;"	d
SGLIB_SAFE_REVERSE_NUMERIC_COMPARATOR	include/sglib.h	1938;"	d
SGLIB_SORTED_LIST_ADD	include/sglib.h	460;"	d
SGLIB_SORTED_LIST_ADD_IF_NOT_MEMBER	include/sglib.h	468;"	d
SGLIB_SORTED_LIST_DELETE	include/sglib.h	481;"	d
SGLIB_SORTED_LIST_DELETE_IF_MEMBER	include/sglib.h	485;"	d
SGLIB_SORTED_LIST_FIND_MEMBER	include/sglib.h	497;"	d
SGLIB_SORTED_LIST_FIND_MEMBER_OR_PLACE	include/sglib.h	512;"	d
SGLIB_SORTED_LIST_IS_MEMBER	include/sglib.h	505;"	d
SGLIB_SORTED_LIST_LEN	include/sglib.h	519;"	d
SGLIB_SORTED_LIST_MAP_ON_ELEMENTS	include/sglib.h	523;"	d
SGLIB___ARRAY_HEAP_DOWN	include/sglib.h	61;"	d
SGLIB___BIN_TREE_FIND_MEMBER	include/sglib.h	784;"	d
SGLIB___BIN_TREE_MAP_ON_ELEMENTS	include/sglib.h	728;"	d
SGLIB___DL_LIST_CREATE_FROM_LIST	include/sglib.h	715;"	d
SGLIB___DL_LIST_CREATE_SINGLETON	include/sglib.h	534;"	d
SGLIB___DL_LIST_GENERIC_ADD_IF_NOT_MEMBER	include/sglib.h	565;"	d
SGLIB___GET_VALUE	include/sglib.h	1932;"	d
SGLIB___RBTREE_FIX_DELETION_DISCREPANCY	include/sglib.h	1485;"	d
SGLIB___RBTREE_FIX_INSERTION_DISCREPANCY	include/sglib.h	1446;"	d
SGLIB___SET_VALUE	include/sglib.h	1933;"	d
SHA1Hash	other_filters/acf/src/hashutil.cc	/^std::string HashUtil::SHA1Hash(const char *inbuf, size_t in_length) {$/;"	f	class:cuckoofilter::HashUtil
SHA1Hash	other_filters/acfsim/src/hashutil.cc	/^std::string HashUtil::SHA1Hash(const char *inbuf, size_t in_length) {$/;"	f	class:cuckoofilter::HashUtil
SHA1Hash	other_filters/cf/src/hashutil.cc	/^std::string HashUtil::SHA1Hash(const char *inbuf, size_t in_length) {$/;"	f	class:cuckoofilter::HashUtil
SHARD_UNMAPPED	external/splinterdb/src/shard_log.c	20;"	d	file:
SHARD_WAIT	external/splinterdb/src/shard_log.c	19;"	d	file:
SHM_LARGE_FRAG_SIZE	external/splinterdb/src/platform_linux/shmem.c	67;"	d	file:
SHM_LARGE_FRAG_SIZE	external/splinterdb/src/platform_linux/shmem.c	69;"	d	file:
SHM_NUM_LARGE_FRAGS	external/splinterdb/src/platform_linux/shmem.c	77;"	d	file:
SHOULD_TRACE	external/splinterdb/src/rc_allocator.c	35;"	d	file:
SHOW_PCT_PROGRESS	external/splinterdb/tests/unit/splinter_test.c	67;"	d	file:
SIZEOF_STRING_LITERAL	external/splinterdb/src/util.h	342;"	d
SIZE_TO_STR_LEN	external/splinterdb/src/util.h	387;"	d
SLICE_CREATE_LOCAL_COPY	external/splinterdb/src/util.h	276;"	d
SLOW_UNIT_TESTSRC	external/splinterdb/Makefile	/^SLOW_UNIT_TESTSRC = splinter_test.c config_parse_test.c large_inserts_stress_test.c splinterdb_forked_child_test.c$/;"	m
SLOW_UNIT_TESTSRC_FILTER	external/splinterdb/Makefile	/^SLOW_UNIT_TESTSRC_FILTER := $(foreach slowf,$(SLOW_UNIT_TESTSRC), $(UNIT_TESTSDIR)\/$(slowf))$/;"	m
SPLINTERDB_LOOKUP_BUFSIZE	external/splinterdb/include/splinterdb/splinterdb.h	222;"	d
SPLINTERDB_SHMEM_MAGIC	external/splinterdb/src/platform_linux/shmem.c	15;"	d	file:
SPLINTERPATH	Makefile	/^	SPLINTERPATH=external\/splinterdb\/build\/debug\/lib$/;"	m
SPLINTERPATH	Makefile	/^	SPLINTERPATH=external\/splinterdb\/build\/release\/lib$/;"	m
SPLINTERPATH	other_filters/acf/Makefile	/^	SPLINTERPATH=..\/..\/external\/splinterdb\/btree$/;"	m
SPLINTERPATH	other_filters/cf/Makefile	/^	SPLINTERPATH=..\/..\/external\/splinterdb\/btree$/;"	m
SPLINTERPATH	other_filters/cqf/Makefile	/^	SPLINTERPATH=..\/..\/external\/splinterdb\/btree$/;"	m
SPLINTERPATH	other_filters/taf/src/Makefile	/^	SPLINTERPATH=..\/..\/..\/external\/splinterdb\/btree$/;"	m
SPLINTERPERF	external/splinterdb/scripts/list_test.py	/^SPLINTERPERF='splinterperf'$/;"	v
SPLINTER_DEBUG	external/splinterdb/src/platform_linux/platform.h	39;"	d
SPLINTER_DEVICE_SIZE_MB	external/splinterdb/tests/functional/io_apis_test.c	82;"	d	file:
SPLTARGETS	Makefile	/^SPLTARGETS=test_splinter_ops test_splinter_inserts test_splinter_inserts_2 test_splinter_throughput test_splinter_zipfian_histogram test_splinter_adversarial$/;"	m
SRC	external/splinterdb/Makefile	/^SRC := $(call rwildcard, $(SRCDIR), *.c)$/;"	m
SRC	other_filters/acf/benchmarks/Makefile	/^SRC = ..\/src\/hashutil.cc$/;"	m
SRC	other_filters/cf/benchmarks/Makefile	/^SRC = ..\/src\/hashutil.cc$/;"	m
SRCDIR	external/splinterdb/Makefile	/^SRCDIR               = src$/;"	m
SRQ_INDEX_AVAILABLE	external/splinterdb/src/srq.h	18;"	d
SRQ_MAX_ENTRIES	external/splinterdb/src/srq.h	16;"	d
STATELEN	other_filters/cqf/src/bm.c	/^	int STATELEN;$/;"	m	struct:uniform_online_state	file:
STATELEN	src/bm.c	/^	int STATELEN;$/;"	m	struct:uniform_online_state	file:
STATUS_BAD_PARAM	external/splinterdb/src/platform_linux/platform_types.h	29;"	d
STATUS_BUSY	external/splinterdb/src/platform_linux/platform_types.h	24;"	d
STATUS_INVALID_STATE	external/splinterdb/src/platform_linux/platform_types.h	30;"	d
STATUS_IO_ERROR	external/splinterdb/src/platform_linux/platform_types.h	32;"	d
STATUS_IS_EQ	external/splinterdb/src/platform_linux/platform_inline.h	/^STATUS_IS_EQ(const platform_status s1, const platform_status s2)$/;"	f
STATUS_IS_NE	external/splinterdb/src/platform_linux/platform_inline.h	/^STATUS_IS_NE(const platform_status s1, const platform_status s2)$/;"	f
STATUS_LIMIT_EXCEEDED	external/splinterdb/src/platform_linux/platform_types.h	25;"	d
STATUS_NOTSUP	external/splinterdb/src/platform_linux/platform_types.h	33;"	d
STATUS_NOT_FOUND	external/splinterdb/src/platform_linux/platform_types.h	31;"	d
STATUS_NO_MEMORY	external/splinterdb/src/platform_linux/platform_types.h	23;"	d
STATUS_NO_PERMISSION	external/splinterdb/src/platform_linux/platform_types.h	28;"	d
STATUS_NO_SPACE	external/splinterdb/src/platform_linux/platform_types.h	26;"	d
STATUS_OK	external/splinterdb/src/platform_linux/platform_types.h	22;"	d
STATUS_TEST_FAILED	external/splinterdb/src/platform_linux/platform_types.h	34;"	d
STATUS_TIMEDOUT	external/splinterdb/src/platform_linux/platform_types.h	27;"	d
STRINGIFY	external/splinterdb/src/platform_linux/platform_types.h	69;"	d
STRINGIFY_VALUE	external/splinterdb/src/platform_linux/platform_types.h	70;"	d
STRING_EQUALS_LITERAL	external/splinterdb/src/util.h	344;"	d
SUB_BLOCKS_PER_BLOCK	other_filters/cf/example/test_ext_throughput.cc	19;"	d	file:
SUB_BLOCKS_PER_BLOCK	other_filters/cqf/src/test_adversarial.cc	95;"	d	file:
SUB_BLOCKS_PER_BLOCK	other_filters/cqf/src/test_ext_throughput.cc	104;"	d	file:
SUB_BLOCKS_PER_BLOCK	src/taf.cc	21;"	d	file:
SUB_BLOCKS_PER_BLOCK	src/test_ext_churn.cc	87;"	d	file:
SUB_BLOCKS_PER_BLOCK	src/test_ext_inc_throughput.cc	181;"	d	file:
SUB_BLOCKS_PER_BLOCK	src/test_ext_throughput.cc	181;"	d	file:
SUB_BLOCKS_PER_BLOCK	src/test_zipf_throughput.cc	143;"	d	file:
SUB_BLOCK_SIZE	other_filters/cf/example/test_ext_throughput.cc	18;"	d	file:
SUB_BLOCK_SIZE	other_filters/cqf/src/test_adversarial.cc	94;"	d	file:
SUB_BLOCK_SIZE	other_filters/cqf/src/test_ext_throughput.cc	103;"	d	file:
SUB_BLOCK_SIZE	src/taf.cc	20;"	d	file:
SUB_BLOCK_SIZE	src/test_ext_churn.cc	86;"	d	file:
SUB_BLOCK_SIZE	src/test_ext_inc_throughput.cc	180;"	d	file:
SUB_BLOCK_SIZE	src/test_ext_throughput.cc	180;"	d	file:
SUB_BLOCK_SIZE	src/test_zipf_throughput.cc	142;"	d	file:
SUCCESS	external/splinterdb/src/platform_linux/platform.h	/^SUCCESS(const platform_status s)$/;"	f
SYNC_LU	external/splinterdb/tests/functional/splinter_test.c	/^   SYNC_LU = 0,$/;"	e	enum:lookup_type	file:
Setnode	other_filters/taf/src/set.h	/^} Setnode;$/;"	t	typeref:struct:setnode_t
Setnode	src/taf.cc	/^} Setnode;$/;"	t	typeref:struct:setnode_t	file:
SimdBlockFilter	other_filters/acf/src/simd-block.h	/^  SimdBlockFilter(SimdBlockFilter&& that)$/;"	f	class:SimdBlockFilter
SimdBlockFilter	other_filters/acf/src/simd-block.h	/^SimdBlockFilter<HashFamily>::SimdBlockFilter(const int log_heap_space)$/;"	f	class:SimdBlockFilter
SimdBlockFilter	other_filters/acf/src/simd-block.h	/^class SimdBlockFilter {$/;"	c
SimdBlockFilter	other_filters/acfsim/src/simd-block.h	/^  SimdBlockFilter(SimdBlockFilter&& that)$/;"	f	class:SimdBlockFilter
SimdBlockFilter	other_filters/acfsim/src/simd-block.h	/^SimdBlockFilter<HashFamily>::SimdBlockFilter(const int log_heap_space)$/;"	f	class:SimdBlockFilter
SimdBlockFilter	other_filters/acfsim/src/simd-block.h	/^class SimdBlockFilter {$/;"	c
SimdBlockFilter	other_filters/cf/src/simd-block.h	/^  SimdBlockFilter(SimdBlockFilter&& that)$/;"	f	class:SimdBlockFilter
SimdBlockFilter	other_filters/cf/src/simd-block.h	/^SimdBlockFilter<HashFamily>::SimdBlockFilter(const int log_heap_space)$/;"	f	class:SimdBlockFilter
SimdBlockFilter	other_filters/cf/src/simd-block.h	/^class SimdBlockFilter {$/;"	c
SimpleTabulation	other_filters/acf/src/hashutil.h	/^  SimpleTabulation() {$/;"	f	class:cuckoofilter::SimpleTabulation
SimpleTabulation	other_filters/acf/src/hashutil.h	/^class SimpleTabulation {$/;"	c	namespace:cuckoofilter
SimpleTabulation	other_filters/acfsim/src/hashutil.h	/^  SimpleTabulation() {$/;"	f	class:cuckoofilter::SimpleTabulation
SimpleTabulation	other_filters/acfsim/src/hashutil.h	/^class SimpleTabulation {$/;"	c	namespace:cuckoofilter
SimpleTabulation	other_filters/cf/src/hashutil.h	/^  SimpleTabulation() {$/;"	f	class:cuckoofilter::SimpleTabulation
SimpleTabulation	other_filters/cf/src/hashutil.h	/^class SimpleTabulation {$/;"	c	namespace:cuckoofilter
SingleTable	other_filters/acf/src/singletable.h	/^  explicit SingleTable(const size_t num) : num_buckets_(num) {$/;"	f	class:cuckoofilter::SingleTable
SingleTable	other_filters/acf/src/singletable.h	/^class SingleTable {$/;"	c	namespace:cuckoofilter
SingleTable	other_filters/acfsim/src/singletable.h	/^  explicit SingleTable(const size_t num) : num_buckets_(num) {$/;"	f	class:cuckoofilter::SingleTable
SingleTable	other_filters/acfsim/src/singletable.h	/^class SingleTable {$/;"	c	namespace:cuckoofilter
SingleTable	other_filters/cf/src/singletable.h	/^  explicit SingleTable(const size_t num) : num_buckets_(num) {$/;"	f	class:cuckoofilter::SingleTable
SingleTable	other_filters/cf/src/singletable.h	/^class SingleTable {$/;"	c	namespace:cuckoofilter
Size	other_filters/acf/src/cuckoofilter.h	/^				 size_t Size() const { return num_items_; }$/;"	f	class:cuckoofilter::CuckooFilter
Size	other_filters/acfsim/src/cuckoofilter.h	/^				 size_t Size() const { return num_items_; }$/;"	f	class:cuckoofilter::CuckooFilter
Size	other_filters/cf/src/cuckoofilter.h	/^  size_t Size() const { return num_items_; }$/;"	f	class:cuckoofilter::CuckooFilter
SizeInBytes	other_filters/acf/src/cuckoofilter.h	/^				 size_t SizeInBytes() const { return table_->SizeInBytes(); }$/;"	f	class:cuckoofilter::CuckooFilter
SizeInBytes	other_filters/acf/src/mirroredtable.h	/^		size_t SizeInBytes() const { $/;"	f	class:cuckoofilter::MirroredTable
SizeInBytes	other_filters/acf/src/packedtable.h	/^  size_t SizeInBytes() const { $/;"	f	class:cuckoofilter::PackedTable
SizeInBytes	other_filters/acf/src/simd-block.h	/^  uint64_t SizeInBytes() const { return sizeof(Bucket) * (1ull << log_num_buckets_); }$/;"	f	class:SimdBlockFilter
SizeInBytes	other_filters/acf/src/singletable.h	/^  size_t SizeInBytes() const { $/;"	f	class:cuckoofilter::SingleTable
SizeInBytes	other_filters/acfsim/src/cuckoofilter.h	/^				 size_t SizeInBytes() const { return table_->SizeInBytes(); }$/;"	f	class:cuckoofilter::CuckooFilter
SizeInBytes	other_filters/acfsim/src/mirroredtable.h	/^		size_t SizeInBytes() const { $/;"	f	class:cuckoofilter::MirroredTable
SizeInBytes	other_filters/acfsim/src/packedtable.h	/^  size_t SizeInBytes() const { $/;"	f	class:cuckoofilter::PackedTable
SizeInBytes	other_filters/acfsim/src/simd-block.h	/^  uint64_t SizeInBytes() const { return sizeof(Bucket) * (1ull << log_num_buckets_); }$/;"	f	class:SimdBlockFilter
SizeInBytes	other_filters/acfsim/src/singletable.h	/^  size_t SizeInBytes() const { $/;"	f	class:cuckoofilter::SingleTable
SizeInBytes	other_filters/cf/src/cuckoofilter.h	/^  size_t SizeInBytes() const { return table_->SizeInBytes(); }$/;"	f	class:cuckoofilter::CuckooFilter
SizeInBytes	other_filters/cf/src/packedtable.h	/^  size_t SizeInBytes() const { $/;"	f	class:cuckoofilter::PackedTable
SizeInBytes	other_filters/cf/src/simd-block.h	/^  uint64_t SizeInBytes() const { return sizeof(Bucket) * (1ull << log_num_buckets_); }$/;"	f	class:SimdBlockFilter
SizeInBytes	other_filters/cf/src/singletable.h	/^  size_t SizeInBytes() const { $/;"	f	class:cuckoofilter::SingleTable
SizeInTags	other_filters/acf/src/mirroredtable.h	/^		size_t SizeInTags() const { $/;"	f	class:cuckoofilter::MirroredTable
SizeInTags	other_filters/acf/src/packedtable.h	/^  size_t SizeInTags() const { $/;"	f	class:cuckoofilter::PackedTable
SizeInTags	other_filters/acf/src/singletable.h	/^  size_t SizeInTags() const { $/;"	f	class:cuckoofilter::SingleTable
SizeInTags	other_filters/acfsim/src/mirroredtable.h	/^		size_t SizeInTags() const { $/;"	f	class:cuckoofilter::MirroredTable
SizeInTags	other_filters/acfsim/src/packedtable.h	/^  size_t SizeInTags() const { $/;"	f	class:cuckoofilter::PackedTable
SizeInTags	other_filters/acfsim/src/singletable.h	/^  size_t SizeInTags() const { $/;"	f	class:cuckoofilter::SingleTable
SizeInTags	other_filters/cf/src/packedtable.h	/^  size_t SizeInTags() const { $/;"	f	class:cuckoofilter::PackedTable
SizeInTags	other_filters/cf/src/singletable.h	/^  size_t SizeInTags() const { $/;"	f	class:cuckoofilter::SingleTable
SortPair	other_filters/acf/src/packedtable.h	/^  inline void SortPair(uint32_t &a, uint32_t &b) {$/;"	f	class:cuckoofilter::PackedTable
SortPair	other_filters/acfsim/src/packedtable.h	/^  inline void SortPair(uint32_t &a, uint32_t &b) {$/;"	f	class:cuckoofilter::PackedTable
SortPair	other_filters/cf/src/packedtable.h	/^  inline void SortPair(uint32_t &a, uint32_t &b) {$/;"	f	class:cuckoofilter::PackedTable
SortTags	other_filters/acf/src/packedtable.h	/^  inline void SortTags(uint32_t *tags) {$/;"	f	class:cuckoofilter::PackedTable
SortTags	other_filters/acfsim/src/packedtable.h	/^  inline void SortTags(uint32_t *tags) {$/;"	f	class:cuckoofilter::PackedTable
SortTags	other_filters/cf/src/packedtable.h	/^  inline void SortTags(uint32_t *tags) {$/;"	f	class:cuckoofilter::PackedTable
Statistics	other_filters/acf/benchmarks/bulk-insert-and-query.cc	/^struct Statistics {$/;"	s	file:
Statistics	other_filters/cf/benchmarks/bulk-insert-and-query.cc	/^struct Statistics {$/;"	s	file:
StatisticsTableHeader	other_filters/acf/benchmarks/bulk-insert-and-query.cc	/^string StatisticsTableHeader(int type_width, int find_percent_count) {$/;"	f
StatisticsTableHeader	other_filters/cf/benchmarks/bulk-insert-and-query.cc	/^string StatisticsTableHeader(int type_width, int find_percent_count) {$/;"	f
Status	other_filters/acf/src/cuckoofilter.h	/^	enum Status {$/;"	g	namespace:cuckoofilter
Status	other_filters/acfsim/src/cuckoofilter.h	/^	enum Status {$/;"	g	namespace:cuckoofilter
Status	other_filters/cf/src/cuckoofilter.h	/^enum Status {$/;"	g	namespace:cuckoofilter
SuperFastHash	other_filters/acf/src/hashutil.cc	/^uint32_t HashUtil::SuperFastHash(const std::string &s) {$/;"	f	class:cuckoofilter::HashUtil
SuperFastHash	other_filters/acf/src/hashutil.cc	/^uint32_t HashUtil::SuperFastHash(const void *buf, size_t len) {$/;"	f	class:cuckoofilter::HashUtil
SuperFastHash	other_filters/acfsim/src/hashutil.cc	/^uint32_t HashUtil::SuperFastHash(const std::string &s) {$/;"	f	class:cuckoofilter::HashUtil
SuperFastHash	other_filters/acfsim/src/hashutil.cc	/^uint32_t HashUtil::SuperFastHash(const void *buf, size_t len) {$/;"	f	class:cuckoofilter::HashUtil
SuperFastHash	other_filters/cf/src/hashutil.cc	/^uint32_t HashUtil::SuperFastHash(const std::string &s) {$/;"	f	class:cuckoofilter::HashUtil
SuperFastHash	other_filters/cf/src/hashutil.cc	/^uint32_t HashUtil::SuperFastHash(const void *buf, size_t len) {$/;"	f	class:cuckoofilter::HashUtil
TAF	other_filters/taf/src/splinter_taf.h	/^} TAF;$/;"	t	typeref:struct:taf_t
TAF	other_filters/taf/src/taf.h	/^} TAF;$/;"	t	typeref:struct:taf_t
TAF	other_filters/taf/src/taf_sim.h	/^} TAF;$/;"	t	typeref:struct:taf_t
TAF	src/taf.cc	/^} TAF;$/;"	t	typeref:struct:taf_t	file:
TAFBlock	other_filters/taf/src/splinter_taf.h	/^} TAFBlock;$/;"	t	typeref:struct:taf_block_t
TAFBlock	other_filters/taf/src/taf.h	/^} TAFBlock;$/;"	t	typeref:struct:taf_block_t
TAFBlock	other_filters/taf/src/taf_sim.h	/^} TAFBlock;$/;"	t	typeref:struct:taf_block_t
TAFBlock	src/taf.cc	/^} TAFBlock;$/;"	t	typeref:struct:taf_block_t	file:
TAF_H	other_filters/taf/src/splinter_taf.h	2;"	d
TAF_H	other_filters/taf/src/taf.h	2;"	d
TAF_H	other_filters/taf/src/taf_sim.h	2;"	d
TAF_H	src/taf.cc	1383;"	d	file:
TAF_MODE_ARCD_OVERWRITE	other_filters/taf/src/splinter_taf.h	17;"	d
TAF_MODE_ARCD_OVERWRITE	other_filters/taf/src/taf.h	17;"	d
TAF_MODE_ARCD_OVERWRITE	other_filters/taf/src/taf_sim.h	17;"	d
TAF_MODE_ARCD_OVERWRITE	src/taf.cc	1390;"	d	file:
TAF_MODE_NORMAL	other_filters/taf/src/splinter_taf.h	16;"	d
TAF_MODE_NORMAL	other_filters/taf/src/taf.h	16;"	d
TAF_MODE_NORMAL	other_filters/taf/src/taf_sim.h	16;"	d
TAF_MODE_NORMAL	src/taf.cc	1389;"	d	file:
TAF_SEED	other_filters/taf/src/splinter_taf.c	797;"	d	file:
TAF_SEED	other_filters/taf/src/taf.c	683;"	d	file:
TAF_SEED	other_filters/taf/src/taf.cc	715;"	d	file:
TAF_SEED	other_filters/taf/src/taf_sim.c	683;"	d	file:
TAF_SEED	src/taf.cc	2125;"	d	file:
TASK_MAX_HOOKS	external/splinterdb/src/task.h	93;"	d
TASK_TYPE_FIRST	external/splinterdb/src/task.h	/^   TASK_TYPE_FIRST = TASK_TYPE_MEMTABLE$/;"	e	enum:task_type
TASK_TYPE_INVALID	external/splinterdb/src/task.h	/^   TASK_TYPE_INVALID = 0,$/;"	e	enum:task_type
TASK_TYPE_MEMTABLE	external/splinterdb/src/task.h	/^   TASK_TYPE_MEMTABLE,$/;"	e	enum:task_type
TASK_TYPE_NORMAL	external/splinterdb/src/task.h	/^   TASK_TYPE_NORMAL,$/;"	e	enum:task_type
TEMP_STRINGIFY	external/splinterdb/include/splinterdb/public_platform.h	34;"	d
TEMP_STRINGIFY	external/splinterdb/include/splinterdb/public_platform.h	42;"	d
TEMP_XSTRINGIFY	external/splinterdb/include/splinterdb/public_platform.h	33;"	d
TEMP_XSTRINGIFY	external/splinterdb/include/splinterdb/public_platform.h	43;"	d
TERMINAL_EXTENT_ADDR	external/splinterdb/src/mini_allocator.c	44;"	d	file:
TEST	other_filters/acf/Makefile	/^TEST = test_splinter_ops test_splinter_throughput test_splinter_zipfian_histogram test_splinter_adversarial test_micro_throughput #test_acf_ops #test_churn test_ext_throughput #test test_fp test_bits test_micro test_fill_varied_throughput$/;"	m
TEST	other_filters/acfsim/Makefile	/^TEST = test_micro_write test_micro_read #test_splinter_ops test_splinter_throughput test_splinter_zipfian_histogram test_splinter_adversarial test_micro_throughput #test_acf_ops #test_churn test_ext_throughput #test test_fp test_bits test_micro test_fill_varied_throughput$/;"	m
TEST	other_filters/cf/Makefile	/^TEST = test test_hash_accesses test_splinter_ops test_splinter_throughput test_splinter_zipfian_histogram test_splinter_adversarial test_micro_throughput test_micro_super #test_ext_throughput$/;"	m
TESTSRC	external/splinterdb/Makefile	/^TESTSRC := $(COMMON_TESTSRC) $(FUNCTIONAL_TESTSRC) $(UNIT_TESTSRC)$/;"	m
TESTS_DIR	external/splinterdb/Makefile	/^TESTS_DIR            = tests$/;"	m
TEST_CNT	external/splinterdb/scripts/list_test.py	/^TEST_CNT = 1$/;"	v
TEST_CONFIG_DEFAULT_CACHE_SIZE_GB	external/splinterdb/tests/config.c	21;"	d	file:
TEST_CONFIG_DEFAULT_DISK_SIZE_GB	external/splinterdb/tests/config.c	20;"	d	file:
TEST_CONFIG_DEFAULT_EXTENT_SIZE	external/splinterdb/tests/config.h	29;"	d
TEST_CONFIG_DEFAULT_FANOUT	external/splinterdb/tests/config.c	27;"	d	file:
TEST_CONFIG_DEFAULT_FILTER_INDEX_SIZE	external/splinterdb/tests/config.c	26;"	d	file:
TEST_CONFIG_DEFAULT_IO_ASYNC_Q_DEPTH	external/splinterdb/tests/config.c	16;"	d	file:
TEST_CONFIG_DEFAULT_KEY_SIZE	external/splinterdb/tests/config.c	34;"	d	file:
TEST_CONFIG_DEFAULT_MAX_BRANCHES_PER_NODE	external/splinterdb/tests/config.c	28;"	d	file:
TEST_CONFIG_DEFAULT_MEMTABLE_CAPACITY_MB	external/splinterdb/tests/config.c	22;"	d	file:
TEST_CONFIG_DEFAULT_MESSAGE_SIZE	external/splinterdb/tests/config.c	35;"	d	file:
TEST_CONFIG_DEFAULT_NUM_INSERTS	external/splinterdb/tests/config.c	39;"	d	file:
TEST_CONFIG_DEFAULT_NUM_MEMTABLE_BG_THREADS	external/splinterdb/tests/config.c	46;"	d	file:
TEST_CONFIG_DEFAULT_NUM_NORMAL_BG_THREADS	external/splinterdb/tests/config.c	45;"	d	file:
TEST_CONFIG_DEFAULT_PAGES_PER_EXTENT	external/splinterdb/tests/config.h	25;"	d
TEST_CONFIG_DEFAULT_PAGE_SIZE	external/splinterdb/tests/config.h	23;"	d
TEST_CONFIG_DEFAULT_QUEUE_SCALE_PERCENT	external/splinterdb/tests/config.c	48;"	d	file:
TEST_CONFIG_DEFAULT_SEED	external/splinterdb/tests/config.c	38;"	d	file:
TEST_CONFIG_DEFAULT_SHMEM_SIZE_GB	external/splinterdb/tests/config.c	23;"	d	file:
TEST_CONFIG_MIN_KEY_SIZE	external/splinterdb/tests/config.c	33;"	d	file:
TEST_DB_NAME	external/splinterdb/tests/unit/unit_tests.h	12;"	d
TEST_DB_NAME	other_filters/acf/example/test_acf_ops.cc	22;"	d	file:
TEST_DB_NAME	other_filters/acf/example/test_ext_throughput.cc	17;"	d	file:
TEST_DB_NAME	other_filters/acf/example/test_splinter_adversarial.cc	24;"	d	file:
TEST_DB_NAME	other_filters/acf/example/test_splinter_inc_throughput.cc	22;"	d	file:
TEST_DB_NAME	other_filters/acf/example/test_splinter_ops.cc	19;"	d	file:
TEST_DB_NAME	other_filters/acf/example/test_splinter_throughput.cc	24;"	d	file:
TEST_DB_NAME	other_filters/acf/example/test_splinter_zipfian_histogram.cc	23;"	d	file:
TEST_DB_NAME	other_filters/acfsim/example/test_acf_ops.cc	22;"	d	file:
TEST_DB_NAME	other_filters/acfsim/example/test_ext_throughput.cc	17;"	d	file:
TEST_DB_NAME	other_filters/acfsim/example/test_splinter_adversarial.cc	24;"	d	file:
TEST_DB_NAME	other_filters/acfsim/example/test_splinter_inc_throughput.cc	22;"	d	file:
TEST_DB_NAME	other_filters/acfsim/example/test_splinter_ops.cc	19;"	d	file:
TEST_DB_NAME	other_filters/acfsim/example/test_splinter_throughput.cc	24;"	d	file:
TEST_DB_NAME	other_filters/acfsim/example/test_splinter_zipfian_histogram.cc	23;"	d	file:
TEST_DB_NAME	other_filters/cf/example/test_splinter_adversarial.cc	25;"	d	file:
TEST_DB_NAME	other_filters/cf/example/test_splinter_ops.cc	19;"	d	file:
TEST_DB_NAME	other_filters/cf/example/test_splinter_throughput.cc	24;"	d	file:
TEST_DB_NAME	other_filters/cf/example/test_splinter_zipfian_histogram.cc	24;"	d	file:
TEST_DB_NAME	other_filters/cqf/src/test_splinter_adversarial.c	38;"	d	file:
TEST_DB_NAME	other_filters/cqf/src/test_splinter_ops.c	32;"	d	file:
TEST_DB_NAME	other_filters/cqf/src/test_splinter_throughput.c	37;"	d	file:
TEST_DB_NAME	other_filters/cqf/src/test_splinter_zipfian_histogram.c	36;"	d	file:
TEST_DB_NAME	other_filters/taf/src/splinter_taf.c	27;"	d	file:
TEST_DB_NAME	src/test_splinter_adversarial.c	28;"	d	file:
TEST_DB_NAME	src/test_splinter_inserts.c	23;"	d	file:
TEST_DB_NAME	src/test_splinter_inserts_2.c	23;"	d	file:
TEST_DB_NAME	src/test_splinter_ops.c	23;"	d	file:
TEST_DB_NAME	src/test_splinter_replace_lltable_throughput.c	30;"	d	file:
TEST_DB_NAME	src/test_splinter_throughput.c	28;"	d	file:
TEST_DB_NAME	src/test_splinter_zipfian_histogram.c	27;"	d	file:
TEST_INSERTS_SEQ_KEY_DIFF_START_KEYID_FD	external/splinterdb/tests/unit/large_inserts_stress_test.c	67;"	d	file:
TEST_INSERTS_SEQ_KEY_SAME_START_KEYID_FD	external/splinterdb/tests/unit/large_inserts_stress_test.c	68;"	d	file:
TEST_INSERT_FULLY_PACKED_CONSTANT_VALUE_FD	external/splinterdb/tests/unit/large_inserts_stress_test.c	78;"	d	file:
TEST_INSERT_GRANULARITY	external/splinterdb/tests/functional/splinter_test.c	30;"	d	file:
TEST_INSERT_KEY_LENGTH	external/splinterdb/tests/unit/splinterdb_quick_test.c	52;"	d	file:
TEST_INSERT_SEQ_VALUES_FD	external/splinterdb/tests/unit/large_inserts_stress_test.c	71;"	d	file:
TEST_INSERT_VAL_LENGTH	external/splinterdb/tests/unit/splinterdb_quick_test.c	53;"	d	file:
TEST_KEY_SIZE	external/splinterdb/tests/unit/large_inserts_stress_test.c	26;"	d	file:
TEST_KEY_SIZE	external/splinterdb/tests/unit/splinterdb_forked_child_test.c	30;"	d	file:
TEST_KEY_SIZE	external/splinterdb/tests/unit/splinterdb_stress_test.c	22;"	d	file:
TEST_MAX_ASYNC_INFLIGHT	external/splinterdb/tests/functional/btree_test.c	22;"	d	file:
TEST_MAX_ASYNC_INFLIGHT	external/splinterdb/tests/functional/test_async.h	19;"	d
TEST_MAX_KEY_SIZE	external/splinterdb/tests/unit/limitations_test.c	26;"	d	file:
TEST_MAX_KEY_SIZE	external/splinterdb/tests/unit/splinter_shmem_test.c	19;"	d	file:
TEST_MAX_KEY_SIZE	external/splinterdb/tests/unit/splinterdb_heap_id_mgmt_test.c	27;"	d	file:
TEST_MAX_KEY_SIZE	external/splinterdb/tests/unit/splinterdb_quick_test.c	42;"	d	file:
TEST_MAX_KEY_SIZE	external/splinterdb/tests/unit/task_system_test.c	54;"	d	file:
TEST_MAX_THREADS	external/splinterdb/tests/unit/splinter_shmem_test.c	22;"	d	file:
TEST_MAX_VALUE_SIZE	external/splinterdb/tests/unit/splinterdb_quick_test.c	45;"	d	file:
TEST_NUM_FORKED_PROCS	external/splinterdb/tests/unit/splinterdb_forked_child_test.c	34;"	d	file:
TEST_PERIODIC	external/splinterdb/tests/functional/test.h	/^   TEST_PERIODIC,$/;"	e	enum:test_key_type
TEST_RANDOM	external/splinterdb/tests/functional/test.h	/^   TEST_RANDOM,$/;"	e	enum:test_key_type
TEST_RANGE_GRANULARITY	external/splinterdb/tests/functional/splinter_test.c	31;"	d	file:
TEST_SEMISEQ	external/splinterdb/tests/functional/test.h	/^   TEST_SEMISEQ$/;"	e	enum:test_key_type
TEST_SEQ	external/splinterdb/tests/functional/test.h	/^   TEST_SEQ,$/;"	e	enum:test_key_type
TEST_SPLINTER_SHADOW_H	external/splinterdb/tests/functional/test_splinter_shadow.h	12;"	d
TEST_STUCK_IO_TIMEOUT	external/splinterdb/tests/functional/test.h	28;"	d
TEST_TAF	src/taf.cc	2101;"	d	file:
TEST_VALUE_SIZE	external/splinterdb/tests/unit/large_inserts_stress_test.c	27;"	d	file:
TEST_VALUE_SIZE	external/splinterdb/tests/unit/splinterdb_forked_child_test.c	31;"	d	file:
TEST_VALUE_SIZE	external/splinterdb/tests/unit/splinterdb_stress_test.c	23;"	d	file:
TEST_VERIFY_GRANULARITY	external/splinterdb/tests/unit/splinter_test.c	64;"	d	file:
THOUSAND	external/splinterdb/src/platform_linux/platform.h	116;"	d
THREAD_COUNTS	external/splinterdb/scripts/run_ycsb.py	/^THREAD_COUNTS = ARGS.threads$/;"	v
TOTAL_COUNT	other_filters/cqf/src/test_partitioned_counter.c	/^uint64_t TOTAL_COUNT;$/;"	v
TOTAL_COUNT	src/test_partitioned_counter.c	/^uint64_t TOTAL_COUNT;$/;"	v
TRACESplinter	external/splinterdb/src/platform_linux/pl_splinter_trace.h	15;"	d
TRACE_ADDR	external/splinterdb/src/clockcache.h	17;"	d
TRACE_DEFINE_TOKEN_BUCKETS	external/splinterdb/src/platform_linux/pl_splinter_trace.h	16;"	d
TRACE_DIR	external/splinterdb/scripts/run_ycsb.py	/^TRACE_DIR = ARGS.trace_dir$/;"	v
TRACE_ENTRY	external/splinterdb/src/clockcache.h	18;"	d
TRACE_FILENAMES	external/splinterdb/scripts/run_ycsb.py	/^TRACE_FILENAMES = ARGS.trace_list$/;"	v
TRUE	external/splinterdb/include/splinterdb/platform_linux/public_platform.h	58;"	d
TRUNK_COMPACTION_TYPE_FLUSH	external/splinterdb/src/trunk.c	/^   TRUNK_COMPACTION_TYPE_FLUSH,$/;"	e	enum:trunk_compaction_type	file:
TRUNK_COMPACTION_TYPE_INVALID	external/splinterdb/src/trunk.c	/^   TRUNK_COMPACTION_TYPE_INVALID = 0,$/;"	e	enum:trunk_compaction_type	file:
TRUNK_COMPACTION_TYPE_LEAF_SPLIT	external/splinterdb/src/trunk.c	/^   TRUNK_COMPACTION_TYPE_LEAF_SPLIT,$/;"	e	enum:trunk_compaction_type	file:
TRUNK_COMPACTION_TYPE_MEMTABLE	external/splinterdb/src/trunk.c	/^   TRUNK_COMPACTION_TYPE_MEMTABLE,$/;"	e	enum:trunk_compaction_type	file:
TRUNK_COMPACTION_TYPE_SINGLE_LEAF_SPLIT	external/splinterdb/src/trunk.c	/^   TRUNK_COMPACTION_TYPE_SINGLE_LEAF_SPLIT,$/;"	e	enum:trunk_compaction_type	file:
TRUNK_COMPACTION_TYPE_SPACE_REC	external/splinterdb/src/trunk.c	/^   TRUNK_COMPACTION_TYPE_SPACE_REC,$/;"	e	enum:trunk_compaction_type	file:
TRUNK_EXTRA_PIVOT_KEYS	external/splinterdb/src/trunk.c	104;"	d	file:
TRUNK_INVALID_PIVOT_NO	external/splinterdb/src/trunk.c	106;"	d	file:
TRUNK_MAX_BUNDLES	external/splinterdb/src/trunk.c	61;"	d	file:
TRUNK_MAX_HEIGHT	external/splinterdb/src/trunk.h	29;"	d
TRUNK_MAX_PIVOTS	external/splinterdb/src/trunk.c	60;"	d	file:
TRUNK_MAX_SUBBUNDLES	external/splinterdb/src/trunk.c	62;"	d	file:
TRUNK_MAX_SUBBUNDLE_FILTERS	external/splinterdb/src/trunk.c	63;"	d	file:
TRUNK_MIN_SPACE_RECL	external/splinterdb/src/trunk.c	79;"	d	file:
TRUNK_NUM_MEMTABLES	external/splinterdb/src/trunk.c	50;"	d	file:
TRUNK_PREFETCH_MIN	external/splinterdb/src/trunk.c	71;"	d	file:
TRUNK_RANGE_ITOR_MAX_BRANCHES	external/splinterdb/src/trunk.h	44;"	d
TRUNK_ROOT_LOCK_IDX	external/splinterdb/src/trunk.c	95;"	d	file:
TRUNK_SINGLE_LEAF_THRESHOLD_PCT	external/splinterdb/src/trunk.c	90;"	d	file:
TRUNK_SUPER_CSUM_SEED	external/splinterdb/src/trunk.c	82;"	d	file:
TYPED_ALIGNED_MALLOC	external/splinterdb/src/platform_linux/platform.h	364;"	d
TYPED_ALIGNED_ZALLOC	external/splinterdb/src/platform_linux/platform.h	370;"	d
TYPED_ARRAY_MALLOC	external/splinterdb/src/platform_linux/platform.h	435;"	d
TYPED_ARRAY_ZALLOC	external/splinterdb/src/platform_linux/platform.h	437;"	d
TYPED_FLEXIBLE_STRUCT_MALLOC	external/splinterdb/src/platform_linux/platform.h	418;"	d
TYPED_FLEXIBLE_STRUCT_ZALLOC	external/splinterdb/src/platform_linux/platform.h	422;"	d
TYPED_MALLOC	external/splinterdb/src/platform_linux/platform.h	448;"	d
TYPED_MANUAL_MALLOC	external/splinterdb/src/platform_linux/platform.h	328;"	d
TYPED_MANUAL_ZALLOC	external/splinterdb/src/platform_linux/platform.h	339;"	d
TYPED_ZALLOC	external/splinterdb/src/platform_linux/platform.h	449;"	d
TagFilter	external/splinterdb/scripts/list_test.py	/^class TagFilter(Filter):$/;"	c
TagHash	other_filters/cf/src/cuckoofilter.h	/^  inline uint32_t TagHash(uint32_t hv) const {$/;"	f	class:cuckoofilter::CuckooFilter
Test	external/splinterdb/scripts/list_test.py	/^class Test:$/;"	c
TiB	external/splinterdb/src/platform_linux/platform.h	95;"	d
TiB_TO_B	external/splinterdb/src/platform_linux/platform.h	101;"	d
TraceSplinter	external/splinterdb/src/platform_linux/pl_splinter_trace.h	13;"	d
TraceUrgentSplinter	external/splinterdb/src/platform_linux/pl_splinter_trace.h	14;"	d
Trace_large_frags	external/splinterdb/src/platform_linux/shmem.c	/^static bool Trace_large_frags  = FALSE;$/;"	v	file:
Trace_shmem	external/splinterdb/src/platform_linux/shmem.c	/^static bool Trace_shmem        = FALSE;$/;"	v	file:
Trace_shmem_allocs	external/splinterdb/src/platform_linux/shmem.c	/^static bool Trace_shmem_allocs = FALSE;$/;"	v	file:
Trace_shmem_frees	external/splinterdb/src/platform_linux/shmem.c	/^static bool Trace_shmem_frees  = FALSE;$/;"	v	file:
Tuple	external/splinterdb/scripts/list_test.py	/^from typing import List, Tuple, Dict$/;"	i
TwoIndependentMultiplyShift	other_filters/acf/src/hashutil.h	/^  TwoIndependentMultiplyShift() {$/;"	f	class:cuckoofilter::TwoIndependentMultiplyShift
TwoIndependentMultiplyShift	other_filters/acf/src/hashutil.h	/^class TwoIndependentMultiplyShift {$/;"	c	namespace:cuckoofilter
TwoIndependentMultiplyShift	other_filters/acfsim/src/hashutil.h	/^  TwoIndependentMultiplyShift() {$/;"	f	class:cuckoofilter::TwoIndependentMultiplyShift
TwoIndependentMultiplyShift	other_filters/acfsim/src/hashutil.h	/^class TwoIndependentMultiplyShift {$/;"	c	namespace:cuckoofilter
TwoIndependentMultiplyShift	other_filters/cf/src/hashutil.h	/^  TwoIndependentMultiplyShift() {$/;"	f	class:cuckoofilter::TwoIndependentMultiplyShift
TwoIndependentMultiplyShift	other_filters/cf/src/hashutil.h	/^class TwoIndependentMultiplyShift {$/;"	c	namespace:cuckoofilter
UNITDIR	external/splinterdb/Makefile	/^UNITDIR              = unit$/;"	m
UNIT_TESTBINS	external/splinterdb/Makefile	/^UNIT_TESTBINS=$(UNIT_TESTBIN_SRC:$(TESTS_DIR)\/%_test.c=$(BINDIR)\/%_test)$/;"	m
UNIT_TESTBIN_SRC	external/splinterdb/Makefile	/^UNIT_TESTBIN_SRC=$(filter %_test.c, $(UNIT_TESTSRC))$/;"	m
UNIT_TESTSDIR	external/splinterdb/Makefile	/^UNIT_TESTSDIR        = $(TESTS_DIR)\/$(UNITDIR)$/;"	m
UNIT_TESTSRC	external/splinterdb/Makefile	/^UNIT_TESTSRC := $(call rwildcard, $(UNIT_TESTSDIR), *.c)$/;"	m
UNLIKELY	external/splinterdb/src/platform_linux/platform_types.h	53;"	d
UNSET	other_filters/taf/src/macros.h	35;"	d
UNSET	src/taf.cc	241;"	d	file:
UNUSED_PARAM	external/splinterdb/src/platform_linux/platform_types.h	175;"	d
UNUSED_TYPE	external/splinterdb/src/platform_linux/platform_types.h	176;"	d
USEC_TO_NSEC	external/splinterdb/src/platform_linux/platform.h	121;"	d
USEC_TO_SEC	external/splinterdb/src/platform_linux/platform.h	120;"	d
USER_AVG_VALUE_SIZE	external/splinterdb/examples/splinterdb_wide_values_example.c	21;"	d	file:
USER_KEY	external/splinterdb/src/data_internal.h	/^   USER_KEY          = 2,$/;"	e	enum:__anon37
USER_MAX_KEY_SIZE	external/splinterdb/examples/splinterdb_intro_example.c	20;"	d	file:
USER_MAX_KEY_SIZE	external/splinterdb/examples/splinterdb_iterators_example.c	18;"	d	file:
USER_MAX_KEY_SIZE	external/splinterdb/examples/splinterdb_wide_values_example.c	18;"	d	file:
USER_MAX_VALUE_SIZE	external/splinterdb/examples/splinterdb_wide_values_example.c	22;"	d	file:
USE_EXISTING	external/splinterdb/scripts/run_ycsb.py	/^USE_EXISTING = ARGS.use_existing$/;"	v
USE_EXISTING_HELP	external/splinterdb/scripts/run_ycsb.py	/^                     create a new database and subsequent traces will run on that database."$/;"	v
USE_UNORDERED_MAP	other_filters/cf/example/test_ext_throughput.cc	45;"	d	file:
USE_UNORDERED_MAP	other_filters/cqf/src/test_adversarial.cc	92;"	d	file:
USE_UNORDERED_MAP	other_filters/cqf/src/test_ext_throughput.cc	94;"	d	file:
USE_UNORDERED_MAP	src/test_ext_churn.cc	77;"	d	file:
USE_UNORDERED_MAP	src/test_ext_inc_throughput.cc	171;"	d	file:
USE_UNORDERED_MAP	src/test_ext_throughput.cc	171;"	d	file:
USE_UNORDERED_MAP	src/test_zipf_throughput.cc	133;"	d	file:
UTAF_MAX_SEL	other_filters/taf/src/utaf.h	16;"	d
UTIL_SYS	external/splinterdb/Makefile	/^UTIL_SYS = $(OBJDIR)\/$(SRCDIR)\/util.o $(PLATFORM_SYS)$/;"	m
UpdateTag	other_filters/acf/src/mirroredtable.h	/^		inline void UpdateTag(const size_t i, const size_t j, const uint64_t t) {$/;"	f	class:cuckoofilter::MirroredTable
UpdateTag	other_filters/acfsim/src/mirroredtable.h	/^		inline void UpdateTag(const size_t i, const size_t j, const uint64_t t) {$/;"	f	class:cuckoofilter::MirroredTable
VAL_FMT_LENGTH	external/splinterdb/tests/unit/splinterdb_quick_test.c	51;"	d	file:
VERIFY_RANGE_ENDPOINT_EQUAL	external/splinterdb/tests/functional/test_functionality.c	326;"	d	file:
VERIFY_RANGE_ENDPOINT_LESS	external/splinterdb/tests/functional/test_functionality.c	327;"	d	file:
VERIFY_RANGE_ENDPOINT_MAX	external/splinterdb/tests/functional/test_functionality.c	324;"	d	file:
VERIFY_RANGE_ENDPOINT_MIN	external/splinterdb/tests/functional/test_functionality.c	323;"	d	file:
VERIFY_RANGE_ENDPOINT_RAND	external/splinterdb/tests/functional/test_functionality.c	325;"	d	file:
VFPRINTF_USERMSG	external/splinterdb/tests/unit/ctest.h	329;"	d
Verbose_progress	external/splinterdb/tests/functional/io_apis_test.c	/^bool32 Verbose_progress = FALSE;$/;"	v
VictimCache	other_filters/acf/src/cuckoofilter.h	/^				 } VictimCache;$/;"	t	class:cuckoofilter::CuckooFilter	typeref:struct:cuckoofilter::CuckooFilter::__anon5
VictimCache	other_filters/acfsim/src/cuckoofilter.h	/^				 } VictimCache;$/;"	t	class:cuckoofilter::CuckooFilter	typeref:struct:cuckoofilter::CuckooFilter::__anon7
VictimCache	other_filters/cf/src/cuckoofilter.h	/^  } VictimCache;$/;"	t	class:cuckoofilter::CuckooFilter	typeref:struct:cuckoofilter::CuckooFilter::__anon6
WB_ONSTACK_BUFSIZE	external/splinterdb/tests/unit/writable_buffer_test.c	19;"	d	file:
WRITABLE_BUFFER_DEFAULT_AUTO_BUFFER_SIZE	external/splinterdb/src/util.h	200;"	d
WRITABLE_BUFFER_NULL_LENGTH	external/splinterdb/src/util.h	132;"	d
WWW_PING_SIZE	external/splinterdb/examples/splinterdb_custom_ipv4_addr_sortcmp_example.c	60;"	d	file:
WriteBucket	other_filters/acf/src/packedtable.h	/^  inline void WriteBucket(const size_t i, uint32_t tags[4], bool sort = true) {$/;"	f	class:cuckoofilter::PackedTable
WriteBucket	other_filters/acfsim/src/packedtable.h	/^  inline void WriteBucket(const size_t i, uint32_t tags[4], bool sort = true) {$/;"	f	class:cuckoofilter::PackedTable
WriteBucket	other_filters/cf/src/packedtable.h	/^  inline void WriteBucket(const size_t i, uint32_t tags[4], bool sort = true) {$/;"	f	class:cuckoofilter::PackedTable
WriteTag	other_filters/acf/src/mirroredtable.h	/^		inline void WriteTag(const size_t i, const size_t j, const uint64_t t, const uint64_t key) {$/;"	f	class:cuckoofilter::MirroredTable
WriteTag	other_filters/acf/src/singletable.h	/^  inline void WriteTag(const size_t i, const size_t j, const uint32_t t) {$/;"	f	class:cuckoofilter::SingleTable
WriteTag	other_filters/acfsim/src/mirroredtable.h	/^		inline void WriteTag(const size_t i, const size_t j, const uint64_t t, const uint64_t key) {$/;"	f	class:cuckoofilter::MirroredTable
WriteTag	other_filters/acfsim/src/singletable.h	/^  inline void WriteTag(const size_t i, const size_t j, const uint32_t t) {$/;"	f	class:cuckoofilter::SingleTable
WriteTag	other_filters/cf/src/singletable.h	/^  inline void WriteTag(const size_t i, const size_t j, const uint32_t t) {$/;"	f	class:cuckoofilter::SingleTable
YCSB_DATA_SIZE	external/splinterdb/tests/functional/ycsb_test.c	18;"	d	file:
YCSB_KEY_SIZE	external/splinterdb/tests/functional/ycsb_test.c	17;"	d	file:
ZERO_ARRAY	external/splinterdb/src/platform_linux/platform.h	470;"	d
ZERO_CONTENTS	external/splinterdb/src/platform_linux/platform.h	495;"	d
ZERO_CONTENTS_N	external/splinterdb/src/platform_linux/platform.h	480;"	d
ZERO_STRUCT	external/splinterdb/src/platform_linux/platform.h	536;"	d
ZERO_STRUCT_AT_DECL	external/splinterdb/src/platform_linux/platform.h	554;"	d
ZIPFIAN	include/zipf.h	/^typedef struct zipfian const *ZIPFIAN;$/;"	t
ZIPFIAN	other_filters/cqf/include/zipf.h	/^typedef struct zipfian const *ZIPFIAN;$/;"	t
ZIPFIAN_QUERIES	other_filters/cqf/src/test_ext_throughput.cc	95;"	d	file:
ZIPF_H	include/zipf.h	2;"	d
ZIPF_H	other_filters/cqf/include/zipf.h	2;"	d
_GNU_SOURCE	other_filters/cqf/src/partitioned_counter.c	10;"	d	file:
_GNU_SOURCE	src/partitioned_counter.c	1;"	d	file:
_GQF_FILE_H_	include/gqf_file.h	2;"	d
_GQF_FILE_H_	other_filters/cqf/include/gqf_file.h	11;"	d
_GQF_H_	include/gqf.h	2;"	d
_GQF_H_	other_filters/cqf/include/gqf.h	11;"	d
_GQF_INT_H_	include/gqf_int.h	2;"	d
_GQF_INT_H_	other_filters/cqf/include/gqf_int.h	11;"	d
_HASHUTIL_H_	include/hashutil.h	2;"	d
_HASHUTIL_H_	other_filters/cqf/include/hashutil.h	11;"	d
_LL_TABLE_H_	include/ll_table.h	2;"	d
_MURMURHASH3_H_	other_filters/taf/src/murmur3.h	9;"	d
_MURMURHASH3_H_	src/taf.cc	292;"	d	file:
_PARTITIONED_COUNTER_H_	include/partitioned_counter.h	2;"	d
_PARTITIONED_COUNTER_H_	other_filters/cqf/include/partitioned_counter.h	11;"	d
_RAND_UTIL_H_	include/rand_util.h	2;"	d
_SGLIB__h_	include/sglib.h	20;"	d
_SPLINTERDB_DEFAULT_DATA_CONFIG_H_	external/splinterdb/include/splinterdb/default_data_config.h	11;"	d
_SPLINTERDB_H_	external/splinterdb/include/splinterdb/splinterdb.h	14;"	d
_SPLINTER_RANDOM_H_	external/splinterdb/tests/functional/random.h	5;"	d
_SPLINTER_TEST_H_	external/splinterdb/tests/functional/splinter_test.h	12;"	d
_SPLINTER_UTIL_H_	external/splinterdb/src/util.h	5;"	d
_SPLINTER_UTIL_H_	include/splinter_util.h	2;"	d
_Static_assert	external/splinterdb/src/platform_linux/platform.h	84;"	d
_TEST_DRIVER_H_	include/test_driver.h	2;"	d
__cplusplus	src/taf.cc	15;"	d	file:
__init__	external/splinterdb/scripts/config_reader.py	/^   def __init__(self):$/;"	m	class:ConfigDB
__init__	external/splinterdb/scripts/list_test.py	/^   def __init__(self, tag: str) -> None:$/;"	m	class:TagFilter
__init__	external/splinterdb/scripts/list_test.py	/^   def __init__(self,$/;"	m	class:Test
__str__	external/splinterdb/scripts/list_test.py	/^   def __str__(self) -> str:$/;"	m	class:Test	file:
_config_set_numerical	external/splinterdb/tests/config.h	192;"	d
_finger_cmp	src/gqf.c	/^static inline int _finger_cmp(uint64_t bits_per_item, uint64_t rema, uint64_t exta, int extlena, uint64_t remb, uint64_t extb, int extlenb) {$/;"	f	file:
_finger_cmp	src/gqf_backup.c	/^static inline int _finger_cmp(uint64_t bits_per_item, uint64_t rema, uint64_t exta, int extlena, uint64_t remb, uint64_t extb, int extlenb) {$/;"	f	file:
_ht_node	src/test_unit.c	/^struct _ht_node {$/;"	s	file:
_ht_node	src/test_unit_old.c	/^struct _ht_node {$/;"	s	file:
_ilist	src/test_bulk.c	/^struct _ilist {$/;"	s	file:
_ilist	src/test_deletions.c	/^struct _ilist {$/;"	s	file:
_ilist	src/test_fill_varied_throughput.c	/^struct _ilist {$/;"	s	file:
_ilist	src/test_hash_accesses.c	/^struct _ilist {$/;"	s	file:
_ilist	src/test_merge.c	/^struct _ilist {$/;"	s	file:
_ilist	src/test_near_full.c	/^struct _ilist {$/;"	s	file:
_ilist	src/test_throughput_old.c	/^struct _ilist {$/;"	s	file:
_ilist	src/test_unit_old.c	/^struct _ilist {$/;"	s	file:
_ilist	src/test_whitelist.c	/^struct _ilist {$/;"	s	file:
_merge_insert	src/gqf.c	/^static inline uint64_t _merge_insert(QF *qf, uint64_t index, uint64_t run, uint64_t rem, uint64_t ext, uint64_t ext_len, uint64_t count) {$/;"	f	file:
_merge_insert	src/gqf_backup.c	/^static inline uint64_t _merge_insert(QF *qf, uint64_t index, uint64_t run, uint64_t rem, uint64_t ext, uint64_t ext_len, uint64_t count) {$/;"	f	file:
_murmur_64	src/hash_table.c	/^uint64_t _murmur_64(const void *key, int len, uint64_t seed) {$/;"	f
_remove	other_filters/cqf/src/gqf.c	/^inline static int _remove(QF *qf, __uint128_t hash, uint64_t count, uint8_t$/;"	f	file:
_remove	src/gqf.c	/^inline static int _remove(QF *qf, uint64_t hash, uint64_t *ret_hash, int *ret_hash_len,  uint8_t runtime_lock)$/;"	f	file:
_remove	src/gqf_backup.c	/^inline static int _remove(QF *qf, uint64_t hash, uint64_t *ret_hash, int *ret_hash_len,  uint8_t runtime_lock)$/;"	f	file:
_select64	other_filters/cqf/src/gqf.c	/^static inline uint64_t _select64(uint64_t x, int k)$/;"	f	file:
_select64	src/gqf.c	/^static inline uint64_t _select64(uint64_t x, int k)$/;"	f	file:
_select64	src/gqf_backup.c	/^static inline uint64_t _select64(uint64_t x, int k)$/;"	f	file:
_set_node	other_filters/acf/example/test.cc	/^struct _set_node {$/;"	s	file:
_set_node	other_filters/acf/example/test_fill_varied_throughput.cc	/^struct _set_node {$/;"	s	file:
_set_node	other_filters/acf/example/test_fp.cc	/^struct _set_node {$/;"	s	file:
_set_node	other_filters/acf/example/test_micro.cc	/^struct _set_node {$/;"	s	file:
_set_node	other_filters/acf/src/cuckoofilter.h	/^struct _set_node {$/;"	s
_set_node	other_filters/acfsim/example/test.cc	/^struct _set_node {$/;"	s	file:
_set_node	other_filters/acfsim/example/test_fill_varied_throughput.cc	/^struct _set_node {$/;"	s	file:
_set_node	other_filters/acfsim/example/test_fp.cc	/^struct _set_node {$/;"	s	file:
_set_node	other_filters/acfsim/example/test_micro.cc	/^struct _set_node {$/;"	s	file:
_set_node	other_filters/acfsim/src/cuckoofilter.h	/^struct _set_node {$/;"	s
_set_node	other_filters/cf/example/test.cc	/^struct _set_node {$/;"	s	file:
_set_node	other_filters/cf/example/test_micro_throughput.cc	/^struct _set_node {$/;"	s	file:
_set_node	other_filters/cqf/src/test_micro_super.c	/^struct _set_node {$/;"	s	file:
_set_node	other_filters/cqf/src/test_micro_throughput.c	/^struct _set_node {$/;"	s	file:
_set_node	other_filters/cqf/src/test_parallel.c	/^struct _set_node {$/;"	s	file:
_set_node	src/test_ext_inc_throughput.cc	/^struct _set_node {$/;"	s	file:
_set_node	src/test_ext_throughput.cc	/^struct _set_node {$/;"	s	file:
_set_node	src/test_lltable_throughput.c	/^struct _set_node {$/;"	s	file:
_set_node	src/test_micro_throughput.c	/^struct _set_node {$/;"	s	file:
_set_node	src/test_micro_write.c	/^struct _set_node {$/;"	s	file:
_set_node	src/test_progress.c	/^struct _set_node {$/;"	s	file:
_splinterdb_lookup_result	external/splinterdb/src/splinterdb.c	/^} _splinterdb_lookup_result;$/;"	t	typeref:struct:__anon45	file:
_test_results_t	include/test_driver.h	/^struct _test_results_t {$/;"	s
a	other_filters/acfsim/src/cuckoofilter.h	/^        uint64_t a;$/;"	m	struct:operation
a	src/test_ext_inc_throughput.cc	/^	int a;$/;"	m	struct:test_struct	file:
a	src/test_ext_throughput.cc	/^	int a;$/;"	m	struct:test_struct	file:
a	src/test_micro_read.c	/^	uint64_t a;$/;"	m	struct:operation	file:
a	src/test_zipf_throughput.cc	/^	int a;$/;"	m	struct:test_struct	file:
abstractmethod	external/splinterdb/scripts/list_test.py	/^from abc import ABC, abstractmethod$/;"	i
accumulate_node_ranks	external/splinterdb/src/btree.c	/^accumulate_node_ranks(const btree_config *cfg,$/;"	f	file:
active_threads_bitmask	external/splinterdb/tests/unit/task_system_test.c	/^   uint64          active_threads_bitmask;$/;"	m	struct:__anon64	file:
adapt	other_filters/taf/src/exaf.c	/^static void adapt(ExAF *filter, elt_t query, int loc, size_t quot, rem_t rem, uint64_t hash, Ext exts[64]) {$/;"	f	file:
adapt	other_filters/taf/src/splinter_taf.c	/^static void adapt(TAF *filter, elt_t query, int loc, size_t quot, uint64_t hash, int sels[64]) {$/;"	f	file:
adapt	other_filters/taf/src/taf.c	/^static void adapt(TAF *filter, elt_t query, int loc, size_t quot, uint64_t hash, int sels[64]) {$/;"	f	file:
adapt	other_filters/taf/src/taf.cc	/^static void adapt(TAF *filter, elt_t query, int loc, size_t quot, uint64_t hash, int sels[64]) {$/;"	f	file:
adapt	other_filters/taf/src/taf_sim.c	/^static void adapt(TAF *filter, elt_t query, int loc, size_t quot, uint64_t hash, int sels[64]) {$/;"	f	file:
adapt	other_filters/taf/src/utaf.c	/^static void adapt(FullTAF *filter, elt_t query, int loc, size_t quot, uint64_t hash) {$/;"	f	file:
adapt	src/gqf.c	/^static inline int adapt(QF *qf, uint64_t index, uint64_t hash_bucket_index, uint64_t hash, uint64_t other_hash, uint64_t *ret_hash) {$/;"	f	file:
adapt	src/gqf_backup.c	/^static inline int adapt(QF *qf, uint64_t index, uint64_t hash_bucket_index, uint64_t hash, uint64_t other_hash, uint64_t *ret_hash) {$/;"	f	file:
adapt	src/taf.cc	/^static void adapt(TAF *filter, elt_t query, int loc, size_t quot, uint64_t hash, int sels[64]) {$/;"	f	file:
adapt_loc	other_filters/taf/src/exaf.c	/^static void adapt_loc(ExAF *filter, size_t loc, uint64_t in_hash, uint64_t out_hash) {$/;"	f	file:
adapt_loc	other_filters/taf/src/splinter_taf.c	/^static void adapt_loc(TAF *filter, size_t loc, int sels[64]) {$/;"	f	file:
adapt_loc	other_filters/taf/src/taf.c	/^static void adapt_loc(TAF *filter, size_t loc, int sels[64]) {$/;"	f	file:
adapt_loc	other_filters/taf/src/taf.cc	/^static void adapt_loc(TAF *filter, size_t loc, int sels[64]) {$/;"	f	file:
adapt_loc	other_filters/taf/src/taf_sim.c	/^static void adapt_loc(TAF *filter, size_t loc, int sels[64]) {$/;"	f	file:
adapt_loc	other_filters/taf/src/utaf.c	/^static void adapt_loc(FullTAF *filter, size_t loc) {$/;"	f	file:
adapt_loc	src/taf.cc	/^static void adapt_loc(TAF *filter, size_t loc, int sels[64]) {$/;"	f	file:
add_	other_filters/acf/src/hashutil.h	/^  unsigned __int128 multiply_, add_;$/;"	m	class:cuckoofilter::TwoIndependentMultiplyShift
add_	other_filters/acfsim/src/hashutil.h	/^  unsigned __int128 multiply_, add_;$/;"	m	class:cuckoofilter::TwoIndependentMultiplyShift
add_	other_filters/cf/src/hashutil.h	/^  unsigned __int128 multiply_, add_;$/;"	m	class:cuckoofilter::TwoIndependentMultiplyShift
add_block	other_filters/taf/src/exaf.c	/^static void add_block(ExAF *filter) {$/;"	f	file:
add_block	other_filters/taf/src/rsqf.c	/^static void add_block(RSQF *filter) {$/;"	f	file:
add_block	other_filters/taf/src/splinter_taf.c	/^static void add_block(TAF *filter) {$/;"	f	file:
add_block	other_filters/taf/src/taf.c	/^static void add_block(TAF *filter) {$/;"	f	file:
add_block	other_filters/taf/src/taf.cc	/^static void add_block(TAF *filter) {$/;"	f	file:
add_block	other_filters/taf/src/taf_sim.c	/^static void add_block(TAF *filter) {$/;"	f	file:
add_block	other_filters/taf/src/utaf.c	/^static void add_block(FullTAF *filter) {$/;"	f	file:
add_block	src/taf.cc	/^static void add_block(TAF *filter) {$/;"	f	file:
add_count	other_filters/acf/benchmarks/conext-table3.cc	/^  double add_count;  \/\/ # of items (million)$/;"	m	struct:Metrics	file:
add_count	other_filters/cf/benchmarks/conext-table3.cc	/^  double add_count;  \/\/ # of items (million)$/;"	m	struct:Metrics	file:
add_extra_args	external/splinterdb/scripts/list_test.py	/^def add_extra_args(tests: List[List[str]]) -> List[List[str]]:$/;"	f
add_latency_table	external/splinterdb/tests/functional/ycsb_test.c	/^add_latency_table(latency_table dest, latency_table table)$/;"	f
add_tuple	external/splinterdb/src/btree.h	/^   scratch_btree_add_tuple       add_tuple;$/;"	m	struct:__anon16
add_unknown	external/splinterdb/src/btree.c	/^add_unknown(uint32 a, int32 b)$/;"	f	file:
addr	external/splinterdb/src/btree.h	/^   uint64       addr;$/;"	m	struct:btree_node
addr	external/splinterdb/src/log.h	/^   log_addr_fn    addr;$/;"	m	struct:log_ops
addr	external/splinterdb/src/platform_linux/platform_types.h	/^   void  *addr;$/;"	m	struct:__anon32
addr	external/splinterdb/src/routing_filter.h	/^   uint64 addr;$/;"	m	struct:routing_filter
addr	external/splinterdb/src/shard_log.h	/^   uint64                addr;$/;"	m	struct:shard_log
addr	external/splinterdb/src/shard_log.h	/^   uint64 addr;$/;"	m	struct:shard_log_thread_data
addr	external/splinterdb/src/srq.h	/^   uint64 addr;$/;"	m	struct:srq_data
addr	external/splinterdb/src/trunk.c	/^   uint64                addr;$/;"	m	struct:trunk_compact_bundle_req	file:
addr	external/splinterdb/src/trunk.c	/^   uint64 addr;                \/\/ PBN of the child$/;"	m	struct:trunk_pivot_data	file:
addr	external/splinterdb/src/trunk.h	/^   uint64       addr;$/;"	m	struct:trunk_node
addr_arr	external/splinterdb/tests/functional/cache_test.c	/^   const uint64      *addr_arr;                \/\/ IN array of page addrs$/;"	m	struct:__anon54	file:
adds_per_nano	other_filters/acf/benchmarks/bulk-insert-and-query.cc	/^  double adds_per_nano;$/;"	m	struct:Statistics	file:
adds_per_nano	other_filters/cf/benchmarks/bulk-insert-and-query.cc	/^  double adds_per_nano;$/;"	m	struct:Statistics	file:
advance_and_resort_min_ritor	external/splinterdb/src/merge.c	/^advance_and_resort_min_ritor(merge_iterator *merge_itor)$/;"	f	file:
advance_base	external/splinterdb/tests/functional/splinter_test.c	/^advance_base(const test_splinter_thread_params *params,$/;"	f	file:
advance_one_loop	external/splinterdb/src/merge.c	/^advance_one_loop(merge_iterator *merge_itor, bool32 *retry)$/;"	f	file:
aes_hash2	other_filters/cqf/src/bm.c	/^uint64_t aes_hash2(uint64_t x)$/;"	f
aes_hash2	src/bm.c	/^uint64_t aes_hash2(uint64_t x)$/;"	f
after_end	external/splinterdb/src/mini_allocator.c	/^   after_end    = 2$/;"	e	enum:boundary_state	file:
al	external/splinterdb/src/clockcache.h	/^   allocator         *al;$/;"	m	struct:clockcache
al	external/splinterdb/src/mini_allocator.h	/^   allocator      *al;$/;"	m	struct:mini_allocator
al	external/splinterdb/src/trunk.h	/^   allocator     *al;$/;"	m	struct:trunk_handle
alignof	external/splinterdb/src/splinterdb.c	/^                  == alignof(_splinterdb_lookup_result),$/;"	v
all_queries	external/splinterdb/tests/functional/ycsb_test.c	/^   latency_table all_queries;$/;"	m	struct:latency_tables	file:
alloc	external/splinterdb/src/allocator.h	/^   alloc_fn                alloc;$/;"	m	struct:allocator_ops
alloc_fn	external/splinterdb/src/allocator.h	/^typedef platform_status (*alloc_fn)(allocator *al,$/;"	t
alloc_super_addr	external/splinterdb/src/allocator.h	/^   alloc_super_addr_fn  alloc_super_addr;$/;"	m	struct:allocator_ops
alloc_super_addr_fn	external/splinterdb/src/allocator.h	/^typedef platform_status (*alloc_super_addr_fn)(allocator        *al,$/;"	t
allocator	external/splinterdb/src/allocator.h	/^struct allocator {$/;"	s
allocator	external/splinterdb/src/allocator.h	/^typedef struct allocator allocator;$/;"	t	typeref:struct:allocator
allocator_alloc	external/splinterdb/src/allocator.h	/^allocator_alloc(allocator *al, uint64 *addr, page_type type)$/;"	f
allocator_alloc_super_addr	external/splinterdb/src/allocator.h	/^allocator_alloc_super_addr(allocator        *al,$/;"	f
allocator_assert_noleaks	external/splinterdb/src/allocator.h	/^allocator_assert_noleaks(allocator *al)$/;"	f
allocator_capacity	external/splinterdb/tests/config.h	/^   uint64 allocator_capacity;$/;"	m	struct:master_config
allocator_cfg	external/splinterdb/src/splinterdb.c	/^   allocator_config   allocator_cfg;$/;"	m	struct:splinterdb	file:
allocator_config	external/splinterdb/src/allocator.h	/^typedef struct allocator_config {$/;"	s
allocator_config	external/splinterdb/src/allocator.h	/^} allocator_config;$/;"	t	typeref:struct:allocator_config
allocator_config_extent_base_addr	external/splinterdb/src/allocator.h	/^allocator_config_extent_base_addr(allocator_config *allocator_cfg, uint64 addr)$/;"	f
allocator_config_init	external/splinterdb/src/allocator.c	/^allocator_config_init(allocator_config *allocator_cfg,$/;"	f
allocator_config_pages_share_extent	external/splinterdb/src/allocator.h	/^allocator_config_pages_share_extent(allocator_config *allocator_cfg,$/;"	f
allocator_dec_ref	external/splinterdb/src/allocator.h	/^allocator_dec_ref(allocator *al, uint64 addr, page_type type)$/;"	f
allocator_get_capacity	external/splinterdb/src/allocator.h	/^allocator_get_capacity(allocator *al)$/;"	f
allocator_get_config	external/splinterdb/src/allocator.h	/^allocator_get_config(allocator *al)$/;"	f
allocator_get_config_fn	external/splinterdb/src/allocator.h	/^typedef allocator_config *(*allocator_get_config_fn)(allocator *al);$/;"	t
allocator_get_refcount	external/splinterdb/src/allocator.h	/^allocator_get_refcount(allocator *al, uint64 addr)$/;"	f
allocator_get_super_addr	external/splinterdb/src/allocator.h	/^allocator_get_super_addr(allocator *al, allocator_root_id spl_id, uint64 *addr)$/;"	f
allocator_handle	external/splinterdb/src/splinterdb.c	/^   rc_allocator       allocator_handle;$/;"	m	struct:splinterdb	file:
allocator_in_use	external/splinterdb/src/allocator.h	/^allocator_in_use(allocator *al)$/;"	f
allocator_inc_ref	external/splinterdb/src/allocator.h	/^allocator_inc_ref(allocator *al, uint64 addr)$/;"	f
allocator_ops	external/splinterdb/src/allocator.h	/^typedef struct allocator_ops {$/;"	s
allocator_ops	external/splinterdb/src/allocator.h	/^} allocator_ops;$/;"	t	typeref:struct:allocator_ops
allocator_page_valid	external/splinterdb/src/allocator.h	/^allocator_page_valid(allocator *al, uint64 addr)$/;"	f
allocator_print_allocated	external/splinterdb/src/allocator.h	/^allocator_print_allocated(allocator *al)$/;"	f
allocator_print_stats	external/splinterdb/src/allocator.h	/^allocator_print_stats(allocator *al)$/;"	f
allocator_remove_super_addr	external/splinterdb/src/allocator.h	/^allocator_remove_super_addr(allocator *al, allocator_root_id spl_id)$/;"	f
allocator_root_id	external/splinterdb/src/allocator.h	/^typedef uint64 allocator_root_id;$/;"	t
alt_hasher_	other_filters/acf/src/cuckoofilter.h	/^				 HashFamily alt_hasher_;$/;"	m	class:cuckoofilter::CuckooFilter
alt_hasher_	other_filters/acfsim/src/cuckoofilter.h	/^				 HashFamily alt_hasher_;$/;"	m	class:cuckoofilter::CuckooFilter
app_file_read	other_filters/cqf/src/bm.c	/^__uint128_t *app_file_read(char *ip_file, int num)$/;"	f
app_file_read	src/bm.c	/^__uint128_t *app_file_read(char *ip_file, int num)$/;"	f
app_params	other_filters/cqf/src/bm.c	/^typedef struct app_params {$/;"	s	file:
app_params	other_filters/cqf/src/bm.c	/^} app_params;$/;"	t	typeref:struct:app_params	file:
app_params	src/bm.c	/^typedef struct app_params {$/;"	s	file:
app_params	src/bm.c	/^} app_params;$/;"	t	typeref:struct:app_params	file:
app_pregen	other_filters/cqf/src/bm.c	/^rand_generator app_pregen = {$/;"	v
app_pregen	src/bm.c	/^rand_generator app_pregen = {$/;"	v
app_pregen_duplicate	other_filters/cqf/src/bm.c	/^void *app_pregen_duplicate(void *state)$/;"	f
app_pregen_duplicate	src/bm.c	/^void *app_pregen_duplicate(void *state)$/;"	f
app_pregen_gen_rand	other_filters/cqf/src/bm.c	/^int app_pregen_gen_rand(void *_state, uint64_t noutputs, __uint128_t *outputs)$/;"	f
app_pregen_gen_rand	src/bm.c	/^int app_pregen_gen_rand(void *_state, uint64_t noutputs, __uint128_t *outputs)$/;"	f
app_pregen_init	other_filters/cqf/src/bm.c	/^void *app_pregen_init(uint64_t maxoutputs, __uint128_t maxvalue, void *params)$/;"	f
app_pregen_init	src/bm.c	/^void *app_pregen_init(uint64_t maxoutputs, __uint128_t maxvalue, void *params)$/;"	f
app_pregen_state	other_filters/cqf/src/bm.c	/^typedef struct app_pregen_state {$/;"	s	file:
app_pregen_state	other_filters/cqf/src/bm.c	/^} app_pregen_state;$/;"	t	typeref:struct:app_pregen_state	file:
app_pregen_state	src/bm.c	/^typedef struct app_pregen_state {$/;"	s	file:
app_pregen_state	src/bm.c	/^} app_pregen_state;$/;"	t	typeref:struct:app_pregen_state	file:
arg	external/splinterdb/src/task.c	/^   void                  *arg;$/;"	m	struct:__anon10	file:
arg	external/splinterdb/src/task.h	/^   void        *arg;$/;"	m	struct:task
argparse	external/splinterdb/scripts/list_test.py	/^import argparse$/;"	i
argparse	external/splinterdb/scripts/run_ycsb.py	/^import argparse$/;"	i
arity	external/splinterdb/tests/functional/cache_test.c	/^         bool32 arity;$/;"	m	struct:__anon47::__anon49::__anon52	file:
assert	other_filters/cqf/src/gqf_file.c	14;"	d	file:
assert	src/gqf_file.c	5;"	d	file:
assert_data	external/splinterdb/tests/unit/main.c	/^assert_data(const void *vexp,$/;"	f
assert_dbl_far	external/splinterdb/tests/unit/main.c	/^assert_dbl_far(double      exp,$/;"	f
assert_dbl_near	external/splinterdb/tests/unit/main.c	/^assert_dbl_near(double      exp,$/;"	f
assert_eq	other_filters/taf/src/arcd.c	225;"	d	file:
assert_eq	other_filters/taf/src/exaf.c	660;"	d	file:
assert_eq	other_filters/taf/src/rsqf.c	401;"	d	file:
assert_eq	other_filters/taf/src/splinter_taf.c	786;"	d	file:
assert_eq	other_filters/taf/src/taf.c	672;"	d	file:
assert_eq	other_filters/taf/src/taf.cc	704;"	d	file:
assert_eq	other_filters/taf/src/taf_sim.c	672;"	d	file:
assert_eq	other_filters/taf/src/utaf.c	547;"	d	file:
assert_eq	src/taf.cc	2114;"	d	file:
assert_eq	src/taf.cc	843;"	d	file:
assert_equal	external/splinterdb/tests/unit/main.c	/^assert_equal(intmax_t    exp,$/;"	f
assert_equal_u	external/splinterdb/tests/unit/main.c	/^assert_equal_u(uintmax_t exp, uintmax_t real, const char *caller, int line)$/;"	f
assert_fail	external/splinterdb/tests/unit/main.c	/^assert_fail(const char *caller, int line)$/;"	f
assert_false	external/splinterdb/tests/unit/main.c	/^assert_false(int real, const char *caller, int line, const char *message, ...)$/;"	f
assert_fn	external/splinterdb/src/allocator.h	/^typedef void (*assert_fn)(allocator *al);$/;"	t
assert_free	external/splinterdb/src/cache.h	/^   cache_generic_fn     assert_free;$/;"	m	struct:cache_ops
assert_interval	external/splinterdb/tests/unit/main.c	/^assert_interval(intmax_t    exp1,$/;"	f
assert_noleaks	external/splinterdb/src/allocator.h	/^   assert_fn assert_noleaks;$/;"	m	struct:allocator_ops
assert_not_equal	external/splinterdb/tests/unit/main.c	/^assert_not_equal(intmax_t    exp,$/;"	f
assert_not_equal_u	external/splinterdb/tests/unit/main.c	/^assert_not_equal_u(uintmax_t exp, uintmax_t real, const char *caller, int line)$/;"	f
assert_not_null	external/splinterdb/tests/unit/main.c	/^assert_not_null(const void *real, const char *caller, int line)$/;"	f
assert_null	external/splinterdb/tests/unit/main.c	/^assert_null(void *real, const char *caller, int line)$/;"	f
assert_str	external/splinterdb/tests/unit/main.c	/^assert_str(const char *exp, const char *real, const char *caller, int line)$/;"	f
assert_strnequal	external/splinterdb/tests/unit/main.c	/^assert_strnequal(const char *str1,$/;"	f
assert_true	external/splinterdb/tests/unit/main.c	/^assert_true(int real, const char *caller, int line, const char *message, ...)$/;"	f
assert_ungot	external/splinterdb/src/cache.h	/^   assert_ungot_fn      assert_ungot;$/;"	m	struct:cache_ops
assert_ungot_fn	external/splinterdb/src/cache.h	/^typedef void (*assert_ungot_fn)(cache *cc, uint64 addr);$/;"	t
assert_wstr	external/splinterdb/tests/unit/main.c	/^assert_wstr(const wchar_t *exp,$/;"	f
async_ctxt_deinit	external/splinterdb/tests/functional/test_async.c	/^async_ctxt_deinit(platform_heap_id hid, test_async_lookup *async_lookup)$/;"	f
async_ctxt_get	external/splinterdb/tests/functional/test_async.c	/^async_ctxt_get(test_async_lookup *async_lookup)$/;"	f
async_ctxt_init	external/splinterdb/tests/functional/test_async.c	/^async_ctxt_init(platform_heap_id    hid,                \/\/ IN$/;"	f
async_ctxt_process_cb	external/splinterdb/tests/functional/test_async.h	/^typedef void (*async_ctxt_process_cb)(trunk_handle    *spl,$/;"	t
async_ctxt_process_one	external/splinterdb/tests/functional/test_async.c	/^async_ctxt_process_one(trunk_handle         *spl,$/;"	f
async_ctxt_process_ready	external/splinterdb/tests/functional/test_async.c	/^async_ctxt_process_ready(trunk_handle         *spl,$/;"	f
async_ctxt_unget	external/splinterdb/tests/functional/test_async.c	/^async_ctxt_unget(test_async_lookup *async_lookup, test_async_ctxt *ctxt)$/;"	f
async_io_started	external/splinterdb/src/cache.h	/^   async_io_started$/;"	e	enum:__anon22
async_locked	external/splinterdb/src/cache.h	/^   async_locked,$/;"	e	enum:__anon22
async_lookup	external/splinterdb/tests/functional/splinter_test.c	/^   test_async_lookup *async_lookup[8]; \/\/ async lookup state per table$/;"	m	struct:test_splinter_thread_params	file:
async_lookup_state_compacted_subbundle	external/splinterdb/src/trunk.h	/^   async_lookup_state_compacted_subbundle$/;"	e	enum:__anon20
async_lookup_state_invalid	external/splinterdb/src/trunk.h	/^   async_lookup_state_invalid = 0,$/;"	e	enum:__anon20
async_lookup_state_pivot	external/splinterdb/src/trunk.h	/^   async_lookup_state_pivot,$/;"	e	enum:__anon20
async_lookup_state_subbundle	external/splinterdb/src/trunk.h	/^   async_lookup_state_subbundle,$/;"	e	enum:__anon20
async_max_pages	external/splinterdb/src/io.h	/^   uint64 async_max_pages;$/;"	m	struct:io_config
async_no_reqs	external/splinterdb/src/cache.h	/^   async_no_reqs,$/;"	e	enum:__anon22
async_queue_size	external/splinterdb/src/io.h	/^   uint64 async_queue_size;$/;"	m	struct:io_config
async_state_btree_lookup_reentrant	external/splinterdb/src/trunk.h	/^   async_state_btree_lookup_reentrant,$/;"	e	enum:__anon19
async_state_btree_lookup_start	external/splinterdb/src/trunk.h	/^   async_state_btree_lookup_start,$/;"	e	enum:__anon19
async_state_end	external/splinterdb/src/trunk.h	/^   async_state_end$/;"	e	enum:__anon19
async_state_filter_lookup_reentrant	external/splinterdb/src/trunk.h	/^   async_state_filter_lookup_reentrant,$/;"	e	enum:__anon19
async_state_filter_lookup_start	external/splinterdb/src/trunk.h	/^   async_state_filter_lookup_start,$/;"	e	enum:__anon19
async_state_found_final_answer_early	external/splinterdb/src/trunk.h	/^   async_state_found_final_answer_early,$/;"	e	enum:__anon19
async_state_get_child_trunk_node_reentrant	external/splinterdb/src/trunk.h	/^   async_state_get_child_trunk_node_reentrant,$/;"	e	enum:__anon19
async_state_get_root_reentrant	external/splinterdb/src/trunk.h	/^   async_state_get_root_reentrant,$/;"	e	enum:__anon19
async_state_invalid	external/splinterdb/src/trunk.h	/^   async_state_invalid = 0,$/;"	e	enum:__anon19
async_state_lookup_memtable	external/splinterdb/src/trunk.h	/^   async_state_lookup_memtable,$/;"	e	enum:__anon19
async_state_next_in_node	external/splinterdb/src/trunk.h	/^   async_state_next_in_node,$/;"	e	enum:__anon19
async_state_pivot_lookup	external/splinterdb/src/trunk.h	/^   async_state_pivot_lookup,$/;"	e	enum:__anon19
async_state_start	external/splinterdb/src/trunk.h	/^   async_state_start,$/;"	e	enum:__anon19
async_state_subbundle_lookup	external/splinterdb/src/trunk.h	/^   async_state_subbundle_lookup,$/;"	e	enum:__anon19
async_state_trunk_node_done	external/splinterdb/src/trunk.h	/^   async_state_trunk_node_done,$/;"	e	enum:__anon19
async_state_trunk_node_lookup	external/splinterdb/src/trunk.h	/^   async_state_trunk_node_lookup,$/;"	e	enum:__anon19
async_state_unget_parent_trunk_node	external/splinterdb/src/trunk.h	/^   async_state_unget_parent_trunk_node,$/;"	e	enum:__anon19
async_success	external/splinterdb/src/cache.h	/^   async_success = 0xc0ffee,$/;"	e	enum:__anon22
async_tests	external/splinterdb/scripts/list_test.py	/^async_tests = [$/;"	v
auto_resize	include/gqf_int.h	/^		uint32_t auto_resize;$/;"	m	struct:quotient_filter_runtime_data
auto_resize	other_filters/cqf/include/gqf_int.h	/^		uint32_t auto_resize;$/;"	m	struct:quotient_filter_runtime_data
avail_q	external/splinterdb/tests/functional/test_async.h	/^   pcq            *avail_q;$/;"	m	struct:__anon59
avg_fp_rate	other_filters/taf/src/taf.c	/^double avg_fp_rate = 0;$/;"	v
avg_fp_rate	other_filters/taf/src/taf.cc	/^double avg_fp_rate = 0;$/;"	v
avg_fp_rate	src/taf.cc	/^double avg_fp_rate = 0;$/;"	v
avg_insert_time	other_filters/taf/src/taf.c	/^double avg_insert_time = 0;$/;"	v
avg_insert_time	other_filters/taf/src/taf.cc	/^double avg_insert_time = 0;$/;"	v
avg_insert_time	src/taf.cc	/^double avg_insert_time = 0;$/;"	v
avg_query_time	other_filters/taf/src/taf.c	/^double avg_query_time = 0;$/;"	v
avg_query_time	other_filters/taf/src/taf.cc	/^double avg_query_time = 0;$/;"	v
avg_query_time	src/taf.cc	/^double avg_query_time = 0;$/;"	v
b	other_filters/acfsim/src/cuckoofilter.h	/^        int b;$/;"	m	struct:operation
b	src/test_ext_inc_throughput.cc	/^	int b;$/;"	m	struct:test_struct	file:
b	src/test_ext_throughput.cc	/^	int b;$/;"	m	struct:test_struct	file:
b	src/test_micro_read.c	/^	uint64_t b;$/;"	m	struct:operation	file:
b	src/test_zipf_throughput.cc	/^	int b;$/;"	m	struct:test_struct	file:
backing_data	other_filters/taf/src/splinter_taf.c	/^struct backing_data {$/;"	s	file:
backing_data	other_filters/taf/src/splinter_taf.c	/^} typedef backing_data;$/;"	t	file:
backtrace	external/splinterdb/src/clockcache.h	/^   void  *backtrace[NUM_HISTORY_RECORDS];$/;"	m	struct:history_record
bandwidth_used	external/splinterdb/scripts/run_ycsb.py	/^                        bandwidth_used = int(io_mib\/clock_time_sec)$/;"	v
base_addr	external/splinterdb/src/mini_allocator.c	/^base_addr(cache *cc, uint64 addr)$/;"	f	file:
base_addr_fn	external/splinterdb/src/allocator.h	/^typedef uint64 (*base_addr_fn)(const allocator *al, uint64 addr);$/;"	t
basic	external/splinterdb/tests/functional/splinter_test.h	/^   basic,$/;"	e	enum:test_type
batch	external/splinterdb/src/mini_allocator.c	/^   uint8      batch;$/;"	m	struct:keyed_meta_entry	file:
batch_busy	external/splinterdb/src/clockcache.h	/^   volatile bool32 *batch_busy;$/;"	m	struct:clockcache
batch_capacity	external/splinterdb/src/clockcache.h	/^   uint64 batch_capacity;$/;"	m	struct:clockcache_config
batch_sema	external/splinterdb/tests/functional/cache_test.c	/^   platform_semaphore batch_sema;              \/\/ batch semaphore$/;"	m	struct:__anon54	file:
batch_size	external/splinterdb/tests/functional/ycsb_test.c	/^   uint64   batch_size;$/;"	m	struct:ycsb_log_params	file:
before_start	external/splinterdb/src/mini_allocator.c	/^   before_start = 1,$/;"	e	enum:boundary_state	file:
bg	external/splinterdb/src/task.h	/^   task_bg_thread_group bg;$/;"	m	struct:task_group
bh	external/splinterdb/src/clockcache.h	/^   buffer_handle        bh;   \/\/ actual memory for pages$/;"	m	struct:clockcache
bh	external/splinterdb/src/rc_allocator.h	/^   buffer_handle           bh;$/;"	m	struct:rc_allocator
bitrank	other_filters/cqf/src/gqf.c	/^static inline int bitrank(uint64_t val, int pos) {$/;"	f	file:
bitrank	other_filters/taf/src/bit_util.c	/^uint64_t bitrank(uint64_t val, uint64_t pos) {$/;"	f
bitrank	src/gqf.c	/^static inline int bitrank(uint64_t val, int pos) {$/;"	f	file:
bitrank	src/gqf_backup.c	/^static inline int bitrank(uint64_t val, int pos) {$/;"	f	file:
bitrank	src/taf.cc	/^uint64_t bitrank(uint64_t val, uint64_t pos) {$/;"	f
bits	other_filters/taf/src/ext.h	/^  uint64_t bits; \/\/ store bits of extension$/;"	m	struct:ext_t
bits	src/taf.cc	/^  uint64_t bits; \/\/ store bits of extension$/;"	m	struct:ext_t	file:
bits_	other_filters/acf/src/mirroredtable.h	/^			char bits_[kBytesPerBucket];$/;"	m	struct:cuckoofilter::MirroredTable::Bucket
bits_	other_filters/acf/src/singletable.h	/^    char bits_[kBytesPerBucket];$/;"	m	struct:cuckoofilter::SingleTable::Bucket
bits_	other_filters/acfsim/src/mirroredtable.h	/^			char bits_[kBytesPerBucket];$/;"	m	struct:cuckoofilter::MirroredTable::Bucket
bits_	other_filters/acfsim/src/singletable.h	/^    char bits_[kBytesPerBucket];$/;"	m	struct:cuckoofilter::SingleTable::Bucket
bits_	other_filters/cf/src/singletable.h	/^    char bits_[kBytesPerBucket];$/;"	m	struct:cuckoofilter::SingleTable::Bucket
bits_per_item	other_filters/acf/benchmarks/bulk-insert-and-query.cc	/^  double bits_per_item;$/;"	m	struct:Statistics	file:
bits_per_item	other_filters/cf/benchmarks/bulk-insert-and-query.cc	/^  double bits_per_item;$/;"	m	struct:Statistics	file:
bits_per_slot	include/gqf_int.h	/^		uint64_t bits_per_slot;$/;"	m	struct:quotient_filter_metadata
bits_per_slot	other_filters/cqf/include/gqf_int.h	/^		uint64_t bits_per_slot;$/;"	m	struct:quotient_filter_metadata
bitscanreverse	other_filters/cqf/src/gqf.c	/^static inline int64_t bitscanreverse(uint64_t val)$/;"	f	file:
bitscanreverse	src/gqf.c	/^static inline int64_t bitscanreverse(uint64_t val)$/;"	f	file:
bitscanreverse	src/gqf_backup.c	/^static inline int64_t bitscanreverse(uint64_t val)$/;"	f	file:
bitselect	other_filters/cqf/src/gqf.c	/^static inline uint64_t bitselect(uint64_t val, int rank) {$/;"	f	file:
bitselect	other_filters/taf/src/bit_util.c	/^uint64_t bitselect(uint64_t val, uint64_t rank) {$/;"	f
bitselect	src/gqf.c	/^static inline uint64_t bitselect(uint64_t val, int rank) {$/;"	f	file:
bitselect	src/gqf_backup.c	/^static inline uint64_t bitselect(uint64_t val, int rank) {$/;"	f	file:
bitselect	src/taf.cc	/^uint64_t bitselect(uint64_t val, uint64_t rank) {$/;"	f
bitselectv	other_filters/cqf/src/gqf.c	/^static inline uint64_t bitselectv(const uint64_t val, int ignore, int rank)$/;"	f	file:
bitselectv	src/gqf.c	/^static inline uint64_t bitselectv(const uint64_t val, int ignore, int rank)$/;"	f	file:
bitselectv	src/gqf_backup.c	/^static inline uint64_t bitselectv(const uint64_t val, int ignore, int rank)$/;"	f	file:
bitsizeof	external/splinterdb/src/util.h	10;"	d
block_containing	other_filters/taf/src/macros.h	38;"	d
block_containing	src/taf.cc	244;"	d	file:
block_offset	other_filters/cqf/src/gqf.c	/^static inline uint64_t block_offset(const QF *qf, uint64_t blockidx)$/;"	f	file:
block_offset	src/gqf.c	/^static inline uint64_t block_offset(const QF *qf, uint64_t blockidx)$/;"	f	file:
block_offset	src/gqf_backup.c	/^static inline uint64_t block_offset(const QF *qf, uint64_t blockidx)$/;"	f	file:
blocks	include/gqf_int.h	/^		qfblock *blocks;$/;"	m	struct:quotient_filter
blocks	other_filters/cqf/include/gqf_int.h	/^		qfblock *blocks;$/;"	m	struct:quotient_filter
blocks	other_filters/taf/src/exaf.h	/^  ExAFBlock* blocks;           \/* blocks of 64 remainders with metadata  *\/$/;"	m	struct:exaf_t
blocks	other_filters/taf/src/rsqf.h	/^  RSQFBlock* blocks;            \/* blocks of 64 remainders with metadata  *\/$/;"	m	struct:rsqf_t
blocks	other_filters/taf/src/splinter_taf.h	/^  TAFBlock* blocks;           \/* blocks of 64 remainders with metadata  *\/$/;"	m	struct:taf_t
blocks	other_filters/taf/src/taf.h	/^  TAFBlock* blocks;           \/* blocks of 64 remainders with metadata  *\/$/;"	m	struct:taf_t
blocks	other_filters/taf/src/taf_sim.h	/^  TAFBlock* blocks;           \/* blocks of 64 remainders with metadata  *\/$/;"	m	struct:taf_t
blocks	other_filters/taf/src/utaf.h	/^  FullTAFBlock* blocks;           \/* blocks of 64 remainders with metadata  *\/$/;"	m	struct:utaf_t
blocks	src/taf.cc	/^  TAFBlock* blocks;           \/* blocks of 64 remainders with metadata  *\/$/;"	m	struct:taf_t	file:
bm_result	src/test_splinter_inserts_2.c	/^splinterdb_lookup_result bm_result;$/;"	v
bool32	external/splinterdb/src/platform_linux/platform.h	/^typedef int32 bool32;$/;"	t
boundary_state	external/splinterdb/src/mini_allocator.c	/^typedef enum boundary_state {$/;"	g	file:
boundary_state	external/splinterdb/src/mini_allocator.c	/^} boundary_state;$/;"	t	typeref:enum:boundary_state	file:
bp	other_filters/acf/example/test_acf_ops.cc	/^void bp() {$/;"	f
bp	other_filters/acf/example/test_micro_throughput.cc	/^void bp() {$/;"	f
bp	other_filters/acf/example/test_splinter_adversarial.cc	/^void bp() {$/;"	f
bp	other_filters/acf/example/test_splinter_inc_throughput.cc	/^void bp() {$/;"	f
bp	other_filters/acf/example/test_splinter_throughput.cc	/^void bp() {$/;"	f
bp	other_filters/acf/example/test_splinter_zipfian_histogram.cc	/^void bp() {$/;"	f
bp	other_filters/acfsim/example/test_acf_ops.cc	/^void bp() {$/;"	f
bp	other_filters/acfsim/example/test_micro_read.cc	/^void bp() {$/;"	f
bp	other_filters/acfsim/example/test_micro_throughput.cc	/^void bp() {$/;"	f
bp	other_filters/acfsim/example/test_micro_write.cc	/^void bp() {$/;"	f
bp	other_filters/acfsim/example/test_splinter_adversarial.cc	/^void bp() {$/;"	f
bp	other_filters/acfsim/example/test_splinter_inc_throughput.cc	/^void bp() {$/;"	f
bp	other_filters/acfsim/example/test_splinter_throughput.cc	/^void bp() {$/;"	f
bp	other_filters/acfsim/example/test_splinter_zipfian_histogram.cc	/^void bp() {$/;"	f
bp	other_filters/cf/example/test_micro_super.cc	/^void bp() {$/;"	f
bp	other_filters/cf/example/test_micro_throughput.cc	/^void bp() {$/;"	f
bp	other_filters/cf/example/test_splinter_adversarial.cc	/^void bp() {$/;"	f
bp	other_filters/cf/example/test_splinter_throughput.cc	/^void bp() {$/;"	f
bp	other_filters/cf/example/test_splinter_zipfian_histogram.cc	/^void bp() {$/;"	f
bp	src/gqf.c	/^static inline int bp()$/;"	f	file:
bp	src/gqf_backup.c	/^static inline int bp()$/;"	f	file:
bp	src/test_driver.c	/^void bp() {$/;"	f
bp	test/test_splinter_lltable_throughput.c	/^void bp() {$/;"	f
bp1	src/gqf.c	/^void bp1(const QF *qf, uint64_t hash_bucket_index, uint64_t hash_bucket_offset, uint64_t hash_remainder) {$/;"	f
bp1	src/gqf_backup.c	/^void bp1(const QF *qf, uint64_t hash_bucket_index, uint64_t hash_bucket_offset, uint64_t hash_remainder) {$/;"	f
bp2	other_filters/cqf/src/test_micro_super.c	/^void bp2() {$/;"	f
bp2	other_filters/cqf/src/test_micro_throughput.c	/^void bp2() {$/;"	f
bp2	other_filters/cqf/src/test_parallel.c	/^void bp2() {$/;"	f
bp2	other_filters/cqf/src/test_splinter_adversarial.c	/^void bp2() {$/;"	f
bp2	other_filters/cqf/src/test_splinter_throughput.c	/^void bp2() {$/;"	f
bp2	other_filters/cqf/src/test_splinter_zipfian_histogram.c	/^void bp2() {$/;"	f
bp2	src/test_bulk.c	/^void bp2() {}$/;"	f
bp2	src/test_deletions.c	/^int bp2() {$/;"	f
bp2	src/test_ext_churn.cc	/^int bp2() {$/;"	f
bp2	src/test_ext_inc_throughput.cc	/^int bp2() {$/;"	f
bp2	src/test_ext_throughput.cc	/^int bp2() {$/;"	f
bp2	src/test_fill_varied_throughput.c	/^int bp2() {$/;"	f
bp2	src/test_hash_accesses.c	/^int bp2() {$/;"	f
bp2	src/test_merge.c	/^void bp2() {}$/;"	f
bp2	src/test_micro_write.c	/^void bp2() {$/;"	f
bp2	src/test_near_full.c	/^int bp2() {$/;"	f
bp2	src/test_splinter_adversarial.c	/^void bp2() {$/;"	f
bp2	src/test_splinter_zipfian_histogram.c	/^void bp2() {$/;"	f
bp2	src/test_throughput_old.c	/^int bp2() {$/;"	f
bp2	src/test_whitelist.c	/^void bp2() {}$/;"	f
bp2	src/test_zipf_throughput.cc	/^int bp2() {$/;"	f
bp_acf	other_filters/acf/src/cuckoofilter.h	/^	void bp_acf() {}$/;"	f	namespace:cuckoofilter
bp_acf	other_filters/acfsim/src/cuckoofilter.h	/^	void bp_acf() {}$/;"	f	namespace:cuckoofilter
bp_count	test/test_splinter_lltable_throughput.c	/^int bp_count = 0;$/;"	v
bp_test	src/test_lltable_throughput.c	/^void bp_test() {$/;"	f
branch	external/splinterdb/src/trunk.c	/^   trunk_branch   branch;$/;"	m	struct:trunk_btree_skiperator	file:
branch	external/splinterdb/src/trunk.h	/^   trunk_branch              branch;$/;"	m	struct:trunk_compacted_memtable
branch	external/splinterdb/src/trunk.h	/^   trunk_branch    branch[TRUNK_RANGE_ITOR_MAX_BRANCHES];$/;"	m	struct:trunk_range_iterator
branch	external/splinterdb/src/trunk.h	/^   trunk_branch *branch;    \/\/ Current branch$/;"	m	struct:trunk_async_ctxt
branch_lookups	external/splinterdb/src/trunk.h	/^   uint64 branch_lookups[TRUNK_MAX_HEIGHT];$/;"	m	struct:trunk_stats
branch_no	external/splinterdb/src/trunk.h	/^   uint16 branch_no;        \/\/ branch number (newest)$/;"	m	struct:trunk_async_ctxt
branch_no_end	external/splinterdb/src/trunk.h	/^   uint16 branch_no_end;    \/\/ branch number end (oldest,$/;"	m	struct:trunk_async_ctxt
bsearch_comp	external/splinterdb/src/merge.c	/^bsearch_comp(const ordered_iterator *itor_one,$/;"	f	file:
bsearch_insert	external/splinterdb/src/merge.c	/^bsearch_insert(register const ordered_iterator *key,$/;"	f	file:
btree_accumulate_pivot_stats	external/splinterdb/src/btree.c	/^btree_accumulate_pivot_stats(btree_pivot_stats *dest, btree_pivot_stats src)$/;"	f	file:
btree_addrs_share_extent	external/splinterdb/src/btree.c	/^btree_addrs_share_extent(cache *cc, uint64 left_addr, uint64 right_addr)$/;"	f	file:
btree_alloc	external/splinterdb/src/btree.c	/^btree_alloc(cache          *cc,$/;"	f
btree_async_callback	external/splinterdb/src/btree.c	/^btree_async_callback(cache_async_ctxt *cache_ctxt)$/;"	f	file:
btree_async_cb	external/splinterdb/src/btree.h	/^typedef void (*btree_async_cb)(struct btree_async_ctxt *ctxt);$/;"	t
btree_async_ctxt	external/splinterdb/src/btree.h	/^typedef struct btree_async_ctxt {$/;"	s
btree_async_ctxt	external/splinterdb/src/btree.h	/^} btree_async_ctxt;$/;"	t	typeref:struct:btree_async_ctxt
btree_async_set_state	external/splinterdb/src/btree.c	/^btree_async_set_state(btree_async_ctxt *ctxt, btree_async_state new_state)$/;"	f	file:
btree_async_state	external/splinterdb/src/btree.h	/^} btree_async_state;$/;"	t	typeref:enum:__anon17
btree_async_state_get_index_complete	external/splinterdb/src/btree.h	/^   btree_async_state_get_index_complete,$/;"	e	enum:__anon17
btree_async_state_get_leaf_complete	external/splinterdb/src/btree.h	/^   btree_async_state_get_leaf_complete$/;"	e	enum:__anon17
btree_async_state_get_node	external/splinterdb/src/btree.h	/^   btree_async_state_get_node, \/\/ re-entrant state$/;"	e	enum:__anon17
btree_async_state_invalid	external/splinterdb/src/btree.h	/^   btree_async_state_invalid = 0,$/;"	e	enum:__anon17
btree_async_state_start	external/splinterdb/src/btree.h	/^   btree_async_state_start,$/;"	e	enum:__anon17
btree_block_dec_ref	external/splinterdb/src/btree.c	/^btree_block_dec_ref(cache *cc, btree_config *cfg, uint64 root_addr)$/;"	f
btree_build_leaf_splitting_plan	external/splinterdb/src/btree.c	/^btree_build_leaf_splitting_plan(const btree_config          *cfg, \/\/ IN$/;"	f
btree_can_perform_leaf_incorporate_spec	external/splinterdb/src/btree.c	/^btree_can_perform_leaf_incorporate_spec(const btree_config          *cfg,$/;"	f	file:
btree_can_set_leaf_entry	external/splinterdb/src/btree.c	/^btree_can_set_leaf_entry(const btree_config *cfg,$/;"	f	file:
btree_cfg	external/splinterdb/src/memtable.h	/^   btree_config *btree_cfg;$/;"	m	struct:memtable_config
btree_cfg	external/splinterdb/src/trunk.h	/^   btree_config    btree_cfg;$/;"	m	struct:trunk_config
btree_choose_index_split	external/splinterdb/src/btree.c	/^btree_choose_index_split(const btree_config *cfg, \/\/ IN$/;"	f	file:
btree_config	external/splinterdb/src/btree.h	/^typedef struct btree_config {$/;"	s
btree_config	external/splinterdb/src/btree.h	/^} btree_config;$/;"	t	typeref:struct:btree_config
btree_config_init	external/splinterdb/src/btree.c	/^btree_config_init(btree_config *btree_cfg,$/;"	f
btree_count_in_range	external/splinterdb/src/btree.c	/^btree_count_in_range(cache             *cc,$/;"	f
btree_count_in_range_by_iterator	external/splinterdb/src/btree.c	/^btree_count_in_range_by_iterator(cache             *cc,$/;"	f
btree_create	external/splinterdb/src/btree.c	/^btree_create(cache              *cc,$/;"	f
btree_create_leaf_incorporate_spec	external/splinterdb/src/btree.c	/^btree_create_leaf_incorporate_spec(const btree_config    *cfg,$/;"	f
btree_ctxt	external/splinterdb/src/trunk.h	/^      btree_async_ctxt   btree_ctxt;  \/\/ Btree async context$/;"	m	union:trunk_async_ctxt::__anon21
btree_ctxt_init	external/splinterdb/src/btree.h	/^btree_ctxt_init(btree_async_ctxt *ctxt,       \/\/ OUT$/;"	f
btree_dec_ref	external/splinterdb/src/btree.c	/^btree_dec_ref(cache              *cc,$/;"	f
btree_dec_ref_range	external/splinterdb/src/btree.c	/^btree_dec_ref_range(cache              *cc,$/;"	f
btree_defragment_index	external/splinterdb/src/btree.c	/^btree_defragment_index(const btree_config *cfg, \/\/ IN$/;"	f
btree_defragment_leaf	external/splinterdb/src/btree.c	/^btree_defragment_leaf(const btree_config    *cfg, \/\/ IN$/;"	f
btree_defragment_or_split_child_index	external/splinterdb/src/btree.c	/^btree_defragment_or_split_child_index(cache              *cc,$/;"	f	file:
btree_defragment_or_split_child_leaf	external/splinterdb/src/btree.c	/^btree_defragment_or_split_child_leaf(cache              *cc,$/;"	f	file:
btree_extent_size	external/splinterdb/src/btree_private.h	/^btree_extent_size(const btree_config *cfg)$/;"	f
btree_fill_index_entry	external/splinterdb/src/btree.c	/^btree_fill_index_entry(const btree_config *cfg,$/;"	f	file:
btree_fill_leaf_entry	external/splinterdb/src/btree.c	/^btree_fill_leaf_entry(const btree_config *cfg,$/;"	f	file:
btree_find_pivot	external/splinterdb/src/btree.c	/^btree_find_pivot(const btree_config *cfg,$/;"	f
btree_find_tuple	external/splinterdb/src/btree.c	/^btree_find_tuple(const btree_config *cfg,$/;"	f	file:
btree_found	external/splinterdb/src/btree.h	/^btree_found(merge_accumulator *result)$/;"	f
btree_get_child_addr	external/splinterdb/src/btree_private.h	/^btree_get_child_addr(const btree_config *cfg,$/;"	f
btree_get_index_entry	external/splinterdb/src/btree_private.h	/^btree_get_index_entry(const btree_config *cfg,$/;"	f
btree_get_leaf_entry	external/splinterdb/src/btree_private.h	/^btree_get_leaf_entry(const btree_config *cfg,$/;"	f
btree_get_pivot	external/splinterdb/src/btree_private.h	/^btree_get_pivot(const btree_config *cfg, const btree_hdr *hdr, table_index k)$/;"	f
btree_get_rank	external/splinterdb/src/btree.c	/^btree_get_rank(cache             *cc,$/;"	f	file:
btree_get_table_entry	external/splinterdb/src/btree.c	/^btree_get_table_entry(btree_hdr *hdr, int i)$/;"	f	file:
btree_get_tuple_key	external/splinterdb/src/btree_private.h	/^btree_get_tuple_key(const btree_config *cfg,$/;"	f
btree_get_tuple_message	external/splinterdb/src/btree_private.h	/^btree_get_tuple_message(const btree_config *cfg,$/;"	f
btree_get_tuple_message_type	external/splinterdb/src/btree_private.h	/^btree_get_tuple_message_type(const btree_config *cfg,$/;"	f
btree_grow_root	external/splinterdb/src/btree.c	/^btree_grow_root(cache              *cc,   \/\/ IN$/;"	f	file:
btree_hdr	external/splinterdb/src/btree.h	/^typedef struct ONDISK btree_hdr btree_hdr;$/;"	t	typeref:struct:btree_hdr
btree_hdr	external/splinterdb/src/btree_private.h	/^struct ONDISK btree_hdr {$/;"	s
btree_height	external/splinterdb/src/btree.c	/^btree_height(const btree_hdr *hdr)$/;"	f	file:
btree_inc_ref_range	external/splinterdb/src/btree.c	/^btree_inc_ref_range(cache              *cc,$/;"	f
btree_increment_height	external/splinterdb/src/btree.c	/^btree_increment_height(btree_hdr *hdr)$/;"	f	file:
btree_index_is_full	external/splinterdb/src/btree.c	/^btree_index_is_full(const btree_config *cfg, \/\/ IN$/;"	f	file:
btree_init_hdr	external/splinterdb/src/btree_private.h	/^btree_init_hdr(const btree_config *cfg, btree_hdr *hdr)$/;"	f
btree_insert	external/splinterdb/src/btree.c	/^btree_insert(cache              *cc,         \/\/ IN$/;"	f
btree_insert_index_entry	external/splinterdb/src/btree.c	/^btree_insert_index_entry(const btree_config *cfg,$/;"	f	file:
btree_insert_leaf_entry	external/splinterdb/src/btree.c	/^btree_insert_leaf_entry(const btree_config *cfg,$/;"	f	file:
btree_iterator	external/splinterdb/src/btree.h	/^typedef struct btree_iterator {$/;"	s
btree_iterator	external/splinterdb/src/btree.h	/^} btree_iterator;$/;"	t	typeref:struct:btree_iterator
btree_iterator_can_next	external/splinterdb/src/btree.c	/^btree_iterator_can_next(iterator *base_itor)$/;"	f	file:
btree_iterator_can_prev	external/splinterdb/src/btree.c	/^btree_iterator_can_prev(iterator *base_itor)$/;"	f	file:
btree_iterator_curr	external/splinterdb/src/btree.c	/^btree_iterator_curr(iterator *base_itor, key *curr_key, message *data)$/;"	f
btree_iterator_deinit	external/splinterdb/src/btree.c	/^btree_iterator_deinit(btree_iterator *itor)$/;"	f
btree_iterator_find_end	external/splinterdb/src/btree.c	/^btree_iterator_find_end(btree_iterator *itor)$/;"	f	file:
btree_iterator_init	external/splinterdb/src/btree.c	/^btree_iterator_init(cache          *cc,$/;"	f
btree_iterator_next	external/splinterdb/src/btree.c	/^btree_iterator_next(iterator *base_itor)$/;"	f
btree_iterator_next_leaf	external/splinterdb/src/btree.c	/^btree_iterator_next_leaf(btree_iterator *itor)$/;"	f	file:
btree_iterator_ops	external/splinterdb/src/btree.c	/^const static iterator_ops btree_iterator_ops = {$/;"	v	file:
btree_iterator_prev	external/splinterdb/src/btree.c	/^btree_iterator_prev(iterator *base_itor)$/;"	f
btree_iterator_prev_leaf	external/splinterdb/src/btree.c	/^btree_iterator_prev_leaf(btree_iterator *itor)$/;"	f	file:
btree_iterator_print	external/splinterdb/src/btree.c	/^btree_iterator_print(iterator *itor)$/;"	f
btree_iterator_seek	external/splinterdb/src/btree.c	/^btree_iterator_seek(iterator *base_itor, key seek_key, comparison seek_type)$/;"	f
btree_itor	external/splinterdb/src/trunk.c	/^   btree_iterator btree_itor[TRUNK_RANGE_ITOR_MAX_BRANCHES];$/;"	m	struct:__anon42	file:
btree_itor	external/splinterdb/src/trunk.h	/^   btree_iterator  btree_itor[TRUNK_RANGE_ITOR_MAX_BRANCHES];$/;"	m	struct:trunk_range_iterator
btree_key_compare	external/splinterdb/src/btree.h	/^btree_key_compare(const btree_config *cfg, key key1, key key2)$/;"	f
btree_key_to_string	external/splinterdb/src/btree.h	/^btree_key_to_string(btree_config *cfg, key k, char str[static 128])$/;"	f
btree_leaf_incorporate_tuple	external/splinterdb/tests/unit/btree_test.c	/^btree_leaf_incorporate_tuple(const btree_config    *cfg,$/;"	f	file:
btree_lookup	external/splinterdb/src/btree.c	/^btree_lookup(cache             *cc,        \/\/ IN$/;"	f
btree_lookup_and_merge	external/splinterdb/src/btree.c	/^btree_lookup_and_merge(cache             *cc,        \/\/ IN$/;"	f
btree_lookup_and_merge_async	external/splinterdb/src/btree.c	/^btree_lookup_and_merge_async(cache             *cc,          \/\/ IN$/;"	f
btree_lookup_async	external/splinterdb/src/btree.c	/^btree_lookup_async(cache             *cc,        \/\/ IN$/;"	f
btree_lookup_async_with_ref	external/splinterdb/src/btree.c	/^btree_lookup_async_with_ref(cache            *cc,        \/\/ IN$/;"	f	file:
btree_lookup_node	external/splinterdb/src/btree.c	/^btree_lookup_node(cache             *cc,             \/\/ IN$/;"	f
btree_lookup_with_ref	external/splinterdb/src/btree.c	/^btree_lookup_with_ref(cache        *cc,        \/\/ IN$/;"	f	file:
btree_merge_tuples	external/splinterdb/src/btree.c	/^btree_merge_tuples(const btree_config *cfg,$/;"	f	file:
btree_message_to_string	external/splinterdb/src/btree.h	/^btree_message_to_string(btree_config *cfg, message data, char str[static 128])$/;"	f
btree_node	external/splinterdb/src/btree.h	/^typedef struct btree_node {$/;"	s
btree_node	external/splinterdb/src/btree.h	/^} btree_node;$/;"	t	typeref:struct:btree_node
btree_node_claim	external/splinterdb/src/btree.c	/^btree_node_claim(cache              *cc,  \/\/ IN$/;"	f	file:
btree_node_full_unlock	external/splinterdb/src/btree.c	/^btree_node_full_unlock(cache              *cc,  \/\/ IN$/;"	f	file:
btree_node_get	external/splinterdb/src/btree.c	/^btree_node_get(cache              *cc,$/;"	f	file:
btree_node_get_from_cache_ctxt	external/splinterdb/src/btree.c	/^btree_node_get_from_cache_ctxt(const btree_config *cfg,  \/\/ IN$/;"	f	file:
btree_node_lock	external/splinterdb/src/btree.c	/^btree_node_lock(cache              *cc,  \/\/ IN$/;"	f	file:
btree_node_unclaim	external/splinterdb/src/btree.c	/^btree_node_unclaim(cache              *cc,  \/\/ IN$/;"	f	file:
btree_node_unget	external/splinterdb/src/btree.c	/^btree_node_unget(cache              *cc,  \/\/ IN$/;"	f
btree_node_unlock	external/splinterdb/src/btree.c	/^btree_node_unlock(cache              *cc,  \/\/ IN$/;"	f	file:
btree_num_entries	external/splinterdb/src/btree.c	/^btree_num_entries(const btree_hdr *hdr)$/;"	f	file:
btree_pack	external/splinterdb/src/btree.c	/^btree_pack(btree_pack_req *req)$/;"	f
btree_pack_abort	external/splinterdb/src/btree.c	/^btree_pack_abort(btree_pack_req *req)$/;"	f	file:
btree_pack_can_fit_tuple	external/splinterdb/src/btree.c	/^btree_pack_can_fit_tuple(btree_pack_req *req, key tuple_key, message data)$/;"	f	file:
btree_pack_create_next_node	external/splinterdb/src/btree.c	/^btree_pack_create_next_node(btree_pack_req *req, uint64 height, key pivot)$/;"	f	file:
btree_pack_get_current_node	external/splinterdb/src/btree.c	/^btree_pack_get_current_node(btree_pack_req *req, uint64 height)$/;"	f	file:
btree_pack_get_current_node_stats	external/splinterdb/src/btree.c	/^btree_pack_get_current_node_stats(btree_pack_req *req, uint64 height)$/;"	f	file:
btree_pack_link_extent	external/splinterdb/src/btree.c	/^btree_pack_link_extent(btree_pack_req *req,$/;"	f	file:
btree_pack_link_node	external/splinterdb/src/btree.c	/^btree_pack_link_node(btree_pack_req *req,$/;"	f	file:
btree_pack_loop	external/splinterdb/src/btree.c	/^btree_pack_loop(btree_pack_req *req,       \/\/ IN\/OUT$/;"	f	file:
btree_pack_node_init_hdr	external/splinterdb/src/btree.c	/^btree_pack_node_init_hdr(const btree_config *cfg,$/;"	f	file:
btree_pack_post_loop	external/splinterdb/src/btree.c	/^btree_pack_post_loop(btree_pack_req *req, key last_key)$/;"	f	file:
btree_pack_req	external/splinterdb/src/btree.h	/^typedef struct btree_pack_req {$/;"	s
btree_pack_req	external/splinterdb/src/btree.h	/^} btree_pack_req;$/;"	t	typeref:struct:btree_pack_req
btree_pack_req_deinit	external/splinterdb/src/btree.h	/^btree_pack_req_deinit(btree_pack_req *req, platform_heap_id hid)$/;"	f
btree_pack_req_init	external/splinterdb/src/btree.h	/^btree_pack_req_init(btree_pack_req  *req,$/;"	f
btree_pack_setup_start	external/splinterdb/src/btree.c	/^btree_pack_setup_start(btree_pack_req *req)$/;"	f	file:
btree_page_size	external/splinterdb/src/btree_private.h	/^btree_page_size(const btree_config *cfg)$/;"	f
btree_pivot_data	external/splinterdb/src/btree.h	/^typedef struct ONDISK btree_pivot_data {$/;"	s
btree_pivot_data	external/splinterdb/src/btree.h	/^} btree_pivot_data;$/;"	t	typeref:struct:btree_pivot_data
btree_pivot_stats	external/splinterdb/src/btree.h	/^typedef struct ONDISK btree_pivot_stats {$/;"	s
btree_pivot_stats	external/splinterdb/src/btree.h	/^} btree_pivot_stats;$/;"	t	typeref:struct:btree_pivot_stats
btree_print_btree_pivot_data	external/splinterdb/src/btree.c	/^btree_print_btree_pivot_data(platform_log_handle *log_handle,$/;"	f	file:
btree_print_btree_pivot_stats	external/splinterdb/src/btree.c	/^btree_print_btree_pivot_stats(platform_log_handle *log_handle,$/;"	f	file:
btree_print_index_entry	external/splinterdb/src/btree.c	/^btree_print_index_entry(platform_log_handle *log_handle,$/;"	f	file:
btree_print_index_node	external/splinterdb/src/btree.c	/^btree_print_index_node(platform_log_handle *log_handle,$/;"	f	file:
btree_print_leaf_entry	external/splinterdb/src/btree.c	/^btree_print_leaf_entry(platform_log_handle *log_handle,$/;"	f	file:
btree_print_leaf_node	external/splinterdb/src/btree.c	/^btree_print_leaf_node(platform_log_handle *log_handle,$/;"	f	file:
btree_print_locked_node	external/splinterdb/src/btree.c	/^btree_print_locked_node(platform_log_handle *log_handle,$/;"	f
btree_print_lookup	external/splinterdb/src/btree.c	/^btree_print_lookup(cache        *cc,        \/\/ IN$/;"	f
btree_print_memtable_tree	external/splinterdb/src/btree.c	/^btree_print_memtable_tree(platform_log_handle *log_handle,$/;"	f
btree_print_node	external/splinterdb/src/btree.c	/^btree_print_node(platform_log_handle *log_handle,$/;"	f
btree_print_offset_table	external/splinterdb/src/btree.c	/^btree_print_offset_table(platform_log_handle *log_handle, btree_hdr *hdr)$/;"	f	file:
btree_print_subtree	external/splinterdb/src/btree.c	/^btree_print_subtree(platform_log_handle *log_handle,$/;"	f
btree_print_tree	external/splinterdb/src/btree.c	/^btree_print_tree(platform_log_handle *log_handle,$/;"	f
btree_print_tree_stats	external/splinterdb/src/btree.c	/^btree_print_tree_stats(platform_log_handle *log_handle,$/;"	f
btree_reset_node_entries	external/splinterdb/src/btree.c	/^btree_reset_node_entries(const btree_config *cfg, btree_hdr *hdr)$/;"	f	file:
btree_root_to_meta_addr	external/splinterdb/src/btree.c	/^btree_root_to_meta_addr(const btree_config *cfg,$/;"	f	file:
btree_rough_count_height	external/splinterdb/include/splinterdb/splinterdb.h	/^   uint64 btree_rough_count_height;$/;"	m	struct:splinterdb_config
btree_rough_count_height	external/splinterdb/tests/config.h	/^   uint64 btree_rough_count_height;$/;"	m	struct:master_config
btree_scratch	external/splinterdb/src/btree.h	/^} PLATFORM_CACHELINE_ALIGNED btree_scratch;$/;"	t	typeref:struct:__anon16
btree_set_index_entry	external/splinterdb/src/btree.c	/^btree_set_index_entry(const btree_config *cfg,$/;"	f
btree_set_leaf_entry	external/splinterdb/src/btree.c	/^btree_set_leaf_entry(const btree_config *cfg,$/;"	f
btree_space_use_in_range	external/splinterdb/src/btree.c	/^btree_space_use_in_range(cache        *cc,$/;"	f
btree_split_child_index	external/splinterdb/src/btree.c	/^btree_split_child_index(cache              *cc,$/;"	f	file:
btree_split_child_leaf	external/splinterdb/src/btree.c	/^btree_split_child_leaf(cache                 *cc,$/;"	f	file:
btree_split_index_build_right_node	external/splinterdb/src/btree.c	/^btree_split_index_build_right_node(const btree_config *cfg,        \/\/ IN$/;"	f	file:
btree_split_leaf_build_right_node	external/splinterdb/src/btree.c	/^btree_split_leaf_build_right_node(const btree_config    *cfg,       \/\/ IN$/;"	f	file:
btree_split_leaf_cleanup_left_node	external/splinterdb/src/btree.c	/^btree_split_leaf_cleanup_left_node(const btree_config    *cfg, \/\/ IN$/;"	f	file:
btree_splitting_pivot	external/splinterdb/src/btree.c	/^btree_splitting_pivot(const btree_config          *cfg, \/\/ IN$/;"	f	file:
btree_test	external/splinterdb/tests/functional/btree_test.c	/^btree_test(int argc, char *argv[])$/;"	f
btree_test_async_callback	external/splinterdb/tests/functional/btree_test.c	/^btree_test_async_callback(btree_async_ctxt *btree_ctxt)$/;"	f	file:
btree_test_async_ctxt	external/splinterdb/tests/functional/btree_test.c	/^} btree_test_async_ctxt;$/;"	t	typeref:struct:__anon55	file:
btree_test_async_ctxt_any_used	external/splinterdb/tests/functional/btree_test.c	/^btree_test_async_ctxt_any_used(const btree_test_async_lookup *async_lookup)$/;"	f	file:
btree_test_async_ctxt_init	external/splinterdb/tests/functional/btree_test.c	/^btree_test_async_ctxt_init(btree_test_async_lookup *async_lookup)$/;"	f	file:
btree_test_async_ctxt_is_used	external/splinterdb/tests/functional/btree_test.c	/^btree_test_async_ctxt_is_used(const btree_test_async_lookup *async_lookup,$/;"	f	file:
btree_test_async_lookup	external/splinterdb/tests/functional/btree_test.c	/^} btree_test_async_lookup;$/;"	t	typeref:struct:__anon56	file:
btree_test_get_async_ctxt	external/splinterdb/tests/functional/btree_test.c	/^btree_test_get_async_ctxt(btree_config            *cfg,$/;"	f	file:
btree_test_put_async_ctxt	external/splinterdb/tests/functional/btree_test.c	/^btree_test_put_async_ctxt(btree_test_async_lookup *async_lookup,$/;"	f	file:
btree_test_run_pending	external/splinterdb/tests/functional/btree_test.c	/^btree_test_run_pending(cache                   *cc,$/;"	f	file:
btree_test_wait_pending	external/splinterdb/tests/functional/btree_test.c	/^btree_test_wait_pending(cache                   *cc,$/;"	f	file:
btree_truncate_index	external/splinterdb/src/btree.c	/^btree_truncate_index(const btree_config *cfg, \/\/ IN$/;"	f	file:
btree_truncate_leaf	external/splinterdb/src/btree.c	/^btree_truncate_leaf(const btree_config *cfg, \/\/ IN$/;"	f	file:
btree_try_perform_leaf_incorporate_spec	external/splinterdb/src/btree.c	/^btree_try_perform_leaf_incorporate_spec(const btree_config          *cfg,$/;"	f
btree_unblock_dec_ref	external/splinterdb/src/btree.c	/^btree_unblock_dec_ref(cache *cc, btree_config *cfg, uint64 root_addr)$/;"	f
btree_verify_node	external/splinterdb/src/btree.c	/^btree_verify_node(cache        *cc,$/;"	f
btree_verify_tree	external/splinterdb/src/btree.c	/^btree_verify_tree(cache *cc, btree_config *cfg, uint64 addr, page_type type)$/;"	f
bucket	external/splinterdb/src/routing_filter.h	/^   uint32              bucket;      \/\/ hash bucket$/;"	m	struct:routing_async_ctxt
bucket_limits	external/splinterdb/src/platform_linux/platform_types.h	/^   const long   *bucket_limits;$/;"	m	struct:__anon33
buckets	include/ll_table.h	/^	ll_list **buckets;$/;"	m	struct:ll_table
buckets_	other_filters/acf/src/mirroredtable.h	/^		Bucket *buckets_;$/;"	m	class:cuckoofilter::MirroredTable
buckets_	other_filters/acf/src/packedtable.h	/^  char *buckets_;$/;"	m	class:cuckoofilter::PackedTable
buckets_	other_filters/acf/src/singletable.h	/^  Bucket *buckets_;$/;"	m	class:cuckoofilter::SingleTable
buckets_	other_filters/acfsim/src/mirroredtable.h	/^		Bucket *buckets_;$/;"	m	class:cuckoofilter::MirroredTable
buckets_	other_filters/acfsim/src/packedtable.h	/^  char *buckets_;$/;"	m	class:cuckoofilter::PackedTable
buckets_	other_filters/acfsim/src/singletable.h	/^  Bucket *buckets_;$/;"	m	class:cuckoofilter::SingleTable
buckets_	other_filters/cf/src/packedtable.h	/^  char *buckets_;$/;"	m	class:cuckoofilter::PackedTable
buckets_	other_filters/cf/src/singletable.h	/^  Bucket *buckets_;$/;"	m	class:cuckoofilter::SingleTable
buf	other_filters/cqf/src/bm.c	/^	char *buf;$/;"	m	struct:uniform_online_state	file:
buf	src/bm.c	/^	char *buf;$/;"	m	struct:uniform_online_state	file:
buffer	external/splinterdb/src/util.h	/^   void            *buffer;$/;"	m	struct:writable_buffer
buffer	external/splinterdb/tests/functional/test_splinter_shadow.h	/^   buffer_handle buffer;$/;"	m	struct:test_splinter_shadow_array
buffer_capacity	external/splinterdb/src/util.h	/^   uint64           buffer_capacity;$/;"	m	struct:writable_buffer
buffer_handle	external/splinterdb/src/platform_linux/platform_types.h	/^} buffer_handle;$/;"	t	typeref:struct:__anon32
bulk_insert_sort_hashes	src/gqf.c	/^void bulk_insert_sort_hashes(const QF *qf, uint64_t *keys, int nkeys) {$/;"	f
bulk_insert_sort_hashes	src/gqf_backup.c	/^void bulk_insert_sort_hashes(const QF *qf, uint64_t *keys, int nkeys) {$/;"	f
bundle	external/splinterdb/src/trunk.c	/^   trunk_bundle    bundle[TRUNK_MAX_BUNDLES];$/;"	m	struct:trunk_hdr	file:
bundle_no	external/splinterdb/src/trunk.c	/^   uint16                bundle_no;$/;"	m	struct:trunk_compact_bundle_req	file:
bytes	external/splinterdb/src/data_internal.h	/^   char              bytes[];$/;"	m	struct:ondisk_key
bytes	external/splinterdb/src/platform_linux/laio.h	/^   uint64         bytes;        \/\/ total bytes in the IO request$/;"	m	struct:io_async_req
bytes_to_hex	other_filters/acf/src/printutil.cc	/^std::string PrintUtil::bytes_to_hex(const char *data, size_t len) {$/;"	f	class:cuckoofilter::PrintUtil
bytes_to_hex	other_filters/acf/src/printutil.cc	/^std::string PrintUtil::bytes_to_hex(const std::string &s) {$/;"	f	class:cuckoofilter::PrintUtil
bytes_to_hex	other_filters/acf/src/printutil.h	/^  static std::string bytes_to_hex(const char *data, size_t len) {$/;"	f	class:cuckoofilter::PrintUtil
bytes_to_hex	other_filters/acf/src/printutil.h	/^  static std::string bytes_to_hex(const std::string &s) {$/;"	f	class:cuckoofilter::PrintUtil
bytes_to_hex	other_filters/acfsim/src/printutil.cc	/^std::string PrintUtil::bytes_to_hex(const char *data, size_t len) {$/;"	f	class:cuckoofilter::PrintUtil
bytes_to_hex	other_filters/acfsim/src/printutil.cc	/^std::string PrintUtil::bytes_to_hex(const std::string &s) {$/;"	f	class:cuckoofilter::PrintUtil
bytes_to_hex	other_filters/acfsim/src/printutil.h	/^  static std::string bytes_to_hex(const char *data, size_t len) {$/;"	f	class:cuckoofilter::PrintUtil
bytes_to_hex	other_filters/acfsim/src/printutil.h	/^  static std::string bytes_to_hex(const std::string &s) {$/;"	f	class:cuckoofilter::PrintUtil
bytes_to_hex	other_filters/cf/src/printutil.cc	/^std::string PrintUtil::bytes_to_hex(const char *data, size_t len) {$/;"	f	class:cuckoofilter::PrintUtil
bytes_to_hex	other_filters/cf/src/printutil.cc	/^std::string PrintUtil::bytes_to_hex(const std::string &s) {$/;"	f	class:cuckoofilter::PrintUtil
bytes_to_hex	other_filters/cf/src/printutil.h	/^  static std::string bytes_to_hex(const char *data, size_t len) {$/;"	f	class:cuckoofilter::PrintUtil
bytes_to_hex	other_filters/cf/src/printutil.h	/^  static std::string bytes_to_hex(const std::string &s) {$/;"	f	class:cuckoofilter::PrintUtil
bytes_to_str	external/splinterdb/scripts/run_ycsb.py	/^def bytes_to_str(byte_count):$/;"	f
c	src/test_micro_read.c	/^	uint64_t c;$/;"	m	struct:operation	file:
c_info	include/gqf_int.h	/^		cluster_data *c_info;$/;"	m	struct:quotient_filter_iterator
c_info	other_filters/cqf/include/gqf_int.h	/^		cluster_data *c_info;$/;"	m	struct:quotient_filter_iterator
cache	external/splinterdb/src/cache.h	/^struct cache {$/;"	s
cache	external/splinterdb/src/cache.h	/^typedef struct cache        cache;$/;"	t	typeref:struct:cache
cache_aligned_uint32	external/splinterdb/src/platform_linux/platform.h	/^} PLATFORM_CACHELINE_ALIGNED cache_aligned_uint32;$/;"	t	typeref:struct:__anon26
cache_aligned_uint64	external/splinterdb/src/platform_linux/platform.h	/^} PLATFORM_CACHELINE_ALIGNED cache_aligned_uint64;$/;"	t	typeref:struct:__anon25
cache_alloc	external/splinterdb/src/cache.h	/^cache_alloc(cache *cc, uint64 addr, page_type type)$/;"	f
cache_assert_free	external/splinterdb/src/cache.h	/^cache_assert_free(cache *cc)$/;"	f
cache_assert_ungot	external/splinterdb/src/cache.h	/^cache_assert_ungot(cache *cc, uint64 addr)$/;"	f
cache_async_cb	external/splinterdb/src/cache.h	/^typedef void (*cache_async_cb)(struct cache_async_ctxt *ctxt);$/;"	t
cache_async_ctxt	external/splinterdb/src/cache.h	/^typedef struct cache_async_ctxt {$/;"	s
cache_async_ctxt	external/splinterdb/src/cache.h	/^} cache_async_ctxt;$/;"	t	typeref:struct:cache_async_ctxt
cache_async_done	external/splinterdb/src/cache.h	/^cache_async_done(cache *cc, page_type type, cache_async_ctxt *ctxt)$/;"	f
cache_async_result	external/splinterdb/src/cache.h	/^} cache_async_result;$/;"	t	typeref:enum:__anon22
cache_capacity	external/splinterdb/tests/config.h	/^   uint64 cache_capacity;$/;"	m	struct:master_config
cache_cfg	external/splinterdb/src/btree.h	/^   cache_config *cache_cfg;$/;"	m	struct:btree_config
cache_cfg	external/splinterdb/src/routing_filter.h	/^   cache_config *cache_cfg;$/;"	m	struct:routing_config
cache_cfg	external/splinterdb/src/shard_log.h	/^   cache_config *cache_cfg;$/;"	m	struct:shard_log_config
cache_cfg	external/splinterdb/src/splinterdb.c	/^   clockcache_config  cache_cfg;$/;"	m	struct:splinterdb	file:
cache_cfg	external/splinterdb/src/trunk.h	/^   cache_config *cache_cfg;$/;"	m	struct:trunk_config
cache_cleanup	external/splinterdb/src/cache.h	/^cache_cleanup(cache *cc)$/;"	f
cache_config	external/splinterdb/src/cache.h	/^typedef struct cache_config cache_config;$/;"	t	typeref:struct:cache_config
cache_config	external/splinterdb/src/cache.h	/^typedef struct cache_config {$/;"	s
cache_config	external/splinterdb/src/cache.h	/^} cache_config;$/;"	t	typeref:struct:cache_config
cache_config_extent_page	external/splinterdb/src/cache.h	/^cache_config_extent_page(const cache_config *cfg, uint64 extent_addr, uint64 i)$/;"	f
cache_config_extent_size	external/splinterdb/src/cache.h	/^cache_config_extent_size(const cache_config *cfg)$/;"	f
cache_config_fn	external/splinterdb/src/cache.h	/^typedef cache_config *(*cache_config_fn)(const cache *cc);$/;"	t
cache_config_generic_uint64_fn	external/splinterdb/src/cache.h	/^typedef uint64 (*cache_config_generic_uint64_fn)(const cache_config *cfg);$/;"	t
cache_config_ops	external/splinterdb/src/cache.h	/^typedef struct cache_config_ops {$/;"	s
cache_config_ops	external/splinterdb/src/cache.h	/^} cache_config_ops;$/;"	t	typeref:struct:cache_config_ops
cache_config_page_size	external/splinterdb/src/cache.h	/^cache_config_page_size(const cache_config *cfg)$/;"	f
cache_config_pages_per_extent	external/splinterdb/src/cache.h	/^cache_config_pages_per_extent(const cache_config *cfg)$/;"	f
cache_count_dirty	external/splinterdb/src/cache.h	/^cache_count_dirty(cache *cc)$/;"	f
cache_ctxt	external/splinterdb/src/btree.h	/^   cache_async_ctxt *cache_ctxt; \/\/ cache ctxt for async get$/;"	m	struct:btree_async_ctxt
cache_ctxt	external/splinterdb/src/routing_filter.h	/^   cache_async_ctxt   *cache_ctxt;  \/\/ cache ctxt for async get$/;"	m	struct:routing_async_ctxt
cache_ctxt	external/splinterdb/src/trunk.h	/^   cache_async_ctxt cache_ctxt; \/\/ Async cache context$/;"	m	struct:trunk_async_ctxt
cache_ctxt	external/splinterdb/tests/functional/btree_test.c	/^   cache_async_ctxt  cache_ctxt;$/;"	m	struct:__anon55	file:
cache_ctxt_init	external/splinterdb/src/cache.h	/^cache_ctxt_init(cache            *cc,$/;"	f
cache_enable_sync_get	external/splinterdb/src/cache.h	/^cache_enable_sync_get(cache *cc, bool32 enabled)$/;"	f
cache_evict	external/splinterdb/src/cache.h	/^cache_evict(cache *cc, bool32 ignore_pinned_pages)$/;"	f
cache_extent_discard	external/splinterdb/src/cache.h	/^cache_extent_discard(cache *cc, uint64 addr, page_type type)$/;"	f
cache_extent_size	external/splinterdb/src/cache.h	/^cache_extent_size(const cache *cc)$/;"	f
cache_extent_sync	external/splinterdb/src/cache.h	/^cache_extent_sync(cache *cc, uint64 addr, uint64 *pages_outstanding)$/;"	f
cache_flush	external/splinterdb/src/cache.h	/^cache_flush(cache *cc)$/;"	f
cache_generic_fn	external/splinterdb/src/cache.h	/^typedef void (*cache_generic_fn)(cache *cc);$/;"	t
cache_generic_uint64_fn	external/splinterdb/src/cache.h	/^typedef uint64 (*cache_generic_uint64_fn)(cache *cc);$/;"	t
cache_get	external/splinterdb/src/cache.h	/^cache_get(cache *cc, uint64 addr, bool32 blocking, page_type type)$/;"	f
cache_get_allocator	external/splinterdb/src/cache.h	/^cache_get_allocator(const cache *cc)$/;"	f
cache_get_async	external/splinterdb/src/cache.h	/^cache_get_async(cache *cc, uint64 addr, page_type type, cache_async_ctxt *ctxt)$/;"	f
cache_get_config	external/splinterdb/src/cache.h	/^cache_get_config(const cache *cc)$/;"	f
cache_get_read_ref	external/splinterdb/src/cache.h	/^cache_get_read_ref(cache *cc, page_handle *page)$/;"	f
cache_handle	external/splinterdb/src/splinterdb.c	/^   clockcache         cache_handle;$/;"	m	struct:splinterdb	file:
cache_hits	external/splinterdb/src/cache.h	/^   uint64 cache_hits[NUM_PAGE_TYPES];$/;"	m	struct:cache_stats
cache_io_stats	external/splinterdb/src/cache.h	/^cache_io_stats(cache *cc, uint64 *read_bytes, uint64 *write_bytes)$/;"	f
cache_lock	external/splinterdb/src/cache.h	/^cache_lock(cache *cc, page_handle *page)$/;"	f
cache_logfile	external/splinterdb/include/splinterdb/splinterdb.h	/^   const char *cache_logfile;$/;"	m	struct:splinterdb_config
cache_logfile	external/splinterdb/tests/config.h	/^   char   cache_logfile[MAX_STRING_LENGTH];$/;"	m	struct:master_config
cache_mark_dirty	external/splinterdb/src/cache.h	/^cache_mark_dirty(cache *cc, page_handle *page)$/;"	f
cache_miss_time_ns	external/splinterdb/src/cache.h	/^   uint64 cache_miss_time_ns[NUM_PAGE_TYPES];$/;"	m	struct:cache_stats
cache_misses	external/splinterdb/src/cache.h	/^   uint64 cache_misses[NUM_PAGE_TYPES];$/;"	m	struct:cache_stats
cache_ops	external/splinterdb/src/cache.h	/^typedef struct cache_ops {$/;"	s
cache_ops	external/splinterdb/src/cache.h	/^} cache_ops;$/;"	t	typeref:struct:cache_ops
cache_page_size	external/splinterdb/src/cache.h	/^cache_page_size(const cache *cc)$/;"	f
cache_page_sync	external/splinterdb/src/cache.h	/^cache_page_sync(cache       *cc,$/;"	f
cache_pages_per_extent	external/splinterdb/src/cache.h	/^cache_pages_per_extent(const cache *cc)$/;"	f
cache_pin	external/splinterdb/src/cache.h	/^cache_pin(cache *cc, page_handle *page)$/;"	f
cache_prefetch	external/splinterdb/src/cache.h	/^cache_prefetch(cache *cc, uint64 addr, page_type type)$/;"	f
cache_present	external/splinterdb/src/cache.h	/^   cache_present_fn     cache_present;$/;"	m	struct:cache_ops
cache_present	external/splinterdb/src/cache.h	/^cache_present(cache *cc, page_handle *page)$/;"	f
cache_present_fn	external/splinterdb/src/cache.h	/^typedef bool32 (*cache_present_fn)(cache *cc, page_handle *page);$/;"	t
cache_print	external/splinterdb/src/cache.h	/^cache_print(platform_log_handle *log_handle, cache *cc)$/;"	f
cache_print_fn	external/splinterdb/src/cache.h	/^typedef void (*cache_print_fn)(platform_log_handle *log_handle, cache *cc);$/;"	t
cache_print_stats	external/splinterdb/src/cache.h	/^cache_print_stats(platform_log_handle *log_handle, cache *cc)$/;"	f
cache_reset_stats	external/splinterdb/src/cache.h	/^cache_reset_stats(cache *cc)$/;"	f
cache_size	external/splinterdb/include/splinterdb/splinterdb.h	/^   uint64      cache_size;$/;"	m	struct:splinterdb_config
cache_stats	external/splinterdb/src/cache.h	/^typedef struct cache_stats {$/;"	s
cache_stats	external/splinterdb/src/cache.h	/^} PLATFORM_CACHELINE_ALIGNED cache_stats;$/;"	t	typeref:struct:cache_stats
cache_test	external/splinterdb/tests/functional/cache_test.c	/^cache_test(int argc, char *argv[])$/;"	f
cache_test_alloc_extents	external/splinterdb/tests/functional/cache_test.c	/^cache_test_alloc_extents(cache             *cc,$/;"	f	file:
cache_test_dirty_flush	external/splinterdb/tests/functional/cache_test.c	/^cache_test_dirty_flush(cache                 *cc,$/;"	f	file:
cache_test_index_itor	external/splinterdb/tests/functional/cache_test.c	/^} cache_test_index_itor;$/;"	t	typeref:struct:__anon47	file:
cache_test_index_itor_get	external/splinterdb/tests/functional/cache_test.c	/^cache_test_index_itor_get(cache_test_index_itor *itor)$/;"	f	file:
cache_test_index_itor_hop_init	external/splinterdb/tests/functional/cache_test.c	/^cache_test_index_itor_hop_init(cache_test_index_itor *itor,$/;"	f	file:
cache_test_index_itor_mono_init	external/splinterdb/tests/functional/cache_test.c	/^cache_test_index_itor_mono_init(cache_test_index_itor *itor,$/;"	f	file:
cache_test_index_itor_rand_init	external/splinterdb/tests/functional/cache_test.c	/^cache_test_index_itor_rand_init(cache_test_index_itor *itor,$/;"	f	file:
cache_try_claim	external/splinterdb/src/cache.h	/^cache_try_claim(cache *cc, page_handle *page)$/;"	f
cache_unclaim	external/splinterdb/src/cache.h	/^cache_unclaim(cache *cc, page_handle *page)$/;"	f
cache_unget	external/splinterdb/src/cache.h	/^cache_unget(cache *cc, page_handle *page)$/;"	f
cache_unlock	external/splinterdb/src/cache.h	/^cache_unlock(cache *cc, page_handle *page)$/;"	f
cache_unpin	external/splinterdb/src/cache.h	/^cache_unpin(cache *cc, page_handle *page)$/;"	f
cache_use_stats	external/splinterdb/include/splinterdb/splinterdb.h	/^   _Bool       cache_use_stats;$/;"	m	struct:splinterdb_config
cache_use_stats	external/splinterdb/tests/config.h	/^   bool32 cache_use_stats;$/;"	m	struct:master_config
cache_validate_page	external/splinterdb/src/cache.h	/^cache_validate_page(cache *cc, page_handle *page, uint64 addr)$/;"	f
cacheline_capacity	external/splinterdb/src/clockcache.h	/^   uint64 cacheline_capacity;$/;"	m	struct:clockcache_config
cachestress_tests	external/splinterdb/scripts/list_test.py	/^cachestress_tests = [$/;"	v
calc_ext_bits	other_filters/taf/src/exaf.c	/^static uint64_t calc_ext_bits(const ExAF* filter, uint64_t hash, size_t len) {$/;"	f	file:
calc_quot	other_filters/taf/src/exaf.c	/^static size_t calc_quot(const ExAF* filter, uint64_t hash) {$/;"	f	file:
calc_quot	other_filters/taf/src/rsqf.c	/^static size_t calc_quot(const RSQF* filter, uint64_t hash) {$/;"	f	file:
calc_quot	other_filters/taf/src/splinter_taf.c	/^static size_t calc_quot(const TAF* filter, uint64_t hash) {$/;"	f	file:
calc_quot	other_filters/taf/src/taf.c	/^static size_t calc_quot(const TAF* filter, uint64_t hash) {$/;"	f	file:
calc_quot	other_filters/taf/src/taf.cc	/^static size_t calc_quot(const TAF* filter, uint64_t hash) {$/;"	f	file:
calc_quot	other_filters/taf/src/taf_sim.c	/^static size_t calc_quot(const TAF* filter, uint64_t hash) {$/;"	f	file:
calc_quot	other_filters/taf/src/utaf.c	/^static size_t calc_quot(const FullTAF* filter, uint64_t hash) {$/;"	f	file:
calc_quot	src/taf.cc	/^static size_t calc_quot(const TAF* filter, uint64_t hash) {$/;"	f	file:
calc_rem	other_filters/taf/src/exaf.c	/^static rem_t calc_rem(const ExAF* filter, const uint64_t hash) {$/;"	f	file:
calc_rem	other_filters/taf/src/rsqf.c	/^static rem_t calc_rem(const RSQF* filter, const uint64_t hash) {$/;"	f	file:
calc_rem	other_filters/taf/src/splinter_taf.c	/^static rem_t calc_rem(const TAF* filter, uint64_t hash, int k) {$/;"	f	file:
calc_rem	other_filters/taf/src/taf.c	/^static rem_t calc_rem(const TAF* filter, uint64_t hash, int k) {$/;"	f	file:
calc_rem	other_filters/taf/src/taf.cc	/^static rem_t calc_rem(const TAF* filter, uint64_t hash, int k) {$/;"	f	file:
calc_rem	other_filters/taf/src/taf_sim.c	/^static rem_t calc_rem(const TAF* filter, uint64_t hash, int k) {$/;"	f	file:
calc_rem	other_filters/taf/src/utaf.c	/^static rem_t calc_rem(const FullTAF* filter, uint64_t hash, int k) {$/;"	f	file:
calc_rem	src/taf.cc	/^static rem_t calc_rem(const TAF* filter, uint64_t hash, int k) {$/;"	f	file:
callback	external/splinterdb/src/platform_linux/laio.h	/^   io_callback_fn callback;     \/\/ issuer callback$/;"	m	struct:io_async_req
can_free	external/splinterdb/src/util.h	/^   bool32           can_free;$/;"	m	struct:writable_buffer
can_next	external/splinterdb/src/iterator.h	/^   iterator_bound_fn can_next;$/;"	m	struct:iterator_ops
can_next	external/splinterdb/src/merge.h	/^   bool32       can_next;$/;"	m	struct:merge_iterator
can_next	external/splinterdb/src/trunk.h	/^   bool32          can_next;$/;"	m	struct:trunk_range_iterator
can_prev	external/splinterdb/src/iterator.h	/^   iterator_bound_fn can_prev;$/;"	m	struct:iterator_ops
can_prev	external/splinterdb/src/merge.h	/^   bool32       can_prev;$/;"	m	struct:merge_iterator
can_prev	external/splinterdb/src/trunk.h	/^   bool32          can_prev;$/;"	m	struct:trunk_range_iterator
capacity	external/splinterdb/src/allocator.h	/^   uint64     capacity;$/;"	m	struct:allocator_config
capacity	external/splinterdb/src/clockcache.h	/^   uint64       capacity;$/;"	m	struct:clockcache_config
cat_exec_log_file	external/splinterdb/test.sh	/^function cat_exec_log_file() {$/;"	f
cb	external/splinterdb/src/btree.h	/^   btree_async_cb cb;$/;"	m	struct:btree_async_ctxt
cb	external/splinterdb/src/cache.h	/^   cache_async_cb  cb;     \/\/ IN callback for async_io_started$/;"	m	struct:cache_async_ctxt
cb	external/splinterdb/src/routing_filter.h	/^   routing_async_cb cb;$/;"	m	struct:routing_async_ctxt
cb	external/splinterdb/src/trunk.h	/^   trunk_async_cb cb; \/\/ IN: callback (requeues ctxt$/;"	m	struct:trunk_async_ctxt
cbdata	external/splinterdb/src/cache.h	/^   void           *cbdata; \/\/ IN opaque callback data$/;"	m	struct:cache_async_ctxt
cc	external/splinterdb/src/btree.h	/^   cache        *cc;$/;"	m	struct:btree_iterator
cc	external/splinterdb/src/btree.h	/^   cache        *cc;$/;"	m	struct:btree_pack_req
cc	external/splinterdb/src/cache.h	/^   cache          *cc;     \/\/ IN cache$/;"	m	struct:cache_async_ctxt
cc	external/splinterdb/src/clockcache.c	/^   clockcache *cc;$/;"	m	struct:clockcache_sync_callback_req	file:
cc	external/splinterdb/src/memtable.h	/^   cache          *cc;$/;"	m	struct:memtable_context
cc	external/splinterdb/src/mini_allocator.h	/^   cache          *cc;$/;"	m	struct:mini_allocator
cc	external/splinterdb/src/shard_log.h	/^   cache                *cc;$/;"	m	struct:shard_log
cc	external/splinterdb/src/trunk.h	/^   cache         *cc;$/;"	m	struct:trunk_handle
cc	external/splinterdb/tests/functional/btree_test.c	/^   cache             *cc;$/;"	m	struct:test_memtable_context	file:
cc	external/splinterdb/tests/functional/cache_test.c	/^   cache             *cc;                      \/\/ IN$/;"	m	struct:__anon54	file:
cc	external/splinterdb/tests/unit/btree_stress_test.c	/^   cache           *cc;$/;"	m	struct:insert_thread_params	file:
cf	other_filters/cqf/src/test_threadsafe.c	/^	QF *cf;$/;"	m	struct:insert_args	file:
cf	src/test_threadsafe.c	/^	QF *cf;$/;"	m	struct:insert_args	file:
cfg	external/splinterdb/src/btree.h	/^   btree_config *cfg;$/;"	m	struct:btree_iterator
cfg	external/splinterdb/src/btree.h	/^   btree_config *cfg;$/;"	m	struct:btree_pack_req
cfg	external/splinterdb/src/clockcache.h	/^   clockcache_config *cfg;$/;"	m	struct:clockcache
cfg	external/splinterdb/src/memtable.h	/^   btree_config           *cfg;$/;"	m	struct:memtable
cfg	external/splinterdb/src/memtable.h	/^   memtable_config cfg;$/;"	m	struct:memtable_context
cfg	external/splinterdb/src/merge.c	/^   data_config *cfg;$/;"	m	struct:merge_ctxt	file:
cfg	external/splinterdb/src/merge.h	/^   data_config *cfg;           \/\/ point message tree data config$/;"	m	struct:merge_iterator
cfg	external/splinterdb/src/platform_linux/laio.h	/^   io_config         *cfg;$/;"	m	struct:laio_handle
cfg	external/splinterdb/src/rc_allocator.h	/^   allocator_config       *cfg;$/;"	m	struct:rc_allocator
cfg	external/splinterdb/src/shard_log.h	/^   shard_log_config     *cfg;$/;"	m	struct:shard_log
cfg	external/splinterdb/src/shard_log.h	/^   shard_log_config *cfg;$/;"	m	struct:shard_log_iterator
cfg	external/splinterdb/src/task.h	/^   const task_system_config *cfg;$/;"	m	struct:task_system
cfg	external/splinterdb/src/trunk.h	/^   trunk_config          cfg;$/;"	m	struct:trunk_handle
cfg	external/splinterdb/tests/functional/btree_test.c	/^   test_btree_config     *cfg;$/;"	m	struct:test_btree_thread_params	file:
cfg	external/splinterdb/tests/functional/btree_test.c	/^   test_btree_config *cfg;$/;"	m	struct:test_memtable_context	file:
cfg	external/splinterdb/tests/functional/cache_test.c	/^   clockcache_config *cfg;                     \/\/ IN$/;"	m	struct:__anon54	file:
cfg	external/splinterdb/tests/unit/btree_stress_test.c	/^   btree_config    *cfg;$/;"	m	struct:insert_thread_params	file:
check_current_tuple	external/splinterdb/tests/unit/splinterdb_quick_test.c	/^check_current_tuple(splinterdb_iterator *it, const int expected_i)$/;"	f	file:
check_exists	external/splinterdb/ci/tasks/pr-check-shell-scripts.sh	/^check_exists() {$/;"	f
check_one_debug_hex_encode	external/splinterdb/tests/unit/util_test.c	/^check_one_debug_hex_encode(size_t      dst_len,$/;"	f	file:
checkpointed	external/splinterdb/src/trunk.c	/^   bool32      checkpointed;$/;"	m	struct:trunk_super_block	file:
checksum	external/splinterdb/src/rc_allocator.h	/^   checksum128       checksum;$/;"	m	struct:rc_allocator_meta_page
checksum	external/splinterdb/src/shard_log.h	/^   checksum128 checksum;$/;"	m	struct:shard_log_hdr
checksum	external/splinterdb/src/trunk.c	/^   checksum128 checksum;$/;"	m	struct:trunk_super_block	file:
checksum128	external/splinterdb/src/platform_linux/platform_types.h	/^typedef XXH128_hash_t checksum128;$/;"	t
checksum32	external/splinterdb/src/platform_linux/platform_types.h	/^typedef XXH32_hash_t  checksum32;$/;"	t
checksum64	external/splinterdb/src/platform_linux/platform_types.h	/^typedef XXH64_hash_t  checksum64;$/;"	t
child_addr	external/splinterdb/src/btree.h	/^   uint64            child_addr; \/\/ Child disk address$/;"	m	struct:btree_async_ctxt
child_addr	external/splinterdb/src/btree.h	/^   uint64            child_addr;$/;"	m	struct:btree_pivot_data
choose_key	external/splinterdb/tests/functional/test_functionality.c	/^choose_key(data_config                *cfg,         \/\/ IN$/;"	f	file:
claim	external/splinterdb/src/platform_linux/platform_types.h	/^   volatile uint8 claim;$/;"	m	struct:__anon30
cleaner_gap	external/splinterdb/src/clockcache.h	/^   uint64           cleaner_gap;$/;"	m	struct:clockcache
cleanup	external/splinterdb/src/cache.h	/^   cache_generic_fn     cleanup;$/;"	m	struct:cache_ops
cleanup	external/splinterdb/src/io.h	/^   io_cleanup_fn             cleanup;$/;"	m	struct:io_ops
cleanup_time	external/splinterdb/tests/functional/ycsb_test.c	/^   uint64_t cleanup_time;$/;"	m	struct:running_times	file:
clear_log	src/test_deletions.c	/^int clear_log() {$/;"	f
clear_log	src/test_fill_varied_throughput.c	/^int clear_log() {$/;"	f
clear_log	src/test_hash_accesses.c	/^int clear_log() {$/;"	f
clear_log	src/test_near_full.c	/^int clear_log() {$/;"	f
clear_log	src/test_throughput_old.c	/^int clear_log() {$/;"	f
clock_time	external/splinterdb/scripts/run_ycsb.py	/^                    clock_time = int(stats_lines[1].split()[1])$/;"	v
clock_time_sec	external/splinterdb/scripts/run_ycsb.py	/^                        clock_time_sec = clock_time \/ 1000 \/ 1000 \/ 1000$/;"	v
clockcache	external/splinterdb/src/clockcache.h	/^struct clockcache {$/;"	s
clockcache	external/splinterdb/src/clockcache.h	/^typedef struct clockcache       clockcache;$/;"	t	typeref:struct:clockcache
clockcache_alloc	external/splinterdb/src/clockcache.c	/^clockcache_alloc(clockcache *cc, uint64 addr, page_type type)$/;"	f
clockcache_alloc_virtual	external/splinterdb/src/clockcache.c	/^clockcache_alloc_virtual(cache *c, uint64 addr, page_type type)$/;"	f
clockcache_assert_clean	external/splinterdb/src/clockcache.c	/^clockcache_assert_clean(clockcache *cc)$/;"	f
clockcache_assert_no_locks_held	external/splinterdb/src/clockcache.c	/^clockcache_assert_no_locks_held(clockcache *cc)$/;"	f
clockcache_assert_no_locks_held_virtual	external/splinterdb/src/clockcache.c	/^clockcache_assert_no_locks_held_virtual(cache *c)$/;"	f
clockcache_assert_no_refs	external/splinterdb/src/clockcache.c	/^clockcache_assert_no_refs(clockcache *cc)$/;"	f
clockcache_assert_no_refs_and_pins	external/splinterdb/src/clockcache.c	/^clockcache_assert_no_refs_and_pins(clockcache *cc)$/;"	f
clockcache_assert_ungot	external/splinterdb/src/clockcache.c	/^clockcache_assert_ungot(clockcache *cc, uint64 addr)$/;"	f
clockcache_assert_ungot_virtual	external/splinterdb/src/clockcache.c	/^clockcache_assert_ungot_virtual(cache *c, uint64 addr)$/;"	f
clockcache_async_done	external/splinterdb/src/clockcache.c	/^clockcache_async_done(clockcache *cc, page_type type, cache_async_ctxt *ctxt)$/;"	f
clockcache_async_done_virtual	external/splinterdb/src/clockcache.c	/^clockcache_async_done_virtual(cache *c, page_type type, cache_async_ctxt *ctxt)$/;"	f
clockcache_batch_start_writeback	external/splinterdb/src/clockcache.c	/^clockcache_batch_start_writeback(clockcache *cc, uint64 batch, bool32 is_urgent)$/;"	f
clockcache_clear_flag	external/splinterdb/src/clockcache.c	/^clockcache_clear_flag(clockcache *cc, uint32 entry_number, entry_status flag)$/;"	f	file:
clockcache_close_log_stream	external/splinterdb/src/clockcache.c	115;"	d	file:
clockcache_close_log_stream	external/splinterdb/src/clockcache.c	117;"	d	file:
clockcache_config	external/splinterdb/src/clockcache.h	/^typedef struct clockcache_config {$/;"	s
clockcache_config	external/splinterdb/src/clockcache.h	/^} clockcache_config;$/;"	t	typeref:struct:clockcache_config
clockcache_config_extent_size	external/splinterdb/src/clockcache.c	/^clockcache_config_extent_size(const clockcache_config *cfg)$/;"	f	file:
clockcache_config_extent_size_virtual	external/splinterdb/src/clockcache.c	/^clockcache_config_extent_size_virtual(const cache_config *cfg)$/;"	f
clockcache_config_init	external/splinterdb/src/clockcache.c	/^clockcache_config_init(clockcache_config *cache_cfg,$/;"	f
clockcache_config_ops	external/splinterdb/src/clockcache.c	/^cache_config_ops clockcache_config_ops = {$/;"	v
clockcache_config_page_size	external/splinterdb/src/clockcache.c	/^clockcache_config_page_size(const clockcache_config *cfg)$/;"	f	file:
clockcache_config_page_size_virtual	external/splinterdb/src/clockcache.c	/^clockcache_config_page_size_virtual(const cache_config *cfg)$/;"	f
clockcache_count_dirty	external/splinterdb/src/clockcache.c	/^clockcache_count_dirty(clockcache *cc)$/;"	f
clockcache_count_dirty_virtual	external/splinterdb/src/clockcache.c	/^clockcache_count_dirty_virtual(cache *c)$/;"	f
clockcache_data_to_entry	external/splinterdb/src/clockcache.c	/^clockcache_data_to_entry(const clockcache *cc, char *data)$/;"	f	file:
clockcache_data_to_entry_number	external/splinterdb/src/clockcache.c	/^clockcache_data_to_entry_number(const clockcache *cc, char *data)$/;"	f	file:
clockcache_dec_pin	external/splinterdb/src/clockcache.c	/^clockcache_dec_pin(clockcache *cc, uint32 entry_number)$/;"	f	file:
clockcache_dec_ref	external/splinterdb/src/clockcache.c	/^clockcache_dec_ref(clockcache *cc, uint32 entry_number, threadid counter_no)$/;"	f	file:
clockcache_deinit	external/splinterdb/src/clockcache.c	/^clockcache_deinit(clockcache *cc) \/\/ IN\/OUT$/;"	f
clockcache_divide_by_page_size	external/splinterdb/src/clockcache.c	/^clockcache_divide_by_page_size(const clockcache *cc, uint64 addr)$/;"	f	file:
clockcache_enable_sync_get	external/splinterdb/src/clockcache.c	/^clockcache_enable_sync_get(clockcache *cc, bool32 enabled)$/;"	f	file:
clockcache_enable_sync_get_virtual	external/splinterdb/src/clockcache.c	/^clockcache_enable_sync_get_virtual(cache *c, bool32 enabled)$/;"	f
clockcache_entry	external/splinterdb/src/clockcache.h	/^struct clockcache_entry {$/;"	s
clockcache_entry	external/splinterdb/src/clockcache.h	/^typedef struct clockcache_entry clockcache_entry;$/;"	t	typeref:struct:clockcache_entry
clockcache_evict_all	external/splinterdb/src/clockcache.c	/^clockcache_evict_all(clockcache *cc, bool32 ignore_pinned_pages)$/;"	f
clockcache_evict_all_virtual	external/splinterdb/src/clockcache.c	/^clockcache_evict_all_virtual(cache *c, bool32 ignore_pinned)$/;"	f
clockcache_evict_batch	external/splinterdb/src/clockcache.c	/^clockcache_evict_batch(clockcache *cc, uint32 batch)$/;"	f
clockcache_extent_discard	external/splinterdb/src/clockcache.c	/^clockcache_extent_discard(clockcache *cc, uint64 addr, page_type type)$/;"	f
clockcache_extent_discard_virtual	external/splinterdb/src/clockcache.c	/^clockcache_extent_discard_virtual(cache *c, uint64 addr, page_type type)$/;"	f
clockcache_extent_size	external/splinterdb/src/clockcache.c	/^clockcache_extent_size(const clockcache *cc)$/;"	f	file:
clockcache_extent_sync	external/splinterdb/src/clockcache.c	/^clockcache_extent_sync(clockcache *cc, uint64 addr, uint64 *pages_outstanding)$/;"	f
clockcache_extent_sync_virtual	external/splinterdb/src/clockcache.c	/^clockcache_extent_sync_virtual(cache *c, uint64 addr, uint64 *pages_outstanding)$/;"	f
clockcache_flush	external/splinterdb/src/clockcache.c	/^clockcache_flush(clockcache *cc)$/;"	f
clockcache_flush_virtual	external/splinterdb/src/clockcache.c	/^clockcache_flush_virtual(cache *c)$/;"	f
clockcache_get	external/splinterdb/src/clockcache.c	/^clockcache_get(clockcache *cc, uint64 addr, bool32 blocking, page_type type)$/;"	f
clockcache_get_allocator	external/splinterdb/src/clockcache.c	/^clockcache_get_allocator(const clockcache *cc)$/;"	f	file:
clockcache_get_allocator_virtual	external/splinterdb/src/clockcache.c	/^clockcache_get_allocator_virtual(const cache *c)$/;"	f
clockcache_get_async	external/splinterdb/src/clockcache.c	/^clockcache_get_async(clockcache       *cc,   \/\/ IN$/;"	f
clockcache_get_async_virtual	external/splinterdb/src/clockcache.c	/^clockcache_get_async_virtual(cache            *c,$/;"	f
clockcache_get_config_virtual	external/splinterdb/src/clockcache.c	/^clockcache_get_config_virtual(const cache *c)$/;"	f
clockcache_get_entry	external/splinterdb/src/clockcache.c	/^clockcache_get_entry(clockcache *cc, uint32 entry_number)$/;"	f	file:
clockcache_get_free_page	external/splinterdb/src/clockcache.c	/^clockcache_get_free_page(clockcache *cc,$/;"	f
clockcache_get_internal	external/splinterdb/src/clockcache.c	/^clockcache_get_internal(clockcache   *cc,       \/\/ IN$/;"	f	file:
clockcache_get_pin	external/splinterdb/src/clockcache.c	/^clockcache_get_pin(clockcache *cc, uint32 entry_number)$/;"	f	file:
clockcache_get_read	external/splinterdb/src/clockcache.c	/^clockcache_get_read(clockcache *cc, uint32 entry_number)$/;"	f	file:
clockcache_get_read_ref	external/splinterdb/src/clockcache.c	/^clockcache_get_read_ref(clockcache *cc, page_handle *page)$/;"	f
clockcache_get_read_ref_virtual	external/splinterdb/src/clockcache.c	/^clockcache_get_read_ref_virtual(cache *c, page_handle *page)$/;"	f
clockcache_get_ref	external/splinterdb/src/clockcache.c	/^clockcache_get_ref(clockcache *cc, uint32 entry_number, uint64 counter_no)$/;"	f	file:
clockcache_get_ref_internal	external/splinterdb/src/clockcache.c	/^clockcache_get_ref_internal(clockcache *cc, uint32 entry_number)$/;"	f	file:
clockcache_get_status	external/splinterdb/src/clockcache.c	/^clockcache_get_status(clockcache *cc, uint32 entry_number)$/;"	f	file:
clockcache_get_virtual	external/splinterdb/src/clockcache.c	/^clockcache_get_virtual(cache *c, uint64 addr, bool32 blocking, page_type type)$/;"	f
clockcache_get_write	external/splinterdb/src/clockcache.c	/^clockcache_get_write(clockcache *cc, uint32 entry_number)$/;"	f	file:
clockcache_inc_pin	external/splinterdb/src/clockcache.c	/^clockcache_inc_pin(clockcache *cc, uint32 entry_number)$/;"	f	file:
clockcache_inc_ref	external/splinterdb/src/clockcache.c	/^clockcache_inc_ref(clockcache *cc, uint32 entry_number, threadid counter_no)$/;"	f	file:
clockcache_init	external/splinterdb/src/clockcache.c	/^clockcache_init(clockcache        *cc,   \/\/ OUT$/;"	f
clockcache_io_stats	external/splinterdb/src/clockcache.c	/^clockcache_io_stats(clockcache *cc, uint64 *read_bytes, uint64 *write_bytes)$/;"	f
clockcache_io_stats_virtual	external/splinterdb/src/clockcache.c	/^clockcache_io_stats_virtual(cache *c, uint64 *read_bytes, uint64 *write_bytes)$/;"	f
clockcache_lock	external/splinterdb/src/clockcache.c	/^clockcache_lock(clockcache *cc, page_handle *page)$/;"	f
clockcache_lock_virtual	external/splinterdb/src/clockcache.c	/^clockcache_lock_virtual(cache *c, page_handle *page)$/;"	f
clockcache_log	external/splinterdb/src/clockcache.c	62;"	d	file:
clockcache_log	external/splinterdb/src/clockcache.c	80;"	d	file:
clockcache_log	external/splinterdb/src/clockcache.c	93;"	d	file:
clockcache_log_stream	external/splinterdb/src/clockcache.c	71;"	d	file:
clockcache_log_stream	external/splinterdb/src/clockcache.c	89;"	d	file:
clockcache_log_stream	external/splinterdb/src/clockcache.c	99;"	d	file:
clockcache_lookup	external/splinterdb/src/clockcache.c	/^clockcache_lookup(const clockcache *cc, uint64 addr)$/;"	f	file:
clockcache_lookup_entry	external/splinterdb/src/clockcache.c	/^clockcache_lookup_entry(const clockcache *cc, uint64 addr)$/;"	f	file:
clockcache_mark_dirty	external/splinterdb/src/clockcache.c	/^clockcache_mark_dirty(clockcache *cc, page_handle *page)$/;"	f
clockcache_mark_dirty_virtual	external/splinterdb/src/clockcache.c	/^clockcache_mark_dirty_virtual(cache *c, page_handle *page)$/;"	f
clockcache_move_hand	external/splinterdb/src/clockcache.c	/^clockcache_move_hand(clockcache *cc, bool32 is_urgent)$/;"	f
clockcache_multiply_by_page_size	external/splinterdb/src/clockcache.c	/^clockcache_multiply_by_page_size(const clockcache *cc, uint64 addr)$/;"	f	file:
clockcache_ok_to_writeback	external/splinterdb/src/clockcache.c	/^clockcache_ok_to_writeback(clockcache *cc,$/;"	f	file:
clockcache_open_log_stream	external/splinterdb/src/clockcache.c	109;"	d	file:
clockcache_open_log_stream	external/splinterdb/src/clockcache.c	111;"	d	file:
clockcache_ops	external/splinterdb/src/clockcache.c	/^static cache_ops clockcache_ops = {$/;"	v	file:
clockcache_page_size	external/splinterdb/src/clockcache.c	/^clockcache_page_size(const clockcache *cc)$/;"	f	file:
clockcache_page_sync	external/splinterdb/src/clockcache.c	/^clockcache_page_sync(clockcache  *cc,$/;"	f
clockcache_page_sync_virtual	external/splinterdb/src/clockcache.c	/^clockcache_page_sync_virtual(cache       *c,$/;"	f
clockcache_page_to_entry	external/splinterdb/src/clockcache.c	/^clockcache_page_to_entry(const clockcache *cc, page_handle *page)$/;"	f	file:
clockcache_page_to_entry_number	external/splinterdb/src/clockcache.c	/^clockcache_page_to_entry_number(const clockcache *cc, page_handle *page)$/;"	f	file:
clockcache_pin	external/splinterdb/src/clockcache.c	/^clockcache_pin(clockcache *cc, page_handle *page)$/;"	f
clockcache_pin_virtual	external/splinterdb/src/clockcache.c	/^clockcache_pin_virtual(cache *c, page_handle *page)$/;"	f
clockcache_prefetch	external/splinterdb/src/clockcache.c	/^clockcache_prefetch(clockcache *cc, uint64 base_addr, page_type type)$/;"	f
clockcache_prefetch_callback	external/splinterdb/src/clockcache.c	/^clockcache_prefetch_callback(void           *metadata,$/;"	f
clockcache_prefetch_virtual	external/splinterdb/src/clockcache.c	/^clockcache_prefetch_virtual(cache *c, uint64 addr, page_type type)$/;"	f
clockcache_present	external/splinterdb/src/clockcache.c	/^clockcache_present(clockcache *cc, page_handle *page)$/;"	f
clockcache_present_virtual	external/splinterdb/src/clockcache.c	/^clockcache_present_virtual(cache *c, page_handle *page)$/;"	f
clockcache_print	external/splinterdb/src/clockcache.c	/^clockcache_print(platform_log_handle *log_handle, clockcache *cc)$/;"	f
clockcache_print_stats	external/splinterdb/src/clockcache.c	/^clockcache_print_stats(platform_log_handle *log_handle, clockcache *cc)$/;"	f
clockcache_print_stats_virtual	external/splinterdb/src/clockcache.c	/^clockcache_print_stats_virtual(platform_log_handle *log_handle, cache *c)$/;"	f
clockcache_print_virtual	external/splinterdb/src/clockcache.c	/^clockcache_print_virtual(platform_log_handle *log_handle, cache *c)$/;"	f
clockcache_read_async_callback	external/splinterdb/src/clockcache.c	/^clockcache_read_async_callback(void           *metadata,$/;"	f	file:
clockcache_record_backtrace	external/splinterdb/src/clockcache.c	/^clockcache_record_backtrace(clockcache *cc, uint32 entry_number)$/;"	f	file:
clockcache_record_backtrace	external/splinterdb/src/clockcache.c	668;"	d	file:
clockcache_reset_pin	external/splinterdb/src/clockcache.c	/^clockcache_reset_pin(clockcache *cc, uint32 entry_number)$/;"	f	file:
clockcache_reset_stats	external/splinterdb/src/clockcache.c	/^clockcache_reset_stats(clockcache *cc)$/;"	f
clockcache_reset_stats_virtual	external/splinterdb/src/clockcache.c	/^clockcache_reset_stats_virtual(cache *c)$/;"	f
clockcache_set_flag	external/splinterdb/src/clockcache.c	/^clockcache_set_flag(clockcache *cc, uint32 entry_number, entry_status flag)$/;"	f	file:
clockcache_sync_callback	external/splinterdb/src/clockcache.c	/^clockcache_sync_callback(void           *arg,$/;"	f
clockcache_sync_callback_req	external/splinterdb/src/clockcache.c	/^typedef struct clockcache_sync_callback_req {$/;"	s	file:
clockcache_sync_callback_req	external/splinterdb/src/clockcache.c	/^} clockcache_sync_callback_req;$/;"	t	typeref:struct:clockcache_sync_callback_req	file:
clockcache_test_flag	external/splinterdb/src/clockcache.c	/^clockcache_test_flag(clockcache *cc, uint32 entry_number, entry_status flag)$/;"	f	file:
clockcache_try_claim	external/splinterdb/src/clockcache.c	/^clockcache_try_claim(clockcache *cc, page_handle *page)$/;"	f
clockcache_try_claim_virtual	external/splinterdb/src/clockcache.c	/^clockcache_try_claim_virtual(cache *c, page_handle *page)$/;"	f
clockcache_try_evict	external/splinterdb/src/clockcache.c	/^clockcache_try_evict(clockcache *cc, uint32 entry_number)$/;"	f	file:
clockcache_try_get_claim	external/splinterdb/src/clockcache.c	/^clockcache_try_get_claim(clockcache *cc, uint32 entry_number)$/;"	f	file:
clockcache_try_get_read	external/splinterdb/src/clockcache.c	/^clockcache_try_get_read(clockcache *cc, uint32 entry_number, bool32 set_access)$/;"	f	file:
clockcache_try_get_write	external/splinterdb/src/clockcache.c	/^clockcache_try_get_write(clockcache *cc, uint32 entry_number)$/;"	f	file:
clockcache_try_page_discard	external/splinterdb/src/clockcache.c	/^clockcache_try_page_discard(clockcache *cc, uint64 addr)$/;"	f
clockcache_try_set_writeback	external/splinterdb/src/clockcache.c	/^clockcache_try_set_writeback(clockcache *cc,$/;"	f	file:
clockcache_unclaim	external/splinterdb/src/clockcache.c	/^clockcache_unclaim(clockcache *cc, page_handle *page)$/;"	f
clockcache_unclaim_virtual	external/splinterdb/src/clockcache.c	/^clockcache_unclaim_virtual(cache *c, page_handle *page)$/;"	f
clockcache_unget	external/splinterdb/src/clockcache.c	/^clockcache_unget(clockcache *cc, page_handle *page)$/;"	f
clockcache_unget_virtual	external/splinterdb/src/clockcache.c	/^clockcache_unget_virtual(cache *c, page_handle *page)$/;"	f
clockcache_unlock	external/splinterdb/src/clockcache.c	/^clockcache_unlock(clockcache *cc, page_handle *page)$/;"	f
clockcache_unlock_virtual	external/splinterdb/src/clockcache.c	/^clockcache_unlock_virtual(cache *c, page_handle *page)$/;"	f
clockcache_unpin	external/splinterdb/src/clockcache.c	/^clockcache_unpin(clockcache *cc, page_handle *page)$/;"	f
clockcache_unpin_virtual	external/splinterdb/src/clockcache.c	/^clockcache_unpin_virtual(cache *c, page_handle *page)$/;"	f
clockcache_validate_page	external/splinterdb/src/clockcache.c	/^clockcache_validate_page(clockcache *cc, page_handle *page, uint64 addr)$/;"	f
clockcache_validate_page_virtual	external/splinterdb/src/clockcache.c	/^clockcache_validate_page_virtual(cache *c, page_handle *page, uint64 addr)$/;"	f
clockcache_wait	external/splinterdb/src/clockcache.c	/^clockcache_wait(clockcache *cc)$/;"	f
clockcache_wait_virtual	external/splinterdb/src/clockcache.c	/^clockcache_wait_virtual(cache *c)$/;"	f
clockcache_write_callback	external/splinterdb/src/clockcache.c	/^clockcache_write_callback(void           *metadata,$/;"	f
cluster_data	include/gqf_int.h	/^	} cluster_data;$/;"	t	typeref:struct:__anon69
cluster_data	other_filters/cqf/include/gqf_int.h	/^	} cluster_data;$/;"	t	typeref:struct:__anon4
cmd	external/splinterdb/tests/functional/ycsb_test.c	/^   char   cmd;$/;"	m	struct:ycsb_op	file:
cmp	other_filters/cqf/src/test_parallel.c	/^int cmp(const void *a, const void *b) {$/;"	f
cmp	src/test_bulk.c	/^int cmp(const void *elem1, const void *elem2) {$/;"	f
cmp	src/test_whitelist.c	/^int cmp(const void *elem1, const void *elem2) {$/;"	f
cmp_ptrs	external/splinterdb/tests/functional/test_functionality.c	/^cmp_ptrs(const void *a, const void *b)$/;"	f
cmp_uint64_t	other_filters/cqf/src/bm.c	/^int cmp_uint64_t(const void *a, const void *b)$/;"	f
cmp_uint64_t	src/bm.c	/^int cmp_uint64_t(const void *a, const void *b)$/;"	f
collections	external/splinterdb/scripts/config_reader.py	/^import collections$/;"	i
color_output	external/splinterdb/tests/unit/main.c	/^static int         color_output  = 1;$/;"	v	file:
color_print	external/splinterdb/tests/unit/main.c	/^color_print(const char *color, const char *text)$/;"	f	file:
compact_bundle	external/splinterdb/src/trunk.c	/^   compact_bundle_scratch compact_bundle;$/;"	m	union:__anon43	file:
compact_bundle_scratch	external/splinterdb/src/trunk.c	/^} compact_bundle_scratch;$/;"	t	typeref:struct:__anon41	file:
compacted	external/splinterdb/src/trunk.h	/^   bool32          compacted[TRUNK_RANGE_ITOR_MAX_BRANCHES];$/;"	m	struct:trunk_range_iterator
compacted_memtable	external/splinterdb/src/trunk.h	/^   trunk_compacted_memtable compacted_memtable[\/*cfg.mt_cfg.max_memtables*\/];$/;"	m	struct:trunk_handle
compaction_max_tuples	external/splinterdb/src/trunk.h	/^   uint64 compaction_max_tuples[TRUNK_MAX_HEIGHT];$/;"	m	struct:trunk_stats
compaction_pack_time_ns	external/splinterdb/src/trunk.h	/^   uint64 compaction_pack_time_ns[TRUNK_MAX_HEIGHT];$/;"	m	struct:trunk_stats
compaction_time_max_ns	external/splinterdb/src/trunk.h	/^   uint64 compaction_time_max_ns[TRUNK_MAX_HEIGHT];$/;"	m	struct:trunk_stats
compaction_time_ns	external/splinterdb/src/trunk.h	/^   uint64 compaction_time_ns[TRUNK_MAX_HEIGHT];$/;"	m	struct:trunk_stats
compaction_time_wasted_ns	external/splinterdb/src/trunk.h	/^   uint64 compaction_time_wasted_ns[TRUNK_MAX_HEIGHT];$/;"	m	struct:trunk_stats
compaction_tuples	external/splinterdb/src/trunk.h	/^   uint64 compaction_tuples[TRUNK_MAX_HEIGHT];$/;"	m	struct:trunk_stats
compactions	external/splinterdb/src/trunk.h	/^   uint64 compactions[TRUNK_MAX_HEIGHT];$/;"	m	struct:trunk_stats
compactions_aborted_flushed	external/splinterdb/src/trunk.h	/^   uint64 compactions_aborted_flushed[TRUNK_MAX_HEIGHT];$/;"	m	struct:trunk_stats
compactions_aborted_leaf_split	external/splinterdb/src/trunk.h	/^   uint64 compactions_aborted_leaf_split[TRUNK_MAX_HEIGHT];$/;"	m	struct:trunk_stats
compactions_discarded_flushed	external/splinterdb/src/trunk.h	/^   uint64 compactions_discarded_flushed[TRUNK_MAX_HEIGHT];$/;"	m	struct:trunk_stats
compactions_discarded_leaf_split	external/splinterdb/src/trunk.h	/^   uint64 compactions_discarded_leaf_split[TRUNK_MAX_HEIGHT];$/;"	m	struct:trunk_stats
compactions_empty	external/splinterdb/src/trunk.h	/^   uint64 compactions_empty[TRUNK_MAX_HEIGHT];$/;"	m	struct:trunk_stats
compare_shadow_entries	external/splinterdb/tests/unit/splinter_test.c	/^compare_shadow_entries(const void *a, const void *b, void *arg)$/;"	f	file:
comparison	external/splinterdb/src/iterator.h	/^typedef enum comparison {$/;"	g
comparison	external/splinterdb/src/iterator.h	/^} comparison;$/;"	t	typeref:enum:comparison
comparison_counting_data_config	external/splinterdb/tests/unit/splinterdb_quick_test.c	/^} comparison_counting_data_config;$/;"	t	typeref:struct:__anon63	file:
compl_ts	external/splinterdb/src/cache.h	/^      timestamp compl_ts; \/\/ completion time$/;"	m	struct:cache_async_ctxt::__anon23
compute_all_phase_latency_tables	external/splinterdb/tests/functional/ycsb_test.c	/^compute_all_phase_latency_tables(ycsb_phase *phases, int num_phases)$/;"	f
compute_all_phase_statistics	external/splinterdb/tests/functional/ycsb_test.c	/^compute_all_phase_statistics(ycsb_phase *phases, int num_phases)$/;"	f
compute_all_report_data	external/splinterdb/tests/functional/ycsb_test.c	/^compute_all_report_data(ycsb_phase *phases, int num_phases)$/;"	f
compute_latency	external/splinterdb/tests/functional/ycsb_test.c	/^compute_latency(uint64_t exponent, uint64_t mantissa)$/;"	f
compute_log_latency_tables	external/splinterdb/tests/functional/ycsb_test.c	/^compute_log_latency_tables(ycsb_log_params *params)$/;"	f
compute_per_table_inserts	external/splinterdb/tests/functional/splinter_test.c	/^compute_per_table_inserts(uint64       *per_table_inserts, \/\/ OUT$/;"	f	file:
compute_phase_latency_tables	external/splinterdb/tests/functional/ycsb_test.c	/^compute_phase_latency_tables(ycsb_phase *phase)$/;"	f
compute_phase_statistics	external/splinterdb/tests/functional/ycsb_test.c	/^compute_phase_statistics(ycsb_phase *phase)$/;"	f
cond	external/splinterdb/src/platform_linux/platform_types.h	/^   pthread_cond_t  cond;$/;"	m	struct:platform_condvar
config_has_option	external/splinterdb/tests/config.h	148;"	d
config_parse	external/splinterdb/tests/config.c	/^config_parse(master_config *cfg, const uint8 num_config, int argc, char *argv[])$/;"	f
config_parse_use_shmem	external/splinterdb/tests/config.c	/^config_parse_use_shmem(int argc, char *argv[])$/;"	f
config_set_defaults	external/splinterdb/tests/config.c	/^config_set_defaults(master_config *cfg)$/;"	f
config_set_else	external/splinterdb/tests/config.h	254;"	d
config_set_gib	external/splinterdb/tests/config.h	246;"	d
config_set_mib	external/splinterdb/tests/config.h	238;"	d
config_set_string	external/splinterdb/tests/config.h	152;"	d
config_set_uint32	external/splinterdb/tests/config.h	232;"	d
config_set_uint64	external/splinterdb/tests/config.h	235;"	d
config_set_uint8	external/splinterdb/tests/config.h	229;"	d
config_usage	external/splinterdb/tests/config.c	/^config_usage()$/;"	f
configure_splinter_instance	external/splinterdb/examples/splinterdb_custom_ipv4_addr_sortcmp_example.c	/^configure_splinter_instance(splinterdb_config *splinterdb_cfg,$/;"	f	file:
const_pointer_byte_offset	external/splinterdb/src/util.h	/^const_pointer_byte_offset(const void *base, int64 offset)$/;"	f
container_of	external/splinterdb/src/platform_linux/platform.h	151;"	d
container_resize	include/gqf_int.h	/^		int64_t (*container_resize)(QF *qf, uint64_t nslots);$/;"	m	struct:quotient_filter_runtime_data
container_resize	other_filters/cqf/include/gqf_int.h	/^		int64_t (*container_resize)(QF *qf, uint64_t nslots);$/;"	m	struct:quotient_filter_runtime_data
contains	other_filters/taf/src/set.c	/^static int contains(char* set[], int set_size, char* word) {$/;"	f	file:
contains	src/taf.cc	/^static int contains(char* set[], int set_size, char* word) {$/;"	f	file:
contents	external/splinterdb/src/shard_log.h	/^   char             *contents;$/;"	m	struct:shard_log_iterator
copy_key_to_ondisk_key	external/splinterdb/src/data_internal.h	/^copy_key_to_ondisk_key(ondisk_key *odk, key k)$/;"	f
count	external/splinterdb/src/platform_linux/laio.h	/^   uint64         count;        \/\/ number of vector elements$/;"	m	struct:io_async_req
count	external/splinterdb/src/platform_linux/platform_types.h	/^   unsigned long count[];$/;"	m	struct:__anon33
count_dirty	external/splinterdb/src/cache.h	/^   count_dirty_fn       count_dirty;$/;"	m	struct:cache_ops
count_dirty_fn	external/splinterdb/src/cache.h	/^typedef uint32 (*count_dirty_fn)(cache *cc);$/;"	t
count_flushes	external/splinterdb/src/trunk.h	/^   uint64 count_flushes[TRUNK_MAX_HEIGHT];$/;"	m	struct:trunk_stats
counter	external/splinterdb/src/trunk.h	/^      uint64 counter;$/;"	m	struct:trunk_handle::__anon18
counter	external/splinterdb/tests/functional/test.h	/^static allocator_root_id counter = 1;$/;"	v
counter	include/partitioned_counter.h	/^	int64_t counter;$/;"	m	struct:local_counter
counter	other_filters/acf/src/mirroredtable.h	/^		size_t counter = 0;$/;"	m	class:cuckoofilter::MirroredTable
counter	other_filters/acfsim/src/mirroredtable.h	/^		size_t counter = 0;$/;"	m	class:cuckoofilter::MirroredTable
counter	other_filters/cqf/include/partitioned_counter.h	/^	int64_t counter;$/;"	m	struct:local_counter
cpu_arch	external/splinterdb/Makefile	/^cpu_arch := $(shell uname -p)$/;"	m
create_default_cfg	external/splinterdb/tests/unit/limitations_test.c	/^create_default_cfg(splinterdb_config *out_cfg,$/;"	f	file:
create_default_cfg	external/splinterdb/tests/unit/splinterdb_forked_child_test.c	/^create_default_cfg(splinterdb_config *out_cfg, data_config *default_data_cfg)$/;"	f	file:
create_default_cfg	external/splinterdb/tests/unit/splinterdb_heap_id_mgmt_test.c	/^create_default_cfg(splinterdb_config *out_kvs_cfg,$/;"	f	file:
create_default_cfg	external/splinterdb/tests/unit/splinterdb_quick_test.c	/^create_default_cfg(splinterdb_config *out_cfg, data_config *default_data_cfg)$/;"	f	file:
create_task_system_with_bg_threads	external/splinterdb/tests/unit/task_system_test.c	/^create_task_system_with_bg_threads(void  *datap,$/;"	f	file:
create_task_system_without_bg_threads	external/splinterdb/tests/unit/task_system_test.c	/^create_task_system_without_bg_threads(void *datap)$/;"	f	file:
create_test	external/splinterdb/scripts/list_test.py	/^def create_test(test_db: Dict[Tuple[str, ...], List[List[str]]]) -> List[Test]:$/;"	f
create_zipfian	other_filters/cqf/src/zipf.c	/^ZIPFIAN create_zipfian (double s, long N, long int (*randomfun)(void)) {$/;"	f
create_zipfian	src/zipf.c	/^ZIPFIAN create_zipfian (double s, long N, long int (*randomfun)(void)) {$/;"	f
csv_get	other_filters/taf/src/taf.c	/^void csv_get(char* buffer, int col) {$/;"	f
csv_get	other_filters/taf/src/taf.cc	/^void csv_get(char* buffer, int col) {$/;"	f
csv_get	src/taf.cc	/^void csv_get(char* buffer, int col) {$/;"	f
csv_get	src/test_bulk.c	/^void csv_get(char* buffer, int col) {$/;"	f
csv_get	src/test_deletions.c	/^void csv_get(char* buffer, int col) {$/;"	f
csv_get	src/test_ext_inc_throughput.cc	/^void csv_get(char* buffer, int col) {$/;"	f
csv_get	src/test_ext_throughput.cc	/^void csv_get(char* buffer, int col) {$/;"	f
csv_get	src/test_fill_varied_throughput.c	/^void csv_get(char* buffer, int col) {$/;"	f
csv_get	src/test_hash_accesses.c	/^void csv_get(char* buffer, int col) {$/;"	f
csv_get	src/test_hash_table.c	/^void csv_get(char* buffer, int col) {$/;"	f
csv_get	src/test_merge.c	/^void csv_get(char* buffer, int col) {$/;"	f
csv_get	src/test_near_full.c	/^void csv_get(char* buffer, int col) {$/;"	f
csv_get	src/test_splinter_adversarial.c	/^void csv_get(char* buffer, int col) {$/;"	f
csv_get	src/test_splinter_zipfian_histogram.c	/^void csv_get(char* buffer, int col) {$/;"	f
csv_get	src/test_throughput_old.c	/^void csv_get(char* buffer, int col) {$/;"	f
csv_get	src/test_whitelist.c	/^void csv_get(char* buffer, int col) {$/;"	f
csv_get	src/test_zipf_throughput.cc	/^void csv_get(char* buffer, int col) {$/;"	f
csv_get_col	other_filters/acf/example/test_fp.cc	/^void csv_get_col(char* buffer, int col) {$/;"	f
csv_get_col	other_filters/acf/example/test_splinter_throughput.cc	/^void csv_get_col(char* buffer, int col) {$/;"	f
csv_get_col	other_filters/acfsim/example/test_fp.cc	/^void csv_get_col(char* buffer, int col) {$/;"	f
csv_get_col	other_filters/cf/example/test_splinter_throughput.cc	/^void csv_get_col(char* buffer, int col) {$/;"	f
csv_get_col	other_filters/cqf/src/test_splinter_throughput.c	/^void csv_get_col(char* buffer, int col) {$/;"	f
csv_get_col	other_filters/taf/src/splinter_taf.c	/^void csv_get_col(char* buffer, int col) {$/;"	f
csv_get_col	src/test_progress.c	/^void csv_get_col(char* buffer, int col) {$/;"	f
csv_get_col	src/test_splinter_throughput.c	/^void csv_get_col(char* buffer, int col) {$/;"	f
csv_get_col	test/test_splinter_lltable_throughput.c	/^void csv_get_col(char* buffer, int col) {$/;"	f
csv_get_col	test/test_throughput.c	/^void csv_get_col(char* buffer, int col) {$/;"	f
ctest	external/splinterdb/tests/unit/ctest.h	/^struct ctest {$/;"	s
ctest_err	external/splinterdb/tests/unit/main.c	/^static jmp_buf     ctest_err;$/;"	v	file:
ctest_errorbuffer	external/splinterdb/tests/unit/main.c	/^static char        ctest_errorbuffer[MSG_SIZE];$/;"	v	file:
ctest_errormsg	external/splinterdb/tests/unit/main.c	/^static char       *ctest_errormsg;$/;"	v	file:
ctest_errorsize	external/splinterdb/tests/unit/main.c	/^static size_t      ctest_errorsize;$/;"	v	file:
ctest_filter_func	external/splinterdb/tests/unit/main.c	/^typedef int (*ctest_filter_func)(struct ctest *);$/;"	t	file:
ctest_get_verbosity	external/splinterdb/tests/unit/main.c	/^ctest_get_verbosity()$/;"	f	file:
ctest_is_unit_test	external/splinterdb/tests/unit/main.c	/^ctest_is_unit_test(const char *argv0)$/;"	f
ctest_main	external/splinterdb/tests/unit/main.c	/^ctest_main(int argc, const char *argv[])$/;"	f
ctest_nullary_run_func	external/splinterdb/tests/unit/ctest.h	/^typedef void (*ctest_nullary_run_func)(void);$/;"	t
ctest_process_args	external/splinterdb/tests/unit/main.c	/^ctest_process_args(const int    argc,$/;"	f	file:
ctest_run_func_union	external/splinterdb/tests/unit/ctest.h	/^union ctest_run_func_union {$/;"	u
ctest_setup_func	external/splinterdb/tests/unit/ctest.h	/^typedef void (*ctest_setup_func)(void *);$/;"	t
ctest_teardown_func	external/splinterdb/tests/unit/ctest.h	/^typedef void (*ctest_teardown_func)(void *);$/;"	t
ctest_unary_run_func	external/splinterdb/tests/unit/ctest.h	/^typedef void (*ctest_unary_run_func)(void *);$/;"	t
ctest_usage	external/splinterdb/tests/unit/main.c	/^ctest_usage(const char *progname, int program_is_unit_test)$/;"	f
ctx	external/splinterdb/src/platform_linux/laio.h	/^   io_context_t ctx;$/;"	m	struct:io_process_context
ctx	external/splinterdb/src/platform_linux/laio.h	/^   io_process_context ctx[MAX_THREADS];$/;"	m	struct:laio_handle
ctx_idx	external/splinterdb/src/platform_linux/laio.h	/^   uint64             ctx_idx[MAX_THREADS];$/;"	m	struct:laio_handle
ctx_idx	external/splinterdb/src/platform_linux/laio.h	/^   uint64         ctx_idx;      \/\/ context index. INVALID_TID if not in use$/;"	m	struct:io_async_req
ctx_lock	external/splinterdb/src/platform_linux/laio.h	/^   int                ctx_lock;$/;"	m	struct:laio_handle
ctxt	external/splinterdb/tests/functional/btree_test.c	/^   btree_async_ctxt  ctxt;$/;"	m	struct:__anon55	file:
ctxt	external/splinterdb/tests/functional/btree_test.c	/^   btree_test_async_ctxt ctxt[TEST_MAX_ASYNC_INFLIGHT];$/;"	m	struct:__anon56	file:
ctxt	external/splinterdb/tests/functional/btree_test.c	/^   test_memtable_context *ctxt;$/;"	m	struct:test_btree_thread_params	file:
ctxt	external/splinterdb/tests/functional/cache_test.c	/^   cache_async_ctxt    ctxt;$/;"	m	struct:__anon53	file:
ctxt	external/splinterdb/tests/functional/cache_test.c	/^   test_async_ctxt    ctxt[READER_BATCH_SIZE]; \/\/ async_get() contexts$/;"	m	struct:__anon54	file:
ctxt	external/splinterdb/tests/functional/test_async.h	/^   test_async_ctxt ctxt[];$/;"	m	struct:__anon59
ctxt	external/splinterdb/tests/functional/test_async.h	/^   trunk_async_ctxt ctxt;$/;"	m	struct:__anon57
ctxt_bitmap	external/splinterdb/tests/functional/btree_test.c	/^   uint64                ctxt_bitmap;$/;"	m	struct:__anon56	file:
cuckoofilter	other_filters/acf/src/bitsutil.h	/^namespace cuckoofilter {$/;"	n
cuckoofilter	other_filters/acf/src/cuckoofilter.h	/^namespace cuckoofilter {$/;"	n
cuckoofilter	other_filters/acf/src/debug.h	/^namespace cuckoofilter {$/;"	n
cuckoofilter	other_filters/acf/src/hashutil.cc	/^namespace cuckoofilter {$/;"	n	file:
cuckoofilter	other_filters/acf/src/hashutil.h	/^namespace cuckoofilter {$/;"	n
cuckoofilter	other_filters/acf/src/mirroredtable.h	/^namespace cuckoofilter {$/;"	n
cuckoofilter	other_filters/acf/src/packedtable.h	/^namespace cuckoofilter {$/;"	n
cuckoofilter	other_filters/acf/src/permencoding.h	/^namespace cuckoofilter {$/;"	n
cuckoofilter	other_filters/acf/src/printutil.cc	/^namespace cuckoofilter {$/;"	n	file:
cuckoofilter	other_filters/acf/src/printutil.h	/^namespace cuckoofilter {$/;"	n
cuckoofilter	other_filters/acf/src/singletable.h	/^namespace cuckoofilter {$/;"	n
cuckoofilter	other_filters/acfsim/src/bitsutil.h	/^namespace cuckoofilter {$/;"	n
cuckoofilter	other_filters/acfsim/src/cuckoofilter.h	/^namespace cuckoofilter {$/;"	n
cuckoofilter	other_filters/acfsim/src/debug.h	/^namespace cuckoofilter {$/;"	n
cuckoofilter	other_filters/acfsim/src/hashutil.cc	/^namespace cuckoofilter {$/;"	n	file:
cuckoofilter	other_filters/acfsim/src/hashutil.h	/^namespace cuckoofilter {$/;"	n
cuckoofilter	other_filters/acfsim/src/mirroredtable.h	/^namespace cuckoofilter {$/;"	n
cuckoofilter	other_filters/acfsim/src/packedtable.h	/^namespace cuckoofilter {$/;"	n
cuckoofilter	other_filters/acfsim/src/permencoding.h	/^namespace cuckoofilter {$/;"	n
cuckoofilter	other_filters/acfsim/src/printutil.cc	/^namespace cuckoofilter {$/;"	n	file:
cuckoofilter	other_filters/acfsim/src/printutil.h	/^namespace cuckoofilter {$/;"	n
cuckoofilter	other_filters/acfsim/src/singletable.h	/^namespace cuckoofilter {$/;"	n
cuckoofilter	other_filters/cf/src/bitsutil.h	/^namespace cuckoofilter {$/;"	n
cuckoofilter	other_filters/cf/src/cuckoofilter.h	/^namespace cuckoofilter {$/;"	n
cuckoofilter	other_filters/cf/src/debug.h	/^namespace cuckoofilter {$/;"	n
cuckoofilter	other_filters/cf/src/hashutil.cc	/^namespace cuckoofilter {$/;"	n	file:
cuckoofilter	other_filters/cf/src/hashutil.h	/^namespace cuckoofilter {$/;"	n
cuckoofilter	other_filters/cf/src/packedtable.h	/^namespace cuckoofilter {$/;"	n
cuckoofilter	other_filters/cf/src/permencoding.h	/^namespace cuckoofilter {$/;"	n
cuckoofilter	other_filters/cf/src/printutil.cc	/^namespace cuckoofilter {$/;"	n	file:
cuckoofilter	other_filters/cf/src/printutil.h	/^namespace cuckoofilter {$/;"	n
cuckoofilter	other_filters/cf/src/singletable.h	/^namespace cuckoofilter {$/;"	n
cumulative	other_filters/cqf/src/zipf.c	/^    double cumulative;           \/\/   The sum of the all the probabilities of all the elements represented by previous buckets.$/;"	m	struct:zpair	file:
cumulative	src/zipf.c	/^    double cumulative;           \/\/   The sum of the all the probabilities of all the elements represented by previous buckets.$/;"	m	struct:zpair	file:
cur	external/splinterdb/tests/functional/avlTree.h	/^   AvlTreeLinks *cur;$/;"	m	struct:__anon60
cur	external/splinterdb/tests/functional/cache_test.c	/^         uint32 cur;$/;"	m	struct:__anon47::__anon49::__anon50	file:
cur_length	include/gqf_int.h	/^		uint16_t cur_length;$/;"	m	struct:quotient_filter_iterator
cur_length	other_filters/cqf/include/gqf_int.h	/^		uint16_t cur_length;$/;"	m	struct:quotient_filter_iterator
cur_start_index	include/gqf_int.h	/^		uint64_t cur_start_index;$/;"	m	struct:quotient_filter_iterator
cur_start_index	other_filters/cqf/include/gqf_int.h	/^		uint64_t cur_start_index;$/;"	m	struct:quotient_filter_iterator
curr	external/splinterdb/src/btree.h	/^   btree_node curr;$/;"	m	struct:btree_iterator
curr	external/splinterdb/src/iterator.h	/^   iterator_curr_fn  curr;$/;"	m	struct:iterator_ops
curr	external/splinterdb/src/trunk.c	/^   uint64         curr;$/;"	m	struct:trunk_btree_skiperator	file:
curr_allocated	external/splinterdb/src/rc_allocator.h	/^   int64 curr_allocated; \/\/ # of extents allocated$/;"	m	struct:rc_allocator_stats
curr_data	external/splinterdb/src/merge.h	/^   message      curr_data;     \/\/ current data$/;"	m	struct:merge_iterator
curr_data	external/splinterdb/src/merge.h	/^   message   curr_data;$/;"	m	struct:ordered_iterator
curr_key	external/splinterdb/src/merge.h	/^   key          curr_key;      \/\/ current key$/;"	m	struct:merge_iterator
curr_key	external/splinterdb/src/merge.h	/^   key       curr_key;$/;"	m	struct:ordered_iterator
curr_min_idx	external/splinterdb/src/btree.h	/^   int64      curr_min_idx;$/;"	m	struct:btree_iterator
curr_op	external/splinterdb/tests/functional/splinter_test.c	/^   uint64            *curr_op;$/;"	m	struct:test_splinter_thread_params	file:
current	include/gqf_int.h	/^		uint64_t current;$/;"	m	struct:quotient_filter_iterator
current	other_filters/cqf/include/gqf_int.h	/^		uint64_t current;$/;"	m	struct:quotient_filter_iterator
currentAllocIdx	external/splinterdb/tests/functional/test_splinter_shadow.h	/^   uint64                     currentAllocIdx;$/;"	m	struct:test_splinter_shadow_tree
current_executing_tasks	external/splinterdb/src/task.h	/^   volatile uint64 current_executing_tasks;$/;"	m	struct:task_group
current_waiting_tasks	external/splinterdb/src/task.h	/^   volatile uint64 current_waiting_tasks;$/;"	m	struct:task_group
custom_key_comparator	external/splinterdb/tests/unit/splinterdb_quick_test.c	/^custom_key_comparator(const data_config *cfg, slice key1, slice key2)$/;"	f	file:
custom_key_compare	external/splinterdb/examples/splinterdb_custom_ipv4_addr_sortcmp_example.c	/^custom_key_compare(const data_config *cfg, slice key1, slice key2)$/;"	f
cv	external/splinterdb/src/task.h	/^   platform_condvar     cv;$/;"	m	struct:task_group
data	external/splinterdb/include/splinterdb/data.h	/^   slice        data;$/;"	m	struct:message
data	external/splinterdb/include/splinterdb/public_util.h	/^   const void *data;$/;"	m	struct:slice
data	external/splinterdb/src/cache.h	/^   char  *data;$/;"	m	struct:page_handle
data	external/splinterdb/src/clockcache.h	/^   char                *data; \/\/ convenience pointer for bh$/;"	m	struct:clockcache
data	external/splinterdb/tests/functional/test_async.h	/^   merge_accumulator data;$/;"	m	struct:__anon57
data	external/splinterdb/tests/test_data.h	/^   uint8 data[0];$/;"	m	struct:data_handle
data	external/splinterdb/tests/unit/ctest.h	/^   void                *data;$/;"	m	struct:ctest
data	external/splinterdb/tests/unit/splinter_test.c	/^   writable_buffer data;$/;"	m	struct:trunk_shadow	file:
data_cfg	external/splinterdb/include/splinterdb/splinterdb.h	/^   data_config *data_cfg;$/;"	m	struct:splinterdb_config
data_cfg	external/splinterdb/src/btree.h	/^   data_config  *data_cfg;$/;"	m	struct:btree_config
data_cfg	external/splinterdb/src/mini_allocator.h	/^   data_config    *data_cfg;$/;"	m	struct:mini_allocator
data_cfg	external/splinterdb/src/routing_filter.h	/^   data_config  *data_cfg;$/;"	m	struct:routing_config
data_cfg	external/splinterdb/src/shard_log.h	/^   data_config  *data_cfg;$/;"	m	struct:shard_log_config
data_cfg	external/splinterdb/src/splinterdb.c	/^   data_config       *data_cfg;$/;"	m	struct:splinterdb	file:
data_cfg	external/splinterdb/src/trunk.h	/^   data_config    *data_cfg;$/;"	m	struct:trunk_config
data_cfg	external/splinterdb/tests/unit/splinter_test.c	/^   data_config    *data_cfg;$/;"	m	struct:trunk_shadow	file:
data_cfg	other_filters/taf/src/splinter_taf.h	/^  data_config data_cfg;$/;"	m	struct:taf_t
data_config	external/splinterdb/include/splinterdb/data.h	/^struct data_config {$/;"	s
data_config	external/splinterdb/include/splinterdb/data.h	/^typedef struct data_config data_config;$/;"	t	typeref:struct:data_config
data_handle	external/splinterdb/tests/test_data.h	/^typedef struct PACKED data_handle {$/;"	s
data_handle	external/splinterdb/tests/test_data.h	/^} data_handle;$/;"	t	typeref:struct:data_handle
data_prefix	external/splinterdb/scripts/run_ycsb.py	/^                data_prefix = results_dir + "\/data"$/;"	v
data_test_config	external/splinterdb/tests/test_data.c	/^typedef struct data_test_config {$/;"	s	file:
data_test_config	external/splinterdb/tests/test_data.c	/^} data_test_config;$/;"	t	typeref:struct:data_test_config	file:
data_test_config_internal	external/splinterdb/tests/test_data.c	/^static data_test_config data_test_config_internal = {$/;"	v	file:
database	other_filters/taf/src/splinter_taf.h	/^  splinterdb *database;$/;"	m	struct:taf_t
datetime	external/splinterdb/scripts/run_ycsb.py	/^from datetime import datetime$/;"	i
db	src/test_driver.c	/^	splinterdb *db;$/;"	m	struct:__anon8	file:
db_init	src/test_splinter_inserts_2.c	/^int db_init(splinterdb **database, const char *db_name, uint64_t cache_size, uint64_t disk_size) {$/;"	f
db_insert	other_filters/acf/example/test_acf_ops.cc	/^int db_insert(splinterdb *database, const void *key_data, const size_t key_len, unsigned char *key_buffer, const void *val_data, const size_t val_len, unsigned char *val_buffer, const int flagged) {$/;"	f
db_insert	other_filters/acf/example/test_splinter_adversarial.cc	/^int db_insert(splinterdb *database, const void *key_data, const size_t key_len, unsigned char *key_buffer, const void *val_data, const size_t val_len, unsigned char *val_buffer, const int flagged) {$/;"	f
db_insert	other_filters/acf/example/test_splinter_throughput.cc	/^int db_insert(splinterdb *database, const void *key_data, const size_t key_len, unsigned char *key_buffer, const void *val_data, const size_t val_len, unsigned char *val_buffer, const int flagged) {$/;"	f
db_insert	other_filters/acf/example/test_splinter_zipfian_histogram.cc	/^int db_insert(splinterdb *database, const void *key_data, const size_t key_len, unsigned char *key_buffer, const void *val_data, const size_t val_len, unsigned char *val_buffer, const int flagged) {$/;"	f
db_insert	other_filters/acf/src/cuckoofilter.h	/^	int db_insert(splinterdb *database, const void *key_data, const size_t key_len, const size_t max_key_len, unsigned char *key_buffer, const void *val_data, const size_t val_len, const size_t max_val_len, unsigned char *val_buffer, const int flagged) {$/;"	f	namespace:cuckoofilter
db_insert	other_filters/acfsim/example/test_acf_ops.cc	/^int db_insert(splinterdb *database, const void *key_data, const size_t key_len, unsigned char *key_buffer, const void *val_data, const size_t val_len, unsigned char *val_buffer, const int flagged) {$/;"	f
db_insert	other_filters/acfsim/example/test_splinter_adversarial.cc	/^int db_insert(splinterdb *database, const void *key_data, const size_t key_len, unsigned char *key_buffer, const void *val_data, const size_t val_len, unsigned char *val_buffer, const int flagged) {$/;"	f
db_insert	other_filters/acfsim/example/test_splinter_throughput.cc	/^int db_insert(splinterdb *database, const void *key_data, const size_t key_len, unsigned char *key_buffer, const void *val_data, const size_t val_len, unsigned char *val_buffer, const int flagged) {$/;"	f
db_insert	other_filters/acfsim/example/test_splinter_zipfian_histogram.cc	/^int db_insert(splinterdb *database, const void *key_data, const size_t key_len, unsigned char *key_buffer, const void *val_data, const size_t val_len, unsigned char *val_buffer, const int flagged) {$/;"	f
db_insert	other_filters/acfsim/src/cuckoofilter.h	/^	int db_insert(splinterdb *database, const void *key_data, const size_t key_len, const size_t max_key_len, unsigned char *key_buffer, const void *val_data, const size_t val_len, const size_t max_val_len, unsigned char *val_buffer, const int flagged) {$/;"	f	namespace:cuckoofilter
db_insert	other_filters/cf/example/test_splinter_adversarial.cc	/^int db_insert(splinterdb *database, const void *key_data, const size_t key_len, unsigned char *key_buffer, const void *val_data, const size_t val_len, unsigned char *val_buffer, const int flagged) {$/;"	f
db_insert	other_filters/cf/example/test_splinter_throughput.cc	/^int db_insert(splinterdb *database, const void *key_data, const size_t key_len, unsigned char *key_buffer, const void *val_data, const size_t val_len, unsigned char *val_buffer, const int flagged) {$/;"	f
db_insert	other_filters/cf/example/test_splinter_zipfian_histogram.cc	/^int db_insert(splinterdb *database, const void *key_data, const size_t key_len, unsigned char *key_buffer, const void *val_data, const size_t val_len, unsigned char *val_buffer, const int flagged) {$/;"	f
db_insert	other_filters/cqf/src/test_splinter_adversarial.c	/^int db_insert(splinterdb *database, const void *key_data, const size_t key_len, const void *val_data, const size_t val_len, const int flagged) {$/;"	f
db_insert	other_filters/cqf/src/test_splinter_throughput.c	/^int db_insert(splinterdb *database, const void *key_data, const size_t key_len, const void *val_data, const size_t val_len, const int flagged) {$/;"	f
db_insert	other_filters/cqf/src/test_splinter_zipfian_histogram.c	/^int db_insert(splinterdb *database, const void *key_data, const size_t key_len, const void *val_data, const size_t val_len, const int flagged) {$/;"	f
db_insert	other_filters/taf/src/splinter_taf.c	/^void db_insert(TAF *filter, const uint64_t loc, const uint64_t key, const uint64_t hash) {$/;"	f
db_insert	src/splinter_util.c	/^int db_insert(splinterdb *database, const void *key_data, const size_t key_len, const void *val_data, const size_t val_len, const int update, const int flagged) {$/;"	f
db_insert	src/test_splinter_adversarial.c	/^int db_insert(splinterdb *database, const void *key_data, const size_t key_len, const void *val_data, const size_t val_len, const int flagged) {$/;"	f
db_insert	src/test_splinter_inserts_2.c	/^int db_insert(splinterdb *database, const void *key_data, const size_t key_len, const void *val_data, const size_t val_len) {$/;"	f
db_insert	src/test_splinter_replace_lltable_throughput.c	/^int db_insert(splinterdb *database, const void *key_data, const size_t key_len, const void *val_data, const size_t val_len, const int flagged) {$/;"	f
db_insert	src/test_splinter_throughput.c	/^int db_insert(splinterdb *database, const void *key_data, const size_t key_len, const void *val_data, const size_t val_len, const int flagged) {$/;"	f
db_insert	src/test_splinter_zipfian_histogram.c	/^int db_insert(splinterdb *database, const void *key_data, const size_t key_len, const void *val_data, const size_t val_len, const int flagged) {$/;"	f
db_insert_count	other_filters/acf/src/cuckoofilter.h	/^				 uint64_t db_insert_count, db_update_count, db_query_count;$/;"	m	class:cuckoofilter::CuckooFilter
db_insert_count	other_filters/taf/src/splinter_taf.c	/^uint64_t db_insert_count = 0, db_update_count = 0, db_query_count = 0;$/;"	v
db_query	other_filters/taf/src/splinter_taf.c	/^backing_data db_query(TAF *filter, const uint64_t loc) {$/;"	f
db_query_count	other_filters/acf/src/cuckoofilter.h	/^				 uint64_t db_insert_count, db_update_count, db_query_count;$/;"	m	class:cuckoofilter::CuckooFilter
db_query_count	other_filters/taf/src/splinter_taf.c	/^uint64_t db_insert_count = 0, db_update_count = 0, db_query_count = 0;$/;"	v
db_result	other_filters/cqf/src/test_splinter_adversarial.c	/^splinterdb_lookup_result db_result;$/;"	v
db_result	other_filters/cqf/src/test_splinter_throughput.c	/^splinterdb_lookup_result db_result;$/;"	v
db_result	other_filters/cqf/src/test_splinter_zipfian_histogram.c	/^splinterdb_lookup_result db_result;$/;"	v
db_result	other_filters/taf/src/splinter_taf.h	/^  splinterdb_lookup_result db_result;$/;"	m	struct:taf_t
db_result	src/test_splinter_adversarial.c	/^splinterdb_lookup_result db_result;$/;"	v
db_result	src/test_splinter_replace_lltable_throughput.c	/^splinterdb_lookup_result db_result;$/;"	v
db_result	src/test_splinter_throughput.c	/^splinterdb_lookup_result db_result;$/;"	v
db_result	src/test_splinter_zipfian_histogram.c	/^splinterdb_lookup_result db_result;$/;"	v
db_update	other_filters/taf/src/splinter_taf.c	/^void db_update(TAF *filter, const uint64_t loc, const uint64_t key, const uint64_t hash) {$/;"	f
db_update_count	other_filters/acf/src/cuckoofilter.h	/^				 uint64_t db_insert_count, db_update_count, db_query_count;$/;"	m	class:cuckoofilter::CuckooFilter
db_update_count	other_filters/taf/src/splinter_taf.c	/^uint64_t db_insert_count = 0, db_update_count = 0, db_query_count = 0;$/;"	v
debug_assert	external/splinterdb/src/platform_linux/platform.h	208;"	d
debug_assert	external/splinterdb/src/platform_linux/platform.h	212;"	d
debug_assert_message_type_valid	external/splinterdb/src/merge.c	/^debug_assert_message_type_valid(debug_only merge_iterator *merge_itor)$/;"	f	file:
debug_code	external/splinterdb/src/platform_linux/platform.h	210;"	d
debug_code	external/splinterdb/src/platform_linux/platform.h	214;"	d
debug_hex_dump	external/splinterdb/src/util.c	/^debug_hex_dump(platform_log_handle *plh,$/;"	f
debug_hex_dump_slice	external/splinterdb/src/util.c	/^debug_hex_dump_slice(platform_log_handle *plh, uint64 grouping, slice data)$/;"	f
debug_hex_encode	external/splinterdb/src/util.c	/^debug_hex_encode(char        *dst,$/;"	f
debug_hex_encode_sample_data	external/splinterdb/tests/unit/util_test.c	/^static const char debug_hex_encode_sample_data[10] =$/;"	v	file:
debug_level	other_filters/acf/src/debug.h	12;"	d
debug_level	other_filters/acfsim/src/debug.h	12;"	d
debug_level	other_filters/cf/src/debug.h	12;"	d
debug_only	external/splinterdb/src/platform_linux/platform.h	209;"	d
debug_only	external/splinterdb/src/platform_linux/platform.h	213;"	d
debug_verify_sorted	external/splinterdb/src/merge.c	/^debug_verify_sorted(debug_only merge_iterator *merge_itor,$/;"	f	file:
dec_ref	external/splinterdb/src/allocator.h	/^   dec_ref_fn     dec_ref;$/;"	m	struct:allocator_ops
dec_ref_fn	external/splinterdb/src/allocator.h	/^typedef uint8 (*dec_ref_fn)(allocator *al, uint64 addr, page_type type);$/;"	t
dec_table	other_filters/acf/src/permencoding.h	/^  uint16_t dec_table[N_ENTS];$/;"	m	class:cuckoofilter::PermEncoding
dec_table	other_filters/acfsim/src/permencoding.h	/^  uint16_t dec_table[N_ENTS];$/;"	m	class:cuckoofilter::PermEncoding
dec_table	other_filters/cf/src/permencoding.h	/^  uint16_t dec_table[N_ENTS];$/;"	m	class:cuckoofilter::PermEncoding
decode	other_filters/acf/src/permencoding.h	/^  inline void decode(const uint16_t codeword, uint8_t lowbits[4]) const {$/;"	f	class:cuckoofilter::PermEncoding
decode	other_filters/acfsim/src/permencoding.h	/^  inline void decode(const uint16_t codeword, uint8_t lowbits[4]) const {$/;"	f	class:cuckoofilter::PermEncoding
decode	other_filters/cf/src/permencoding.h	/^  inline void decode(const uint16_t codeword, uint8_t lowbits[4]) const {$/;"	f	class:cuckoofilter::PermEncoding
decode_counter	other_filters/cqf/src/gqf.c	/^static inline uint64_t decode_counter(const QF *qf, uint64_t index, uint64_t$/;"	f	file:
decode_counter	src/gqf_backup.c	/^static inline uint64_t decode_counter(const QF *qf, uint64_t index, uint64_t$/;"	f	file:
decode_ext	other_filters/taf/src/arcd.c	/^void decode_ext(uint64_t code, Ext exts[64]) {$/;"	f
decode_ext	src/taf.cc	/^void decode_ext(uint64_t code, Ext exts[64]) {$/;"	f
decode_sel	other_filters/taf/src/arcd.c	/^void decode_sel(uint64_t code, int out[64]) {$/;"	f
decode_sel	src/taf.cc	/^void decode_sel(uint64_t code, int out[64]) {$/;"	f
default_buffer	external/splinterdb/src/data_internal.h	/^   char            default_buffer[DEFAULT_KEY_BUFFER_SIZE];$/;"	m	struct:__anon38
default_data_config_init	external/splinterdb/src/default_data_config.c	/^default_data_config_init(const size_t max_key_size, \/\/ IN$/;"	f
defragment_node	external/splinterdb/src/btree.h	/^   scratch_btree_defragment_node defragment_node;$/;"	m	struct:__anon16
deinit_saved_pivots_in_scratch	external/splinterdb/src/trunk.c	/^deinit_saved_pivots_in_scratch(compact_bundle_scratch *scratch)$/;"	f	file:
delete_latency_histo	external/splinterdb/src/trunk.h	/^   platform_histo_handle delete_latency_histo;$/;"	m	struct:trunk_stats
delete_tests	external/splinterdb/scripts/list_test.py	/^delete_tests = [$/;"	v
deletes	external/splinterdb/tests/functional/ycsb_test.c	/^   latency_table deletes;$/;"	m	struct:latency_tables	file:
deletions	external/splinterdb/src/trunk.h	/^   uint64 deletions;$/;"	m	struct:trunk_stats
denominator	external/splinterdb/src/util.h	/^   uint64 denominator;$/;"	m	struct:fraction
deregister_thread	external/splinterdb/src/io.h	/^   io_deregister_thread_fn   deregister_thread;$/;"	m	struct:io_ops
destroy	other_filters/cqf/src/bm.c	/^	destroy_op destroy;$/;"	m	struct:filter	file:
destroy	src/bm.c	/^	destroy_op destroy;$/;"	m	struct:filter	file:
destroy_leaf_incorporate_spec	external/splinterdb/src/btree.c	/^destroy_leaf_incorporate_spec(leaf_incorporate_spec *spec)$/;"	f
destroy_op	other_filters/cqf/src/bm.c	/^typedef int (*destroy_op)();$/;"	t	file:
destroy_op	src/bm.c	/^typedef int (*destroy_op)();$/;"	t	file:
destroy_test_splinter_shadow_array	external/splinterdb/tests/functional/test_functionality.c	/^destroy_test_splinter_shadow_array(test_splinter_shadow_array *sharr)$/;"	f
destroy_zipfian	other_filters/cqf/src/zipf.c	/^void destroy_zipfian (ZIPFIAN z) {$/;"	f
destroy_zipfian	src/zipf.c	/^void destroy_zipfian (ZIPFIAN z) {$/;"	f
diff_ptr	external/splinterdb/src/platform_linux/platform.h	/^diff_ptr(const void *base, const void *limit)$/;"	f
directory_	other_filters/acf/src/simd-block.h	/^  Bucket* directory_;$/;"	m	class:SimdBlockFilter
directory_	other_filters/acfsim/src/simd-block.h	/^  Bucket* directory_;$/;"	m	class:SimdBlockFilter
directory_	other_filters/cf/src/simd-block.h	/^  Bucket* directory_;$/;"	m	class:SimdBlockFilter
directory_mask_	other_filters/acf/src/simd-block.h	/^  const uint32_t directory_mask_;$/;"	m	class:SimdBlockFilter
directory_mask_	other_filters/acfsim/src/simd-block.h	/^  const uint32_t directory_mask_;$/;"	m	class:SimdBlockFilter
directory_mask_	other_filters/cf/src/simd-block.h	/^  const uint32_t directory_mask_;$/;"	m	class:SimdBlockFilter
discarded_deletes	external/splinterdb/src/merge.h	/^   uint64 discarded_deletes;$/;"	m	struct:merge_iterator
discarded_deletes	external/splinterdb/src/trunk.h	/^   uint64 discarded_deletes;$/;"	m	struct:trunk_stats
disk_addr	external/splinterdb/src/cache.h	/^   uint64 disk_addr;$/;"	m	struct:page_handle
disk_size	external/splinterdb/include/splinterdb/splinterdb.h	/^   uint64      disk_size;$/;"	m	struct:splinterdb_config
do_inserts	external/splinterdb/examples/splinterdb_custom_ipv4_addr_sortcmp_example.c	/^do_inserts(splinterdb *spl_handle, kv_pair *kv_pairs, int num_kv_pairs)$/;"	f	file:
do_inserts	external/splinterdb/examples/splinterdb_iterators_example.c	/^do_inserts(splinterdb *spl_handle, kv_pair *kv_pairs, int num_kv_pairs)$/;"	f	file:
do_inserts_n_threads	external/splinterdb/tests/unit/large_inserts_stress_test.c	/^do_inserts_n_threads(splinterdb      *kvsb,$/;"	f	file:
do_iterate_from	external/splinterdb/examples/splinterdb_custom_ipv4_addr_sortcmp_example.c	/^do_iterate_from(splinterdb *spl_handle, const char *from_key)$/;"	f	file:
do_iterate_from	external/splinterdb/examples/splinterdb_iterators_example.c	/^do_iterate_from(splinterdb *spl_handle, const char *from_key)$/;"	f	file:
do_many_inserts	external/splinterdb/tests/unit/splinterdb_forked_child_test.c	/^do_many_inserts(splinterdb *kvsb, uint64 num_inserts)$/;"	f	file:
do_n_async_ctxt_deinits	external/splinterdb/tests/functional/splinter_test.c	/^do_n_async_ctxt_deinits(platform_heap_id             hid,$/;"	f	file:
do_n_async_ctxt_inits	external/splinterdb/tests/functional/splinter_test.c	/^do_n_async_ctxt_inits(platform_heap_id             hid,$/;"	f	file:
do_n_thread_creates	external/splinterdb/tests/functional/io_apis_test.c	/^do_n_thread_creates(const char         *thread_type,$/;"	f	file:
do_n_thread_creates	external/splinterdb/tests/functional/splinter_test.c	/^do_n_thread_creates(const char                  *thread_type,$/;"	f	file:
do_operation	external/splinterdb/tests/functional/splinter_test.c	/^do_operation(test_splinter_thread_params *params,$/;"	f	file:
do_prefetch	external/splinterdb/src/btree.h	/^   bool32        do_prefetch;$/;"	m	struct:btree_iterator
docsVersionToggle	external/splinterdb/docs/site/themes/template/assets/js/main.js	/^function docsVersionToggle() {$/;"	f
docsVersionToggle	external/splinterdb/docs/site/themes/template/static/js/main.js	/^function docsVersionToggle() {$/;"	f
double_cmp	other_filters/acf/example/test_splinter_zipfian_histogram.cc	/^int double_cmp(const void *a, const void *b) {$/;"	f
double_cmp	other_filters/acfsim/example/test_splinter_zipfian_histogram.cc	/^int double_cmp(const void *a, const void *b) {$/;"	f
double_cmp	other_filters/cf/example/test_splinter_zipfian_histogram.cc	/^int double_cmp(const void *a, const void *b) {$/;"	f
double_cmp	other_filters/cqf/src/test_splinter_zipfian_histogram.c	/^int double_cmp(const void *a, const void *b) {$/;"	f
double_cmp	src/test_splinter_zipfian_histogram.c	/^int double_cmp(const void *a, const void *b) {$/;"	f
dummy	external/splinterdb/src/merge.c	/^   char dummy;$/;"	m	struct:merge_behavior	file:
dump_to_stdout	external/splinterdb/scripts/config_reader.py	/^   def dump_to_stdout(self):$/;"	m	class:ConfigDB
dup	other_filters/cqf/src/bm.c	/^	duplicate_rand dup;$/;"	m	struct:rand_generator	file:
dup	src/bm.c	/^	duplicate_rand dup;$/;"	m	struct:rand_generator	file:
duplicate_rand	other_filters/cqf/src/bm.c	/^typedef void * (*duplicate_rand)(void *state);$/;"	t	file:
duplicate_rand	src/bm.c	/^typedef void * (*duplicate_rand)(void *state);$/;"	t	file:
duration	external/splinterdb/tests/functional/splinter_test.c	/^   uint64 duration;$/;"	m	struct:stats_insert	file:
earliest_thread_start_time	external/splinterdb/tests/functional/ycsb_test.c	/^   uint64_t earliest_thread_start_time;$/;"	m	struct:running_times	file:
edge	external/splinterdb/src/btree.h	/^   btree_node        edge[BTREE_MAX_HEIGHT][MAX_PAGES_PER_EXTENT];$/;"	m	struct:btree_pack_req
edge_stats	external/splinterdb/src/btree.h	/^   btree_pivot_stats edge_stats[BTREE_MAX_HEIGHT][MAX_PAGES_PER_EXTENT];$/;"	m	struct:btree_pack_req
elems	external/splinterdb/src/pcq.h	/^   void                *elems[];$/;"	m	struct:__anon34
elt	other_filters/taf/src/splinter_taf.c	/^	uint64_t elt;$/;"	m	struct:backing_data	file:
elt	other_filters/taf/src/splinter_taf.h	/^  uint64_t elt;$/;"	m	struct:remote_elt_t
elt	other_filters/taf/src/taf.h	/^  uint64_t elt;$/;"	m	struct:remote_elt_t
elt	other_filters/taf/src/taf_sim.h	/^  uint64_t elt;$/;"	m	struct:remote_elt_t
elt	other_filters/taf/src/utaf.h	/^  uint64_t elt;$/;"	m	struct:remote_elt_t
elt	src/taf.cc	/^  uint64_t elt;$/;"	m	struct:remote_elt_t	file:
elt_t	other_filters/taf/src/exaf.h	/^typedef uint64_t elt_t;$/;"	t
elt_t	other_filters/taf/src/splinter_taf.h	/^typedef uint64_t elt_t;$/;"	t
elt_t	other_filters/taf/src/taf.h	/^typedef uint64_t elt_t;$/;"	t
elt_t	other_filters/taf/src/taf_sim.h	/^typedef uint64_t elt_t;$/;"	t
elt_t	other_filters/taf/src/utaf.h	/^typedef uint64_t elt_t;$/;"	t
elt_t	src/taf.cc	/^typedef uint64_t elt_t;$/;"	t	file:
emit_deletes	external/splinterdb/src/merge.h	/^   bool32       emit_deletes;$/;"	m	struct:merge_iterator
enable_sync_get	external/splinterdb/src/cache.h	/^   enable_sync_get_fn   enable_sync_get;$/;"	m	struct:cache_ops
enable_sync_get	external/splinterdb/src/clockcache.h	/^      bool32          enable_sync_get;$/;"	m	struct:clockcache::__anon44
enable_sync_get_fn	external/splinterdb/src/cache.h	/^typedef void (*enable_sync_get_fn)(cache *cc, bool32 enabled);$/;"	t
enc_table	other_filters/acf/src/permencoding.h	/^  uint16_t enc_table[1 << 16];$/;"	m	class:cuckoofilter::PermEncoding
enc_table	other_filters/acfsim/src/permencoding.h	/^  uint16_t enc_table[1 << 16];$/;"	m	class:cuckoofilter::PermEncoding
enc_table	other_filters/cf/src/permencoding.h	/^  uint16_t enc_table[1 << 16];$/;"	m	class:cuckoofilter::PermEncoding
encode	other_filters/acf/src/permencoding.h	/^  inline uint16_t encode(const uint8_t lowbits[4]) const {$/;"	f	class:cuckoofilter::PermEncoding
encode	other_filters/acfsim/src/permencoding.h	/^  inline uint16_t encode(const uint8_t lowbits[4]) const {$/;"	f	class:cuckoofilter::PermEncoding
encode	other_filters/cf/src/permencoding.h	/^  inline uint16_t encode(const uint8_t lowbits[4]) const {$/;"	f	class:cuckoofilter::PermEncoding
encode_counter	other_filters/cqf/src/gqf.c	/^static inline uint64_t *encode_counter(QF *qf, uint64_t remainder, uint64_t$/;"	f	file:
encode_counter	src/gqf_backup.c	/^static inline uint64_t *encode_counter(QF *qf, uint64_t remainder, uint64_t counter, uint64_t *slots)$/;"	f	file:
encode_ext	other_filters/taf/src/arcd.c	/^int encode_ext(const Ext exts[64], uint64_t* code) {$/;"	f
encode_ext	src/taf.cc	/^int encode_ext(const Ext exts[64], uint64_t* code) {$/;"	f
encode_sel	other_filters/taf/src/arcd.c	/^int encode_sel(const int sels[64], uint64_t *code) {$/;"	f
encode_sel	src/taf.cc	/^int encode_sel(const int sels[64], uint64_t *code) {$/;"	f
encoding	external/splinterdb/src/routing_filter.c	/^   char   encoding[];$/;"	m	struct:routing_hdr	file:
end	external/splinterdb/src/trunk.c	/^   uint64         end;$/;"	m	struct:trunk_btree_skiperator	file:
end	external/splinterdb/tests/functional/cache_test.c	/^         uint32 end;$/;"	m	struct:__anon47::__anon49::__anon52	file:
end	external/splinterdb/tests/unit/btree_stress_test.c	/^   int              end;$/;"	m	struct:insert_thread_params	file:
end	other_filters/cqf/src/bm.c	/^	iterator_end_op end;$/;"	m	struct:filter	file:
end	other_filters/cqf/src/test_threadsafe.c	/^	uint64_t end;$/;"	m	struct:insert_args	file:
end	src/bm.c	/^	iterator_end_op end;$/;"	m	struct:filter	file:
end	src/test_threadsafe.c	/^	uint64_t end;$/;"	m	struct:insert_args	file:
end_addr	external/splinterdb/src/btree.h	/^   uint64     end_addr;$/;"	m	struct:btree_iterator
end_addr	external/splinterdb/tests/functional/io_apis_test.c	/^   uint64              end_addr;$/;"	m	struct:io_test_fn_args	file:
end_branch	external/splinterdb/src/trunk.c	/^   uint16                  end_branch;$/;"	m	struct:trunk_subbundle	file:
end_branch	external/splinterdb/src/trunk.c	/^   uint16 end_branch;        \/\/ successor to the last live branch$/;"	m	struct:trunk_hdr	file:
end_bundle	external/splinterdb/src/trunk.c	/^   uint16 end_bundle;        \/\/ successor to the last live bundle$/;"	m	struct:trunk_hdr	file:
end_diskstats	external/splinterdb/scripts/run_ycsb.py	/^                    end_diskstats = get_io_stats(DEVICE)$/;"	v
end_filter	external/splinterdb/src/trunk.c	/^   uint16                  end_filter;$/;"	m	struct:trunk_subbundle	file:
end_generation	external/splinterdb/src/btree.h	/^   uint64     end_generation;$/;"	m	struct:btree_iterator
end_idx	external/splinterdb/src/btree.h	/^   uint64     end_idx;$/;"	m	struct:btree_iterator
end_key	external/splinterdb/src/trunk.c	/^   key_buffer            end_key;$/;"	m	struct:trunk_compact_bundle_req	file:
end_key	external/splinterdb/src/trunk.c	/^   key_buffer     end_key;$/;"	m	struct:trunk_filter_scratch	file:
end_line	external/splinterdb/tests/functional/ycsb_test.c	/^   uint64    end_line;$/;"	m	struct:parse_ycsb_log_req	file:
end_sb_filter	external/splinterdb/src/trunk.c	/^   uint16 end_sb_filter;     \/\/ successor to the last sb filter$/;"	m	struct:trunk_hdr	file:
end_sb_no	external/splinterdb/src/trunk.h	/^   uint16 end_sb_no; \/\/ subbundle number (oldest,$/;"	m	struct:trunk_async_ctxt
end_subbundle	external/splinterdb/src/trunk.c	/^   uint16 end_subbundle;     \/\/ successor to the last live subbundle$/;"	m	struct:trunk_hdr	file:
end_subbundle	external/splinterdb/src/trunk.c	/^   uint16 end_subbundle;$/;"	m	struct:trunk_bundle	file:
end_time	external/splinterdb/tests/functional/ycsb_test.c	/^   uint64 end_time;$/;"	m	struct:ycsb_op	file:
enqueue_time	external/splinterdb/src/task.h	/^   timestamp    enqueue_time;$/;"	m	struct:task
entries	external/splinterdb/src/shard_log.h	/^   log_entry       **entries;$/;"	m	struct:shard_log_iterator
entries	external/splinterdb/tests/unit/splinter_test.c	/^   writable_buffer entries;$/;"	m	struct:trunk_shadow	file:
entry	external/splinterdb/src/clockcache.h	/^   clockcache_entry    *entry;$/;"	m	struct:clockcache
entry_buffer	external/splinterdb/src/mini_allocator.c	/^   char   entry_buffer[];$/;"	m	struct:mini_meta_hdr	file:
entry_fits_in_page	external/splinterdb/src/mini_allocator.c	/^entry_fits_in_page(uint64 page_size, uint64 start, uint64 entry_size)$/;"	f	file:
entry_status	external/splinterdb/src/clockcache.h	/^typedef uint32 entry_status; \/\/ Saved in clockcache_entry->status$/;"	t
eprint	external/splinterdb/scripts/list_test.py	/^def eprint(*args, **kwargs) -> None:$/;"	f
errors	external/splinterdb/tests/unit/splinter_test.c	/^   uint64        errors;$/;"	m	struct:shadow_check_tuple_arg	file:
est_tuples_in_compaction	external/splinterdb/src/trunk.h	/^   uint64 est_tuples_in_compaction;$/;"	m	struct:trunk_handle
evict	external/splinterdb/src/cache.h	/^   evict_fn             evict;$/;"	m	struct:cache_ops
evict_fn	external/splinterdb/src/cache.h	/^typedef int (*evict_fn)(cache *cc, bool32 ignore_pinned);$/;"	t
evict_hand	external/splinterdb/src/clockcache.h	/^   volatile uint32  evict_hand;$/;"	m	struct:clockcache
exaf_block_t	other_filters/taf/src/exaf.h	/^typedef struct exaf_block_t {$/;"	s
exaf_clear	other_filters/taf/src/exaf.c	/^void exaf_clear(ExAF* filter) {$/;"	f
exaf_destroy	other_filters/taf/src/exaf.c	/^void exaf_destroy(ExAF* filter) {$/;"	f
exaf_hash	other_filters/taf/src/exaf.c	/^static uint64_t exaf_hash(const ExAF *filter, elt_t elt) {$/;"	f	file:
exaf_init	other_filters/taf/src/exaf.c	/^void exaf_init(ExAF *filter, size_t n, int seed) {$/;"	f
exaf_insert	other_filters/taf/src/exaf.c	/^void exaf_insert(ExAF *filter, elt_t elt) {$/;"	f
exaf_load	other_filters/taf/src/exaf.c	/^double exaf_load(ExAF *filter) {$/;"	f
exaf_lookup	other_filters/taf/src/exaf.c	/^int exaf_lookup(ExAF *filter, elt_t elt) {$/;"	f
exaf_t	other_filters/taf/src/exaf.h	/^typedef struct exaf_t {$/;"	s
exec_one_of_n_threads	external/splinterdb/tests/unit/task_system_test.c	/^exec_one_of_n_threads(void *arg)$/;"	f	file:
exec_one_thread_use_extern_apis	external/splinterdb/tests/unit/task_system_test.c	/^exec_one_thread_use_extern_apis(void *arg)$/;"	f	file:
exec_one_thread_use_lower_apis	external/splinterdb/tests/unit/task_system_test.c	/^exec_one_thread_use_lower_apis(void *arg)$/;"	f	file:
exec_thread_memalloc	external/splinterdb/tests/unit/splinter_shmem_test.c	/^exec_thread_memalloc(void *arg)$/;"	f	file:
exec_user_thread_loop_for_stop	external/splinterdb/tests/unit/task_system_test.c	/^exec_user_thread_loop_for_stop(void *arg)$/;"	f	file:
exec_worker_thread	external/splinterdb/tests/unit/large_inserts_stress_test.c	/^exec_worker_thread(void *w)$/;"	f	file:
exec_worker_thread	external/splinterdb/tests/unit/splinterdb_stress_test.c	/^exec_worker_thread(void *w)$/;"	f	file:
exit_code	include/test_driver.h	/^	int exit_code;$/;"	m	struct:_test_results_t
exp	other_filters/cqf/src/bm.c	/^	double exp;$/;"	m	struct:zipf_params	file:
exp	src/bm.c	/^	double exp;$/;"	m	struct:zipf_params	file:
exp_max_tid	external/splinterdb/tests/unit/task_system_test.c	/^   threadid     exp_max_tid;    \/\/ After this thread gets created$/;"	m	struct:__anon65	file:
exp_thread_idx	external/splinterdb/tests/unit/splinter_shmem_test.c	/^   threadid        exp_thread_idx; \/\/ Splinter-generated expected thread index$/;"	m	struct:__anon67	file:
exp_thread_idx	external/splinterdb/tests/unit/task_system_test.c	/^   threadid        exp_thread_idx; \/\/ Splinter-generated expected thread index$/;"	m	struct:__anon64	file:
exp_thread_idx	external/splinterdb/tests/unit/task_system_test.c	/^   threadid     exp_thread_idx; \/\/ Splinter-generated expected thread index$/;"	m	struct:__anon65	file:
expected_found	external/splinterdb/tests/functional/splinter_test.c	/^   bool32             expected_found;$/;"	m	struct:test_splinter_thread_params	file:
expected_found	external/splinterdb/tests/test_common.h	/^   bool32        expected_found;$/;"	m	struct:__anon61
ext_arr_eq	other_filters/taf/src/arcd.c	/^int ext_arr_eq(Ext a[64], Ext b[64]) {$/;"	f
ext_arr_eq	src/taf.cc	/^int ext_arr_eq(Ext a[64], Ext b[64]) {$/;"	f
ext_code	other_filters/taf/src/exaf.h	/^  uint8_t ext_code[EXT_CODE_BYTES];$/;"	m	struct:exaf_block_t
ext_matches_hash	other_filters/taf/src/exaf.c	/^static int ext_matches_hash(ExAF* filter, Ext* ext, uint64_t hash) {$/;"	f	file:
ext_setup	other_filters/taf/src/exaf.c	/^ExAF* ext_setup() {$/;"	f
ext_t	other_filters/taf/src/ext.h	/^typedef struct ext_t {$/;"	s
ext_t	src/taf.cc	/^typedef struct ext_t {$/;"	s	file:
extensions	include/gqf_int.h	/^		uint64_t extensions[QF_METADATA_WORDS_PER_BLOCK];$/;"	m	struct:qfblock
extent_addr	external/splinterdb/src/mini_allocator.c	/^   uint64     extent_addr;$/;"	m	struct:keyed_meta_entry	file:
extent_addr	external/splinterdb/src/mini_allocator.c	/^   uint64 extent_addr;$/;"	m	struct:unkeyed_meta_entry	file:
extent_allocs	external/splinterdb/src/rc_allocator.h	/^   int64 extent_allocs[NUM_PAGE_TYPES];$/;"	m	struct:rc_allocator_stats
extent_base_addr	external/splinterdb/src/allocator.h	/^   base_addr_fn extent_base_addr;$/;"	m	struct:allocator_ops
extent_capacity	external/splinterdb/src/allocator.h	/^   uint64 extent_capacity;$/;"	m	struct:allocator_config
extent_deallocs	external/splinterdb/src/rc_allocator.h	/^   int64 extent_deallocs[NUM_PAGE_TYPES];$/;"	m	struct:rc_allocator_stats
extent_discard	external/splinterdb/src/cache.h	/^   extent_discard_fn    extent_discard;$/;"	m	struct:cache_ops
extent_discard_fn	external/splinterdb/src/cache.h	/^typedef void (*extent_discard_fn)(cache *cc, uint64 addr, page_type type);$/;"	t
extent_mask	external/splinterdb/src/allocator.h	/^   uint64 extent_mask;$/;"	m	struct:allocator_config
extent_mask	external/splinterdb/src/clockcache.h	/^   uint64 extent_mask;$/;"	m	struct:clockcache_config
extent_size	external/splinterdb/include/splinterdb/splinterdb.h	/^   uint64 extent_size;$/;"	m	struct:splinterdb_config
extent_size	external/splinterdb/src/cache.h	/^   cache_config_generic_uint64_fn extent_size;$/;"	m	struct:cache_config_ops
extent_size	external/splinterdb/src/io.h	/^   uint64 extent_size;$/;"	m	struct:io_config
extent_size	external/splinterdb/tests/config.h	/^   uint64 extent_size;$/;"	m	struct:master_config
extent_sync	external/splinterdb/src/cache.h	/^   extent_sync_fn       extent_sync;$/;"	m	struct:cache_ops
extent_sync_fn	external/splinterdb/src/cache.h	/^typedef void (*extent_sync_fn)(cache  *cc,$/;"	t
extra_blocks	other_filters/taf/src/taf.c	/^int extra_blocks = 0;$/;"	v
extra_blocks	other_filters/taf/src/taf.cc	/^int extra_blocks = 0;$/;"	v
extra_blocks	src/taf.cc	/^int extra_blocks = 0;$/;"	v
f_info	include/gqf_int.h	/^		file_info f_info;$/;"	m	struct:quotient_filter_runtime_data
f_info	other_filters/cqf/include/gqf_int.h	/^		file_info f_info;$/;"	m	struct:quotient_filter_runtime_data
failed_flushes	external/splinterdb/src/trunk.h	/^   uint64 failed_flushes[TRUNK_MAX_HEIGHT];$/;"	m	struct:trunk_stats
false_positive_probabilty	other_filters/acf/benchmarks/bulk-insert-and-query.cc	/^  double false_positive_probabilty;$/;"	m	struct:Statistics	file:
false_positive_probabilty	other_filters/cf/benchmarks/bulk-insert-and-query.cc	/^  double false_positive_probabilty;$/;"	m	struct:Statistics	file:
false_positive_rate	include/test_driver.h	/^	double false_positive_rate;$/;"	m	struct:_test_results_t
family	include/ll_table.h	/^	uint64_t family;$/;"	m	struct:ll_list
fanout	external/splinterdb/include/splinterdb/splinterdb.h	/^   uint64 fanout;$/;"	m	struct:splinterdb_config
fanout	external/splinterdb/src/trunk.h	/^   uint64 fanout;              \/\/ children to trigger split$/;"	m	struct:trunk_config
fanout	external/splinterdb/tests/config.h	/^   uint64 fanout;$/;"	m	struct:master_config
fd	external/splinterdb/src/platform_linux/laio.h	/^   int                fd; \/\/ File descriptor to Splinter device\/file.$/;"	m	struct:laio_handle
fd	include/gqf_int.h	/^		int fd;$/;"	m	struct:file_info
fd	other_filters/cqf/include/gqf_int.h	/^		int fd;$/;"	m	struct:file_info
file	external/splinterdb/src/platform_linux/platform_inline.h	/^                        const char      *file,$/;"	v
file_info	include/gqf_int.h	/^	} file_info;$/;"	t	typeref:struct:file_info
file_info	include/gqf_int.h	/^  typedef struct file_info {$/;"	s
file_info	other_filters/cqf/include/gqf_int.h	/^	} file_info;$/;"	t	typeref:struct:file_info
file_info	other_filters/cqf/include/gqf_int.h	/^  typedef struct file_info {$/;"	s
filename	external/splinterdb/include/splinterdb/splinterdb.h	/^   const char *filename;$/;"	m	struct:splinterdb_config
filename	external/splinterdb/src/io.h	/^   char   filename[MAX_STRING_LENGTH];$/;"	m	struct:io_config
filename	external/splinterdb/tests/functional/ycsb_test.c	/^   char     *filename;$/;"	m	struct:parse_ycsb_log_req	file:
filename	external/splinterdb/tests/functional/ycsb_test.c	/^   char    *filename;$/;"	m	struct:ycsb_log_params	file:
filepath	include/gqf_int.h	/^		char *filepath;$/;"	m	struct:file_info
filepath	other_filters/cqf/include/gqf_int.h	/^		char *filepath;$/;"	m	struct:file_info
filter	external/splinterdb/src/trunk.c	/^   routing_filter filter;      \/\/ routing filter for keys in this pivot$/;"	m	struct:trunk_pivot_data	file:
filter	external/splinterdb/src/trunk.c	/^   routing_filter filter[TRUNK_MAX_PIVOTS];$/;"	m	struct:trunk_filter_scratch	file:
filter	external/splinterdb/src/trunk.h	/^   routing_filter            filter;$/;"	m	struct:trunk_compacted_memtable
filter	external/splinterdb/src/trunk.h	/^   routing_filter          *filter;       \/\/ Filter for subbundle or pivot$/;"	m	struct:trunk_async_ctxt
filter	other_filters/cqf/src/bm.c	/^typedef struct filter {$/;"	s	file:
filter	other_filters/cqf/src/bm.c	/^} filter;$/;"	t	typeref:struct:filter	file:
filter	src/bm.c	/^typedef struct filter {$/;"	s	file:
filter	src/bm.c	/^} filter;$/;"	t	typeref:struct:filter	file:
filter_cfg	external/splinterdb/src/trunk.h	/^   routing_config  filter_cfg;$/;"	m	struct:trunk_config
filter_ctxt	external/splinterdb/src/trunk.h	/^      routing_async_ctxt filter_ctxt; \/\/ Filter async context$/;"	m	union:trunk_async_ctxt::__anon21
filter_false_positives	external/splinterdb/src/trunk.h	/^   uint64 filter_false_positives[TRUNK_MAX_HEIGHT];$/;"	m	struct:trunk_stats
filter_index_size	external/splinterdb/include/splinterdb/splinterdb.h	/^   uint64 filter_index_size;$/;"	m	struct:splinterdb_config
filter_index_size	external/splinterdb/tests/config.h	/^   uint64 filter_index_size;$/;"	m	struct:master_config
filter_lookups	external/splinterdb/src/trunk.h	/^   uint64 filter_lookups[TRUNK_MAX_HEIGHT];$/;"	m	struct:trunk_stats
filter_multi_merge	other_filters/cqf/src/bm.c	/^void filter_multi_merge(filter qf_arr[], int nqf, filter qfr)$/;"	f
filter_multi_merge	src/bm.c	/^void filter_multi_merge(filter qf_arr[], int nqf, filter qfr)$/;"	f
filter_negatives	external/splinterdb/src/trunk.h	/^   uint64 filter_negatives[TRUNK_MAX_HEIGHT];$/;"	m	struct:trunk_stats
filter_no	external/splinterdb/src/trunk.h	/^   uint16 filter_no; \/\/ sb filter no$/;"	m	struct:trunk_async_ctxt
filter_remainder_size	external/splinterdb/include/splinterdb/splinterdb.h	/^   uint64 filter_remainder_size;$/;"	m	struct:splinterdb_config
filter_remainder_size	external/splinterdb/tests/config.h	/^   uint64 filter_remainder_size;$/;"	m	struct:master_config
filter_test	external/splinterdb/scripts/list_test.py	/^def filter_test(tests: List[Test], filters: List[Filter]) -> List[str]:$/;"	f
filter_test	external/splinterdb/tests/functional/filter_test.c	/^filter_test(int argc, char *argv[])$/;"	f
filter_time_ns	external/splinterdb/src/trunk.h	/^   uint64 filter_time_ns[TRUNK_MAX_HEIGHT];$/;"	m	struct:trunk_stats
filter_tuples	external/splinterdb/src/trunk.h	/^   uint64 filter_tuples[TRUNK_MAX_HEIGHT];$/;"	m	struct:trunk_stats
filters_built	external/splinterdb/src/trunk.h	/^   uint64 filters_built[TRUNK_MAX_HEIGHT];$/;"	m	struct:trunk_stats
final	other_filters/acf/src/hashutil.cc	15;"	d	file:
final	other_filters/acfsim/src/hashutil.cc	15;"	d	file:
final	other_filters/cf/src/hashutil.cc	15;"	d	file:
final_query_throughput	include/test_driver.h	/^	double final_query_throughput;$/;"	m	struct:_test_results_t
finalize_updates	external/splinterdb/src/merge.h	/^   bool32       finalize_updates;$/;"	m	struct:merge_iterator
find_btree_node_and_get_idx_bounds	external/splinterdb/src/btree.c	/^find_btree_node_and_get_idx_bounds(btree_iterator *itor,$/;"	f	file:
find_first_empty_slot	other_filters/cqf/src/gqf.c	/^static inline uint64_t find_first_empty_slot(QF *qf, uint64_t from)$/;"	f	file:
find_first_empty_slot	src/gqf.c	/^static inline uint64_t find_first_empty_slot(QF *qf, uint64_t from)$/;"	f	file:
find_first_empty_slot	src/gqf_backup.c	/^static inline uint64_t find_first_empty_slot(QF *qf, uint64_t from)$/;"	f	file:
find_first_test	src/gqf.c	/^uint64_t find_first_test(QF *qf, uint64_t from) {$/;"	f
find_first_test	src/gqf_backup.c	/^uint64_t find_first_test(QF *qf, uint64_t from) {$/;"	f
find_key_in_node	external/splinterdb/src/btree.c	/^find_key_in_node(btree_iterator *itor,$/;"	f	file:
find_next_n_empty_slots	other_filters/cqf/src/gqf.c	/^static inline void find_next_n_empty_slots(QF *qf, uint64_t from, uint64_t n,$/;"	f	file:
find_next_n_empty_slots	src/gqf_backup.c	/^static inline void find_next_n_empty_slots(QF *qf, uint64_t from, uint64_t n, uint64_t *indices)$/;"	f	file:
finds_per_nano	other_filters/acf/benchmarks/bulk-insert-and-query.cc	/^  map<int, double> finds_per_nano; \/\/ The key is the percent of queries that were expected$/;"	m	struct:Statistics	file:
finds_per_nano	other_filters/cf/benchmarks/bulk-insert-and-query.cc	/^  map<int, double> finds_per_nano; \/\/ The key is the percent of queries that were expected$/;"	m	struct:Statistics	file:
fingerprint_arr	external/splinterdb/src/btree.h	/^   uint32       *fingerprint_arr; \/\/ IN\/OUT: hashes of the keys in the tree$/;"	m	struct:btree_pack_req
fingerprint_size	external/splinterdb/src/routing_filter.h	/^   uint32        fingerprint_size;$/;"	m	struct:routing_config
first_log_entry	external/splinterdb/src/shard_log.c	/^first_log_entry(char *page)$/;"	f	file:
first_unused	other_filters/taf/src/exaf.c	/^static int first_unused(const ExAF* filter, size_t x) {$/;"	f	file:
first_unused	other_filters/taf/src/rsqf.c	/^static int first_unused(const RSQF* filter, size_t x) {$/;"	f	file:
first_unused	other_filters/taf/src/splinter_taf.c	/^static int first_unused(const TAF* filter, size_t x) {$/;"	f	file:
first_unused	other_filters/taf/src/taf.c	/^static int first_unused(const TAF* filter, size_t x) {$/;"	f	file:
first_unused	other_filters/taf/src/taf.cc	/^static int first_unused(const TAF* filter, size_t x) {$/;"	f	file:
first_unused	other_filters/taf/src/taf_sim.c	/^static int first_unused(const TAF* filter, size_t x) {$/;"	f	file:
first_unused	other_filters/taf/src/utaf.c	/^static int first_unused(const FullTAF* filter, size_t x) {$/;"	f	file:
first_unused	src/taf.cc	/^static int first_unused(const TAF* filter, size_t x) {$/;"	f	file:
first_unused_two_runs	other_filters/taf/src/rsqf.c	/^void first_unused_two_runs(size_t a, size_t b, size_t c, size_t d) {$/;"	f
flags	external/splinterdb/src/data_internal.h	/^   ondisk_flags          flags;$/;"	m	struct:ondisk_tuple
flags	external/splinterdb/src/data_internal.h	/^   ondisk_flags      flags;$/;"	m	struct:ondisk_key
flags	external/splinterdb/src/io.h	/^   int    flags;$/;"	m	struct:io_config
flush	external/splinterdb/src/cache.h	/^   cache_generic_fn     flush;$/;"	m	struct:cache_ops
flush_time_max_ns	external/splinterdb/src/trunk.h	/^   uint64 flush_time_max_ns[TRUNK_MAX_HEIGHT];$/;"	m	struct:trunk_stats
flush_time_ns	external/splinterdb/src/trunk.h	/^   uint64 flush_time_ns[TRUNK_MAX_HEIGHT];$/;"	m	struct:trunk_stats
flush_wait_time_ns	external/splinterdb/src/trunk.h	/^   uint64 flush_wait_time_ns[TRUNK_MAX_HEIGHT];$/;"	m	struct:trunk_stats
fmix32	other_filters/taf/src/murmur3.c	/^static FORCE_INLINE uint32_t fmix32 ( uint32_t h )$/;"	f	file:
fmix32	src/taf.cc	/^static FORCE_INLINE uint32_t fmix32 ( uint32_t h )$/;"	f	file:
fmix64	other_filters/taf/src/murmur3.c	/^static FORCE_INLINE uint64_t fmix64 ( uint64_t k )$/;"	f	file:
fmix64	src/taf.cc	/^static FORCE_INLINE uint64_t fmix64 ( uint64_t k )$/;"	f	file:
fork_child	external/splinterdb/tests/config.h	/^   bool   fork_child; \/\/ Default is FALSE$/;"	m	struct:master_config
forwards	external/splinterdb/src/merge.c	/^   bool32       forwards;$/;"	m	struct:merge_ctxt	file:
forwards	external/splinterdb/src/merge.h	/^   bool32       forwards;$/;"	m	struct:merge_iterator
found	external/splinterdb/tests/functional/ycsb_test.c	/^   bool32 found;$/;"	m	struct:ycsb_op	file:
found_values	external/splinterdb/src/trunk.h	/^   uint64                   found_values; \/\/ values found in filter$/;"	m	struct:trunk_async_ctxt
fp_arr	external/splinterdb/src/trunk.c	/^   uint32        *fp_arr;$/;"	m	struct:trunk_filter_scratch	file:
fp_arr	external/splinterdb/src/trunk.c	/^   uint32 *fp_arr;$/;"	m	struct:trunk_compact_bundle_req	file:
fpr	other_filters/acf/benchmarks/conext-table3.cc	/^  double fpr;        \/\/ false positive rate (%)$/;"	m	struct:Metrics	file:
fpr	other_filters/cf/benchmarks/conext-table3.cc	/^  double fpr;        \/\/ false positive rate (%)$/;"	m	struct:Metrics	file:
fraction	external/splinterdb/src/util.h	/^typedef struct fraction {$/;"	s
fraction	external/splinterdb/src/util.h	/^} fraction;$/;"	t	typeref:struct:fraction
frag_addr	external/splinterdb/src/platform_linux/shmem.c	/^   void *frag_addr;  \/\/ Start address of this memory fragment$/;"	m	struct:shm_large_frag_info	file:
frag_allocated_to_pid	external/splinterdb/src/platform_linux/shmem.c	/^   int      frag_allocated_to_pid; \/\/ Allocated to this OS-pid$/;"	m	struct:shm_large_frag_info	file:
frag_allocated_to_tid	external/splinterdb/src/platform_linux/shmem.c	/^   threadid frag_allocated_to_tid; \/\/ Allocated to this Splinter thread-ID$/;"	m	struct:shm_large_frag_info	file:
frag_freed_by_pid	external/splinterdb/src/platform_linux/shmem.c	/^   int      frag_freed_by_pid;     \/\/ OS-pid that freed this large fragment$/;"	m	struct:shm_large_frag_info	file:
frag_freed_by_tid	external/splinterdb/src/platform_linux/shmem.c	/^   threadid frag_freed_by_tid;     \/\/ Splinter thread-ID that freed fragment$/;"	m	struct:shm_large_frag_info	file:
frag_size	external/splinterdb/src/platform_linux/shmem.c	/^   size_t frag_size; \/\/ bytes (Used in re-allocation logic.)$/;"	m	struct:shm_large_frag_info	file:
free_bytes	external/splinterdb/src/platform_linux/shmem.c	/^   size_t free_bytes;       \/\/ Free bytes of memory left (that can be allocated)$/;"	m	struct:shminfo_usage_stats	file:
free_hand	external/splinterdb/src/clockcache.h	/^      volatile uint32 free_hand;$/;"	m	struct:clockcache::__anon44
free_hand	external/splinterdb/src/clockcache.h	/^   volatile uint32  free_hand;$/;"	m	struct:clockcache
freq	other_filters/cqf/src/test_threadsafe.c	/^	int freq;$/;"	m	struct:insert_args	file:
freq	src/test_threadsafe.c	/^	int freq;$/;"	m	struct:insert_args	file:
full_flushes	external/splinterdb/src/trunk.h	/^   uint64 full_flushes[TRUNK_MAX_HEIGHT];$/;"	m	struct:trunk_stats
func	external/splinterdb/src/platform_linux/platform_inline.h	/^                        const char      *func,$/;"	v
func	external/splinterdb/src/task.c	/^   platform_thread_worker func;$/;"	m	struct:__anon10	file:
func	external/splinterdb/src/task.h	/^   task_fn      func;$/;"	m	struct:task
functionality	external/splinterdb/tests/functional/splinter_test.h	/^   functionality,$/;"	e	enum:test_type
g_quotient_filter	include/gqf_wrapper.h	/^QF g_quotient_filter;$/;"	v
g_quotient_filter	other_filters/cqf/include/gqf_wrapper.h	/^QF g_quotient_filter;$/;"	v
g_quotient_filter_itr	include/gqf_wrapper.h	/^QFi g_quotient_filter_itr;$/;"	v
g_quotient_filter_itr	other_filters/cqf/include/gqf_wrapper.h	/^QFi g_quotient_filter_itr;$/;"	v
gen	external/splinterdb/tests/functional/log_test.c	/^   test_message_generator *gen;$/;"	m	struct:test_log_thread_params	file:
gen	external/splinterdb/tests/functional/splinter_test.h	/^   test_message_generator *gen;$/;"	m	struct:test_config
gen	other_filters/cqf/src/bm.c	/^	gen_rand gen;$/;"	m	struct:rand_generator	file:
gen	src/bm.c	/^	gen_rand gen;$/;"	m	struct:rand_generator	file:
gen_key	external/splinterdb/tests/unit/btree_stress_test.c	/^gen_key(btree_config *cfg, uint64 i, uint8 *buffer, size_t length)$/;"	f	file:
gen_msg	external/splinterdb/tests/unit/btree_stress_test.c	/^gen_msg(btree_config *cfg, uint64 i, uint8 *buffer, size_t length)$/;"	f	file:
gen_rand	other_filters/cqf/src/bm.c	/^typedef int (*gen_rand)(void *state, uint64_t noutputs, __uint128_t *outputs);$/;"	t	file:
gen_rand	src/bm.c	/^typedef int (*gen_rand)(void *state, uint64_t noutputs, __uint128_t *outputs);$/;"	t	file:
gen_tables	other_filters/acf/src/permencoding.h	/^  void gen_tables(int base, int k, uint8_t dst[4], uint16_t &idx) {$/;"	f	class:cuckoofilter::PermEncoding
gen_tables	other_filters/acfsim/src/permencoding.h	/^  void gen_tables(int base, int k, uint8_t dst[4], uint16_t &idx) {$/;"	f	class:cuckoofilter::PermEncoding
gen_tables	other_filters/cf/src/permencoding.h	/^  void gen_tables(int base, int k, uint8_t dst[4], uint16_t &idx) {$/;"	f	class:cuckoofilter::PermEncoding
generate_random_keys	other_filters/cqf/src/zipf.c	/^void generate_random_keys (uint64_t *elems, long N, long gencount, double s) {$/;"	f
generate_random_keys	src/zipf.c	/^void generate_random_keys (uint64_t *elems, long N, long gencount, double s) {$/;"	f
generate_test_message	external/splinterdb/tests/functional/test.h	/^generate_test_message(const test_message_generator *generator,$/;"	f
generation	external/splinterdb/src/btree_private.h	/^   uint64      generation;$/;"	m	struct:btree_hdr
generation	external/splinterdb/src/memtable.h	/^   uint64                  generation;$/;"	m	struct:memtable
generation	external/splinterdb/src/memtable.h	/^   volatile uint64 generation;$/;"	m	struct:memtable_context
generation	external/splinterdb/src/shard_log.c	/^   uint64       generation;$/;"	m	struct:log_entry	file:
generation	external/splinterdb/src/trunk.c	/^   uint64 generation;          \/\/ receives new higher number when pivot splits$/;"	m	struct:trunk_pivot_data	file:
generation	external/splinterdb/src/trunk.h	/^   uint64        generation;$/;"	m	struct:trunk_memtable_args
generation_retired	external/splinterdb/src/memtable.h	/^   volatile uint64 generation_retired;$/;"	m	struct:memtable_context
generation_to_incorporate	external/splinterdb/src/memtable.h	/^   volatile uint64 generation_to_incorporate;$/;"	m	struct:memtable_context
generator_average_message_size	external/splinterdb/tests/functional/test.h	/^generator_average_message_size(test_message_generator *gen)$/;"	f
generic_ref_fn	external/splinterdb/src/allocator.h	/^typedef uint8 (*generic_ref_fn)(allocator *al, uint64 addr);$/;"	t
get	other_filters/cqf/src/bm.c	/^	iterator_get_op get;$/;"	m	struct:filter	file:
get	src/bm.c	/^	iterator_get_op get;$/;"	m	struct:filter	file:
get16bits	other_filters/acf/src/hashutil.cc	28;"	d	file:
get16bits	other_filters/acfsim/src/hashutil.cc	28;"	d	file:
get16bits	other_filters/cf/src/hashutil.cc	28;"	d	file:
getCurrentTime	external/splinterdb/tests/unit/main.c	/^getCurrentTime(void)$/;"	f	file:
get_allocator	external/splinterdb/src/cache.h	/^   get_allocator_fn     get_allocator;$/;"	m	struct:cache_ops
get_allocator_fn	external/splinterdb/src/cache.h	/^typedef allocator *(*get_allocator_fn)(const cache *cc);$/;"	t
get_async_req	external/splinterdb/src/io.h	/^   io_get_async_req_fn       get_async_req;$/;"	m	struct:io_ops
get_block	include/gqf_int.h	/^  static inline qfblock * get_block(const QF *qf, uint64_t block_index)$/;"	f
get_block	other_filters/cqf/include/gqf_int.h	/^  static inline qfblock * get_block(const QF *qf, uint64_t block_index)$/;"	f
get_capacity	external/splinterdb/src/allocator.h	/^   get_size_fn  get_capacity;$/;"	m	struct:allocator_ops
get_config	external/splinterdb/src/allocator.h	/^   allocator_get_config_fn get_config;$/;"	m	struct:allocator_ops
get_config	external/splinterdb/src/cache.h	/^   cache_config_fn      get_config;$/;"	m	struct:cache_ops
get_context	external/splinterdb/src/io.h	/^   io_get_context_fn         get_context;$/;"	m	struct:io_ops
get_ctx_idx	external/splinterdb/src/platform_linux/laio.c	/^get_ctx_idx(laio_handle *io)$/;"	f	file:
get_ext_code	other_filters/taf/src/exaf.c	/^static uint64_t get_ext_code(const ExAF* filter, size_t block_i) {$/;"	f	file:
get_io_stats	external/splinterdb/scripts/run_ycsb.py	/^def get_io_stats(dev_name):$/;"	f
get_iovec	external/splinterdb/src/io.h	/^   io_get_iovec_fn           get_iovec;$/;"	m	struct:io_ops
get_maybe_set_op_count	external/splinterdb/scripts/run_ycsb.py	/^def get_maybe_set_op_count(filename):$/;"	f
get_metadata	external/splinterdb/src/io.h	/^   io_get_metadata_fn        get_metadata;$/;"	m	struct:io_ops
get_new_page_for_thread	external/splinterdb/src/shard_log.c	/^get_new_page_for_thread(shard_log             *log,$/;"	f	file:
get_occupied	other_filters/taf/src/macros.h	41;"	d
get_occupied	src/taf.cc	247;"	d	file:
get_range_op	other_filters/cqf/src/bm.c	/^typedef __uint128_t (*get_range_op)();$/;"	t	file:
get_range_op	src/bm.c	/^typedef __uint128_t (*get_range_op)();$/;"	t	file:
get_rc	external/splinterdb/src/clockcache.c	/^} get_rc;$/;"	t	typeref:enum:__anon13	file:
get_ref	external/splinterdb/src/allocator.h	/^   generic_ref_fn get_ref;$/;"	m	struct:allocator_ops
get_runend	other_filters/taf/src/macros.h	51;"	d
get_runend	src/taf.cc	257;"	d	file:
get_sel_code	other_filters/taf/src/splinter_taf.c	/^static uint64_t get_sel_code(const TAF* filter, size_t block_i) {$/;"	f	file:
get_sel_code	other_filters/taf/src/taf.c	/^static uint64_t get_sel_code(const TAF* filter, size_t block_i) {$/;"	f	file:
get_sel_code	other_filters/taf/src/taf.cc	/^static uint64_t get_sel_code(const TAF* filter, size_t block_i) {$/;"	f	file:
get_sel_code	other_filters/taf/src/taf_sim.c	/^static uint64_t get_sel_code(const TAF* filter, size_t block_i) {$/;"	f	file:
get_sel_code	src/taf.cc	/^static uint64_t get_sel_code(const TAF* filter, size_t block_i) {$/;"	f	file:
get_size_fn	external/splinterdb/src/allocator.h	/^typedef uint64 (*get_size_fn)(allocator *al);$/;"	t
get_slot	other_filters/cqf/src/gqf.c	/^static inline uint64_t get_slot(const QF *qf, uint64_t index)$/;"	f	file:
get_slot	src/gqf.c	/^static inline uint64_t get_slot(const QF *qf, uint64_t index)$/;"	f	file:
get_slot	src/gqf_backup.c	/^static inline uint64_t get_slot(const QF *qf, uint64_t index)$/;"	f	file:
get_slot_info	src/gqf.c	/^static inline int get_slot_info(const QF *qf, uint64_t index, uint64_t *ext, int *ext_slots, uint64_t *count, int *count_slots) {$/;"	f	file:
get_slot_info	src/gqf_backup.c	/^static inline int get_slot_info(const QF *qf, uint64_t index, uint64_t *ext, int *ext_slots, uint64_t *count, int *count_slots) {$/;"	f	file:
get_super_addr	external/splinterdb/src/allocator.h	/^   get_super_addr_fn    get_super_addr;$/;"	m	struct:allocator_ops
get_super_addr_fn	external/splinterdb/src/allocator.h	/^typedef platform_status (*get_super_addr_fn)(allocator        *al,$/;"	t
get_values	other_filters/taf/src/set.c	/^char** get_values(Setnode *set, int set_size) {$/;"	f
get_values	src/taf.cc	/^char** get_values(Setnode *set, int set_size) {$/;"	f
get_workload_string	external/splinterdb/scripts/run_ycsb.py	/^def get_workload_string(filename, threads, mem_size, value_size):$/;"	f
get_ycsb_string	external/splinterdb/scripts/run_ycsb.py	/^def get_ycsb_string(out_dir, datetime_str, threads, mem_size, value_size):$/;"	f
getblock	other_filters/taf/src/murmur3.c	42;"	d	file:
getblock	src/taf.cc	353;"	d	file:
global_counter	include/partitioned_counter.h	/^	int64_t *global_counter;$/;"	m	struct:partitioned_counter
global_counter	other_filters/cqf/include/partitioned_counter.h	/^	int64_t *global_counter;$/;"	m	struct:partitioned_counter
gqf	other_filters/cqf/src/bm.c	/^filter gqf = {$/;"	v
gqf	src/bm.c	/^filter gqf = {$/;"	v
gqf_destroy	include/gqf_wrapper.h	/^extern inline int gqf_destroy()$/;"	f
gqf_destroy	other_filters/cqf/include/gqf_wrapper.h	/^extern inline int gqf_destroy()$/;"	f
gqf_end	include/gqf_wrapper.h	/^extern inline int gqf_end()$/;"	f
gqf_end	other_filters/cqf/include/gqf_wrapper.h	/^extern inline int gqf_end()$/;"	f
gqf_get	include/gqf_wrapper.h	/^extern inline int gqf_get(uint64_t *key, uint64_t *value, uint64_t *count)$/;"	f
gqf_get	other_filters/cqf/include/gqf_wrapper.h	/^extern inline int gqf_get(uint64_t *key, uint64_t *value, uint64_t *count)$/;"	f
gqf_init	include/gqf_wrapper.h	/^extern inline int gqf_init(uint64_t nbits, uint64_t num_hash_bits)$/;"	f
gqf_init	other_filters/cqf/include/gqf_wrapper.h	/^extern inline int gqf_init(uint64_t nbits, uint64_t num_hash_bits)$/;"	f
gqf_insert	include/gqf_wrapper.h	/^extern inline int gqf_insert(__uint128_t val, uint64_t count)$/;"	f
gqf_insert	other_filters/cqf/include/gqf_wrapper.h	/^extern inline int gqf_insert(__uint128_t val, uint64_t count)$/;"	f
gqf_iterator	include/gqf_wrapper.h	/^extern inline int gqf_iterator(uint64_t pos)$/;"	f
gqf_iterator	other_filters/cqf/include/gqf_wrapper.h	/^extern inline int gqf_iterator(uint64_t pos)$/;"	f
gqf_lookup	include/gqf_wrapper.h	/^extern inline int gqf_lookup(__uint128_t val)$/;"	f
gqf_lookup	other_filters/cqf/include/gqf_wrapper.h	/^extern inline int gqf_lookup(__uint128_t val)$/;"	f
gqf_next	include/gqf_wrapper.h	/^extern inline int gqf_next()$/;"	f
gqf_next	other_filters/cqf/include/gqf_wrapper.h	/^extern inline int gqf_next()$/;"	f
gqf_range	include/gqf_wrapper.h	/^extern inline __uint128_t gqf_range()$/;"	f
gqf_range	other_filters/cqf/include/gqf_wrapper.h	/^extern inline __uint128_t gqf_range()$/;"	f
greater_than	external/splinterdb/src/iterator.h	/^   greater_than,$/;"	e	enum:comparison
greater_than_or_equal	external/splinterdb/src/iterator.h	/^   greater_than_or_equal,$/;"	e	enum:comparison
group	external/splinterdb/src/task.h	/^   task_group group[NUM_TASK_TYPES];$/;"	m	struct:task_system
hand	external/splinterdb/src/rc_allocator.h	/^   uint64                  hand;$/;"	m	struct:rc_allocator
handle_arr	external/splinterdb/tests/functional/cache_test.c	/^   page_handle      **handle_arr;              \/\/ page handles$/;"	m	struct:__anon54	file:
hard_max_branches_per_node	external/splinterdb/src/trunk.h	/^   uint64 hard_max_branches_per_node;$/;"	m	struct:trunk_config
hash	external/splinterdb/src/btree.h	/^   hash_fn       hash; \/\/ hash function used for calculating filter_hash$/;"	m	struct:btree_pack_req
hash	external/splinterdb/src/routing_filter.h	/^   hash_fn      hash;$/;"	m	struct:routing_config
hash	include/gqf.h	/^		uint64_t hash; \/\/ the quotient and remainder of the item$/;"	m	struct:qf_query_result_t
hash	include/gqf.h	/^		uint64_t hash;$/;"	m	struct:qf_insert_result_t
hash	other_filters/taf/src/splinter_taf.c	/^	uint64_t hash;$/;"	m	struct:backing_data	file:
hash	other_filters/taf/src/splinter_taf.h	/^  uint64_t hash;$/;"	m	struct:remote_elt_t
hash	other_filters/taf/src/taf.h	/^  uint64_t hash;$/;"	m	struct:remote_elt_t
hash	other_filters/taf/src/taf_sim.h	/^  uint64_t hash;$/;"	m	struct:remote_elt_t
hash	other_filters/taf/src/utaf.h	/^  uint64_t hash;$/;"	m	struct:remote_elt_t
hash	src/taf.cc	/^  uint64_t hash;$/;"	m	struct:remote_elt_t	file:
hash_64	other_filters/cqf/src/hashutil.c	/^uint64_t hash_64(uint64_t key, uint64_t mask)$/;"	f
hash_64	src/hashutil.c	/^uint64_t hash_64(uint64_t key, uint64_t mask)$/;"	f
hash_64i	other_filters/cqf/src/hashutil.c	/^uint64_t hash_64i(uint64_t key, uint64_t mask)$/;"	f
hash_64i	src/hashutil.c	/^uint64_t hash_64i(uint64_t key, uint64_t mask)$/;"	f
hash_fcns	other_filters/acf/src/cuckoofilter.h	/^				 HashFamily *hash_fcns;$/;"	m	class:cuckoofilter::CuckooFilter
hash_fcns	other_filters/acfsim/src/cuckoofilter.h	/^				 HashFamily *hash_fcns;$/;"	m	class:cuckoofilter::CuckooFilter
hash_fn	external/splinterdb/src/platform_linux/platform.h	/^typedef uint32 (*hash_fn)(const void *input, size_t length, unsigned int seed);$/;"	t
hash_mode	include/gqf_int.h	/^		enum qf_hashmode hash_mode;$/;"	m	struct:quotient_filter_metadata	typeref:enum:quotient_filter_metadata::qf_hashmode
hash_mode	other_filters/cqf/include/gqf_int.h	/^		enum qf_hashmode hash_mode;$/;"	m	struct:quotient_filter_metadata	typeref:enum:quotient_filter_metadata::qf_hashmode
hash_sels	other_filters/acf/src/cuckoofilter.h	/^				 char *hash_sels;$/;"	m	class:cuckoofilter::CuckooFilter
hash_sels	other_filters/acfsim/src/cuckoofilter.h	/^				 char *hash_sels;$/;"	m	class:cuckoofilter::CuckooFilter
hash_str	other_filters/acf/example/test_fp.cc	/^uint64_t hash_str(char *str) {$/;"	f
hash_str	other_filters/acf/example/test_splinter_throughput.cc	/^uint64_t hash_str(char *str) {$/;"	f
hash_str	other_filters/acfsim/example/test_fp.cc	/^uint64_t hash_str(char *str) {$/;"	f
hash_str	other_filters/cf/example/test_splinter_throughput.cc	/^uint64_t hash_str(char *str) {$/;"	f
hash_str	other_filters/cqf/src/test_splinter_throughput.c	/^uint64_t hash_str(char *str) {$/;"	f
hash_str	other_filters/taf/src/splinter_taf.c	/^uint64_t hash_str(char *str) {$/;"	f
hash_str	other_filters/taf/src/taf.c	/^uint64_t hash_str(char *str) {$/;"	f
hash_str	other_filters/taf/src/taf.cc	/^uint64_t hash_str(char *str) {$/;"	f
hash_str	src/taf.cc	/^uint64_t hash_str(char *str) {$/;"	f
hash_str	src/test_ext_inc_throughput.cc	/^uint64_t hash_str(char *str) {$/;"	f
hash_str	src/test_ext_throughput.cc	/^uint64_t hash_str(char *str) {$/;"	f
hash_str	src/test_hash_table.c	/^uint64_t hash_str(char *str) {$/;"	f
hash_str	src/test_progress.c	/^uint64_t hash_str(char *str) {$/;"	f
hash_str	src/test_splinter_adversarial.c	/^uint64_t hash_str(char *str) {$/;"	f
hash_str	src/test_splinter_zipfian_histogram.c	/^uint64_t hash_str(char *str) {$/;"	f
hash_str	test/test_splinter_lltable_throughput.c	/^uint64_t hash_str(char *str) {$/;"	f
hash_str	test/test_throughput.c	/^uint64_t hash_str(char *str) {$/;"	f
hash_table_insert	src/hash_table.c	/^int hash_table_insert(ht_node *ht, int ht_len, uint64_t key) {$/;"	f
hash_table_query	src/hash_table.c	/^int hash_table_query(ht_node *ht, int ht_len, uint64_t key) {$/;"	f
hasher_	other_filters/acf/src/cuckoofilter.h	/^				 HashFamily hasher_;$/;"	m	class:cuckoofilter::CuckooFilter
hasher_	other_filters/acf/src/simd-block.h	/^  HashFamily hasher_;$/;"	m	class:SimdBlockFilter
hasher_	other_filters/acfsim/src/cuckoofilter.h	/^				 HashFamily hasher_;$/;"	m	class:cuckoofilter::CuckooFilter
hasher_	other_filters/acfsim/src/simd-block.h	/^  HashFamily hasher_;$/;"	m	class:SimdBlockFilter
hasher_	other_filters/cf/src/cuckoofilter.h	/^  HashFamily hasher_;$/;"	m	class:cuckoofilter::CuckooFilter
hasher_	other_filters/cf/src/simd-block.h	/^  HashFamily hasher_;$/;"	m	class:SimdBlockFilter
hasvalue12	other_filters/acf/src/bitsutil.h	15;"	d
hasvalue12	other_filters/acfsim/src/bitsutil.h	15;"	d
hasvalue12	other_filters/cf/src/bitsutil.h	15;"	d
hasvalue16	other_filters/acf/src/bitsutil.h	19;"	d
hasvalue16	other_filters/acfsim/src/bitsutil.h	19;"	d
hasvalue16	other_filters/cf/src/bitsutil.h	19;"	d
hasvalue4	other_filters/acf/src/bitsutil.h	9;"	d
hasvalue4	other_filters/acfsim/src/bitsutil.h	9;"	d
hasvalue4	other_filters/cf/src/bitsutil.h	9;"	d
hasvalue8	other_filters/acf/src/bitsutil.h	12;"	d
hasvalue8	other_filters/acfsim/src/bitsutil.h	12;"	d
hasvalue8	other_filters/cf/src/bitsutil.h	12;"	d
haszero12	other_filters/acf/src/bitsutil.h	14;"	d
haszero12	other_filters/acfsim/src/bitsutil.h	14;"	d
haszero12	other_filters/cf/src/bitsutil.h	14;"	d
haszero16	other_filters/acf/src/bitsutil.h	17;"	d
haszero16	other_filters/acfsim/src/bitsutil.h	17;"	d
haszero16	other_filters/cf/src/bitsutil.h	17;"	d
haszero4	other_filters/acf/src/bitsutil.h	8;"	d
haszero4	other_filters/acfsim/src/bitsutil.h	8;"	d
haszero4	other_filters/cf/src/bitsutil.h	8;"	d
haszero8	other_filters/acf/src/bitsutil.h	11;"	d
haszero8	other_filters/acfsim/src/bitsutil.h	11;"	d
haszero8	other_filters/cf/src/bitsutil.h	11;"	d
hdr	external/splinterdb/src/btree.h	/^   btree_hdr   *hdr;$/;"	m	struct:btree_node
hdr	external/splinterdb/src/trunk.h	/^   trunk_hdr   *hdr;$/;"	m	struct:trunk_node
head	external/splinterdb/src/pcq.h	/^   cache_aligned_uint32 head; \/\/ Consumer dequeues from here$/;"	m	struct:__anon34
head	external/splinterdb/src/task.h	/^   task *head;$/;"	m	struct:task_queue
head	include/ll_table.h	/^	ll_node *head;$/;"	m	struct:ll_list
header_addr	external/splinterdb/src/routing_filter.h	/^   uint64              header_addr; \/\/ header address in filter page$/;"	m	struct:routing_async_ctxt
heap	external/splinterdb/src/srq.h	/^   srq_data       heap[SRQ_MAX_ENTRIES];$/;"	m	struct:srq
heap_handle	external/splinterdb/include/splinterdb/splinterdb.h	/^   void *heap_handle;$/;"	m	struct:splinterdb_config
heap_id	external/splinterdb/include/splinterdb/splinterdb.h	/^   void *heap_id;$/;"	m	struct:splinterdb_config
heap_id	external/splinterdb/src/clockcache.h	/^   platform_heap_id     heap_id;$/;"	m	struct:clockcache
heap_id	external/splinterdb/src/platform_linux/laio.h	/^   platform_heap_id   heap_id;$/;"	m	struct:laio_handle
heap_id	external/splinterdb/src/rc_allocator.h	/^   platform_heap_id heap_id;$/;"	m	struct:rc_allocator
heap_id	external/splinterdb/src/splinterdb.c	/^   platform_heap_id   heap_id;$/;"	m	struct:splinterdb	file:
heap_id	external/splinterdb/src/task.c	/^   platform_heap_id heap_id;$/;"	m	struct:__anon10	file:
heap_id	external/splinterdb/src/task.h	/^   platform_heap_id    heap_id;$/;"	m	struct:task_system
heap_id	external/splinterdb/src/trunk.h	/^   platform_heap_id      heap_id;$/;"	m	struct:trunk_handle
heap_id	external/splinterdb/src/util.h	/^   platform_heap_id heap_id;$/;"	m	struct:writable_buffer
heap_id	external/splinterdb/tests/functional/btree_test.c	/^   platform_heap_id   heap_id;$/;"	m	struct:test_memtable_context	file:
height	external/splinterdb/src/btree.h	/^   uint16            height;$/;"	m	struct:btree_pack_req
height	external/splinterdb/src/btree.h	/^   uint32        height;$/;"	m	struct:btree_iterator
height	external/splinterdb/src/btree_private.h	/^   uint8       height;$/;"	m	struct:btree_hdr
height	external/splinterdb/src/trunk.c	/^   uint16                height;$/;"	m	struct:trunk_compact_bundle_req	file:
height	external/splinterdb/src/trunk.c	/^   uint16         height;$/;"	m	struct:trunk_filter_scratch	file:
height	external/splinterdb/src/trunk.c	/^   uint16 height;           \/\/ height of the node$/;"	m	struct:trunk_hdr	file:
height	external/splinterdb/src/trunk.h	/^   uint16            height;     \/\/ height of trunk_node$/;"	m	struct:trunk_async_ctxt
height	external/splinterdb/tests/functional/avlTree.h	/^   uint32               height;$/;"	m	struct:AvlTreeLinks
help	external/splinterdb/scripts/run_ycsb.py	/^                       help="Config options to pass to SplinterDB")$/;"	v
help	external/splinterdb/scripts/run_ycsb.py	/^                       help="Directory where traces are located")$/;"	v
help	external/splinterdb/scripts/run_ycsb.py	/^                       help="List of memory sizes to use in GiB, each will be run")$/;"	v
help	external/splinterdb/scripts/run_ycsb.py	/^                       help="List of thread counts to use, each will be run")$/;"	v
help	external/splinterdb/scripts/run_ycsb.py	/^                       help="Optional name of DEVICE that the db is located on for IO stats")$/;"	v
hid	external/splinterdb/tests/functional/cache_test.c	/^   platform_heap_id   hid;                     \/\/ IN$/;"	m	struct:__anon54	file:
hid	external/splinterdb/tests/functional/io_apis_test.c	/^   platform_heap_id    hid;$/;"	m	struct:io_test_fn_args	file:
hid	external/splinterdb/tests/unit/btree_stress_test.c	/^   platform_heap_id hid;$/;"	m	struct:insert_thread_params	file:
history	external/splinterdb/src/clockcache.h	/^   history_record history[NUM_HISTORY_RECORDS];$/;"	m	struct:clockcache_entry
history_record	external/splinterdb/src/clockcache.h	/^typedef struct history_record {$/;"	s
history_record	external/splinterdb/src/clockcache.h	/^} history_record;$/;"	t	typeref:struct:history_record
hook_init_done	external/splinterdb/src/task.h	/^   int       hook_init_done;$/;"	m	struct:task_system
hooks	external/splinterdb/src/task.h	/^   task_hook hooks[TASK_MAX_HOOKS];$/;"	m	struct:task_system
hop	external/splinterdb/tests/functional/cache_test.c	/^      } hop;$/;"	m	union:__anon47::__anon49	typeref:struct:__anon47::__anon49::__anon52	file:
ht_free	src/test_unit.c	/^void ht_free(ht_node** ht, int len) {$/;"	f
ht_free	src/test_unit_old.c	/^void ht_free(ht_node** ht, int len) {$/;"	f
ht_init	src/test_unit.c	/^ht_node** ht_init(uint64_t size) {$/;"	f
ht_init	src/test_unit_old.c	/^ht_node** ht_init(uint64_t size) {$/;"	f
ht_insert	src/test_unit.c	/^void ht_insert(ht_node** ht, int len, uint64_t tag, uint64_t key) {$/;"	f
ht_insert	src/test_unit_old.c	/^void ht_insert(ht_node** ht, int len, uint64_t tag, uint64_t key) {$/;"	f
ht_node	src/test_unit.c	/^} typedef ht_node;$/;"	t	file:
ht_node	src/test_unit_old.c	/^} typedef ht_node;$/;"	t	file:
htab	src/test_deletions.c	/^ilist *htab[HASH_TABLE_SIZE];$/;"	v
htab	src/test_fill_varied_throughput.c	/^ilist *htab[HASH_TABLE_SIZE];$/;"	v
htab	src/test_hash_accesses.c	/^ilist *htab[HASH_TABLE_SIZE];$/;"	v
htab	src/test_near_full.c	/^ilist *htab[HASH_TABLE_SIZE];$/;"	v
htab	src/test_throughput_old.c	/^ilist *htab[HASH_TABLE_SIZE];$/;"	v
htab	src/test_unit_old.c	/^ilist *htab[HASH_TABLE_SIZE];$/;"	v
htab	src/test_whitelist.c	/^ilist *htab[HASH_TABLE_SIZE];$/;"	v
htaba	src/test_bulk.c	/^ilist *htaba[HASH_TABLE_SIZE];$/;"	v
htaba	src/test_merge.c	/^ilist *htaba[HASH_TABLE_SIZE];$/;"	v
htabb	src/test_bulk.c	/^ilist *htabb[HASH_TABLE_SIZE];$/;"	v
htabb	src/test_merge.c	/^ilist *htabb[HASH_TABLE_SIZE];$/;"	v
id	external/splinterdb/src/trunk.h	/^   allocator_root_id id;$/;"	m	struct:trunk_handle
idx	external/splinterdb/src/btree.h	/^   int64      idx;$/;"	m	struct:btree_iterator
idx	external/splinterdb/src/btree_private.h	/^   int64 idx;$/;"	m	struct:leaf_incorporate_spec
idx	external/splinterdb/src/srq.h	/^   int64  idx;$/;"	m	struct:srq_data
ilist	src/test_bulk.c	/^} typedef ilist;$/;"	t	file:
ilist	src/test_deletions.c	/^} typedef ilist;$/;"	t	file:
ilist	src/test_fill_varied_throughput.c	/^} typedef ilist;$/;"	t	file:
ilist	src/test_hash_accesses.c	/^} typedef ilist;$/;"	t	file:
ilist	src/test_merge.c	/^} typedef ilist;$/;"	t	file:
ilist	src/test_near_full.c	/^} typedef ilist;$/;"	t	file:
ilist	src/test_throughput_old.c	/^} typedef ilist;$/;"	t	file:
ilist	src/test_unit_old.c	/^} typedef ilist;$/;"	t	file:
ilist	src/test_whitelist.c	/^} typedef ilist;$/;"	t	file:
ilist_hash_function	src/test_bulk.c	/^unsigned int ilist_hash_function(ilist *e) {$/;"	f
ilist_hash_function	src/test_deletions.c	/^unsigned int ilist_hash_function(ilist *e) {$/;"	f
ilist_hash_function	src/test_fill_varied_throughput.c	/^unsigned int ilist_hash_function(ilist *e) {$/;"	f
ilist_hash_function	src/test_hash_accesses.c	/^unsigned int ilist_hash_function(ilist *e) {$/;"	f
ilist_hash_function	src/test_merge.c	/^unsigned int ilist_hash_function(ilist *e) {$/;"	f
ilist_hash_function	src/test_near_full.c	/^unsigned int ilist_hash_function(ilist *e) {$/;"	f
ilist_hash_function	src/test_throughput_old.c	/^unsigned int ilist_hash_function(ilist *e) {$/;"	f
ilist_hash_function	src/test_unit_old.c	/^unsigned int ilist_hash_function(ilist *e) {$/;"	f
ilist_hash_function	src/test_whitelist.c	/^unsigned int ilist_hash_function(ilist *e) {$/;"	f
ilist_iter	src/test_bulk.c	/^typedef struct sglib_hashed_ilist_iterator ilist_iter;$/;"	t	typeref:struct:sglib_hashed_ilist_iterator	file:
ilist_iter	src/test_deletions.c	/^typedef struct sglib_hashed_ilist_iterator ilist_iter;$/;"	t	typeref:struct:sglib_hashed_ilist_iterator	file:
ilist_iter	src/test_fill_varied_throughput.c	/^typedef struct sglib_hashed_ilist_iterator ilist_iter;$/;"	t	typeref:struct:sglib_hashed_ilist_iterator	file:
ilist_iter	src/test_hash_accesses.c	/^typedef struct sglib_hashed_ilist_iterator ilist_iter;$/;"	t	typeref:struct:sglib_hashed_ilist_iterator	file:
ilist_iter	src/test_merge.c	/^typedef struct sglib_hashed_ilist_iterator ilist_iter;$/;"	t	typeref:struct:sglib_hashed_ilist_iterator	file:
ilist_iter	src/test_near_full.c	/^typedef struct sglib_hashed_ilist_iterator ilist_iter;$/;"	t	typeref:struct:sglib_hashed_ilist_iterator	file:
ilist_iter	src/test_throughput_old.c	/^typedef struct sglib_hashed_ilist_iterator ilist_iter;$/;"	t	typeref:struct:sglib_hashed_ilist_iterator	file:
ilist_iter	src/test_unit_old.c	/^typedef struct sglib_hashed_ilist_iterator ilist_iter;$/;"	t	typeref:struct:sglib_hashed_ilist_iterator	file:
ilist_iter	src/test_whitelist.c	/^typedef struct sglib_hashed_ilist_iterator ilist_iter;$/;"	t	typeref:struct:sglib_hashed_ilist_iterator	file:
in_range	external/splinterdb/src/mini_allocator.c	/^   in_range     = 0,$/;"	e	enum:boundary_state	file:
in_use	external/splinterdb/src/allocator.h	/^   get_size_fn in_use;$/;"	m	struct:allocator_ops
inc_and_check_offsets_match	other_filters/taf/src/rsqf.c	/^void inc_and_check_offsets_match(size_t target, size_t o0, size_t o1, size_t o2,$/;"	f
inc_and_check_offsets_unchanged	other_filters/taf/src/rsqf.c	/^void inc_and_check_offsets_unchanged(RSQF* filter, size_t start, size_t end) {$/;"	f
inc_offsets	other_filters/taf/src/exaf.c	/^static void inc_offsets(ExAF* filter, size_t a, size_t b) {$/;"	f	file:
inc_offsets	other_filters/taf/src/rsqf.c	/^static void inc_offsets(RSQF* filter, size_t a, size_t b) {$/;"	f	file:
inc_offsets	other_filters/taf/src/splinter_taf.c	/^static void inc_offsets(TAF* filter, size_t a, size_t b) {$/;"	f	file:
inc_offsets	other_filters/taf/src/taf.c	/^static void inc_offsets(TAF* filter, size_t a, size_t b) {$/;"	f	file:
inc_offsets	other_filters/taf/src/taf.cc	/^static void inc_offsets(TAF* filter, size_t a, size_t b) {$/;"	f	file:
inc_offsets	other_filters/taf/src/taf_sim.c	/^static void inc_offsets(TAF* filter, size_t a, size_t b) {$/;"	f	file:
inc_offsets	other_filters/taf/src/utaf.c	/^static void inc_offsets(FullTAF* filter, size_t a, size_t b) {$/;"	f	file:
inc_offsets	src/taf.cc	/^static void inc_offsets(TAF* filter, size_t a, size_t b) {$/;"	f	file:
inc_offsets_for_new_run	other_filters/taf/src/exaf.c	/^static void inc_offsets_for_new_run(ExAF* filter, size_t quot, size_t loc) {$/;"	f	file:
inc_offsets_for_new_run	other_filters/taf/src/rsqf.c	/^static void inc_offsets_for_new_run(RSQF* filter, size_t quot, size_t loc) {$/;"	f	file:
inc_offsets_for_new_run	other_filters/taf/src/splinter_taf.c	/^static void inc_offsets_for_new_run(TAF* filter, size_t quot, size_t loc) {$/;"	f	file:
inc_offsets_for_new_run	other_filters/taf/src/taf.c	/^static void inc_offsets_for_new_run(TAF* filter, size_t quot, size_t loc) {$/;"	f	file:
inc_offsets_for_new_run	other_filters/taf/src/taf.cc	/^static void inc_offsets_for_new_run(TAF* filter, size_t quot, size_t loc) {$/;"	f	file:
inc_offsets_for_new_run	other_filters/taf/src/taf_sim.c	/^static void inc_offsets_for_new_run(TAF* filter, size_t quot, size_t loc) {$/;"	f	file:
inc_offsets_for_new_run	other_filters/taf/src/utaf.c	/^static void inc_offsets_for_new_run(FullTAF* filter, size_t quot, size_t loc) {$/;"	f	file:
inc_offsets_for_new_run	src/taf.cc	/^static void inc_offsets_for_new_run(TAF* filter, size_t quot, size_t loc) {$/;"	f	file:
inc_ref	external/splinterdb/src/allocator.h	/^   generic_ref_fn inc_ref;$/;"	m	struct:allocator_ops
incorporation_mutex	external/splinterdb/src/memtable.h	/^   platform_mutex  incorporation_mutex;$/;"	m	struct:memtable_context
incr	external/splinterdb/tests/functional/cache_test.c	/^         int32  incr;$/;"	m	struct:__anon47::__anon49::__anon50	file:
incr	external/splinterdb/tests/functional/cache_test.c	/^         int32  incr;$/;"	m	struct:__anon47::__anon49::__anon52	file:
index	external/splinterdb/src/routing_filter.h	/^   uint32              index;       \/\/ hash index$/;"	m	struct:routing_async_ctxt
index	external/splinterdb/src/srq.h	/^   int64          index[SRQ_MAX_ENTRIES];$/;"	m	struct:srq
index	other_filters/acf/src/cuckoofilter.h	/^					 size_t index;$/;"	m	struct:cuckoofilter::CuckooFilter::__anon5
index	other_filters/acfsim/src/cuckoofilter.h	/^					 size_t index;$/;"	m	struct:cuckoofilter::CuckooFilter::__anon7
index	other_filters/cf/src/cuckoofilter.h	/^    size_t index;$/;"	m	struct:cuckoofilter::CuckooFilter::__anon6
index_entry	external/splinterdb/src/btree_private.h	/^typedef struct ONDISK index_entry {$/;"	s
index_entry	external/splinterdb/src/btree_private.h	/^} index_entry;$/;"	t	typeref:struct:index_entry
index_entry_child_addr	external/splinterdb/src/btree_private.h	/^index_entry_child_addr(const index_entry *entry)$/;"	f
index_entry_key	external/splinterdb/src/btree_private.h	/^index_entry_key(const index_entry *entry)$/;"	f
index_entry_required_capacity	external/splinterdb/src/btree.c	/^index_entry_required_capacity(key pivot)$/;"	f	file:
index_hand	external/splinterdb/src/srq.h	/^   uint64         index_hand;$/;"	m	struct:srq
index_hdr_search_tests	external/splinterdb/tests/unit/btree_test.c	/^index_hdr_search_tests(btree_config *cfg, platform_heap_id hid)$/;"	f	file:
index_hdr_tests	external/splinterdb/tests/unit/btree_test.c	/^index_hdr_tests(btree_config *cfg, btree_scratch *scratch, platform_heap_id hid)$/;"	f	file:
index_size	external/splinterdb/src/routing_filter.h	/^   uint32        index_size;$/;"	m	struct:routing_config
index_splits	external/splinterdb/src/trunk.h	/^   uint64 index_splits;$/;"	m	struct:trunk_stats
inet_addr_info	external/splinterdb/examples/splinterdb_custom_ipv4_addr_sortcmp_example.c	/^kv_pair inet_addr_info[] =$/;"	v
init	other_filters/cqf/src/bm.c	/^	init_op init;$/;"	m	struct:filter	file:
init	other_filters/cqf/src/bm.c	/^	rand_init init;$/;"	m	struct:rand_generator	file:
init	src/bm.c	/^	init_op init;$/;"	m	struct:filter	file:
init	src/bm.c	/^	rand_init init;$/;"	m	struct:rand_generator	file:
init_btree_config_from_master_config	external/splinterdb/tests/unit/btree_test_common.c	/^init_btree_config_from_master_config(btree_config  *dbtree_cfg,$/;"	f
init_clockcache_config_from_master_config	external/splinterdb/tests/unit/btree_test_common.c	/^init_clockcache_config_from_master_config(clockcache_config *cache_cfg,$/;"	f
init_data_config_from_master_config	external/splinterdb/tests/unit/btree_test_common.c	/^init_data_config_from_master_config(data_config   *data_cfg,$/;"	f
init_fraction	external/splinterdb/src/util.h	/^init_fraction(uint64 numerator, uint64 denominator)$/;"	f
init_io_config_from_master_config	external/splinterdb/tests/unit/btree_test_common.c	/^init_io_config_from_master_config(io_config *io_cfg, master_config *master_cfg)$/;"	f
init_op	other_filters/cqf/src/bm.c	/^typedef int (*init_op)(uint64_t nvals, uint64_t hash);$/;"	t	file:
init_op	src/bm.c	/^typedef int (*init_op)(uint64_t nvals, uint64_t hash);$/;"	t	file:
init_rc_allocator_config_from_master_config	external/splinterdb/tests/unit/btree_test_common.c	/^init_rc_allocator_config_from_master_config(allocator_config *allocator_cfg,$/;"	f
init_task_config_from_master_config	external/splinterdb/tests/unit/btree_test_common.c	/^init_task_config_from_master_config(task_system_config  *task_cfg,$/;"	f
init_test_results	src/test_driver.c	/^void init_test_results(test_results_t *results) {$/;"	f
initial_plan	external/splinterdb/src/btree.c	/^static leaf_splitting_plan initial_plan = {0, FALSE};$/;"	v	file:
input_pivot_kv_byte_count	external/splinterdb/src/trunk.c	/^   uint64  input_pivot_kv_byte_count[TRUNK_MAX_PIVOTS];$/;"	m	struct:trunk_compact_bundle_req	file:
input_pivot_tuple_count	external/splinterdb/src/trunk.c	/^   uint64  input_pivot_tuple_count[TRUNK_MAX_PIVOTS];$/;"	m	struct:trunk_compact_bundle_req	file:
insert	other_filters/cqf/src/bm.c	/^	insert_op insert;$/;"	m	struct:filter	file:
insert	other_filters/cqf/src/gqf.c	/^static inline int insert(QF *qf, __uint128_t hash, uint64_t count, uint8_t$/;"	f	file:
insert	src/bm.c	/^	insert_op insert;$/;"	m	struct:filter	file:
insert	src/gqf.c	/^static inline int insert(QF *qf, uint64_t hash, uint64_t count, uint64_t *ret_index, uint64_t *ret_hash, int *ret_hash_len, uint8_t runtime_lock) \/\/ copy of the insert function for modification$/;"	f	file:
insert	src/gqf_backup.c	/^static inline int insert(QF *qf, uint64_t hash, uint64_t count, uint64_t *ret_index, uint64_t *ret_hash, int *ret_hash_len, uint8_t runtime_lock) \/\/ copy of the insert function for modification$/;"	f	file:
insert1	other_filters/cqf/src/gqf.c	/^static inline int insert1(QF *qf, __uint128_t hash, uint8_t runtime_lock)$/;"	f	file:
insert1	src/gqf_backup.c	/^static inline int insert1(QF *qf, __uint128_t hash, uint8_t runtime_lock)$/;"	f	file:
insert_and_extend	src/gqf.c	/^int insert_and_extend(QF *qf, uint64_t index, uint64_t key, uint64_t count, uint64_t other_key, uint64_t *ret_hash, uint64_t *ret_other_hash, uint8_t flags)$/;"	f
insert_and_extend	src/gqf_backup.c	/^int insert_and_extend(QF *qf, uint64_t index, uint64_t key, uint64_t count, uint64_t other_key, uint64_t *ret_hash, uint64_t *ret_other_hash, uint8_t flags)$/;"	f
insert_args	other_filters/cqf/src/test_threadsafe.c	/^typedef struct insert_args {$/;"	s	file:
insert_args	other_filters/cqf/src/test_threadsafe.c	/^} insert_args;$/;"	t	typeref:struct:insert_args	file:
insert_args	src/test_threadsafe.c	/^typedef struct insert_args {$/;"	s	file:
insert_args	src/test_threadsafe.c	/^} insert_args;$/;"	t	typeref:struct:insert_args	file:
insert_bm	other_filters/cqf/src/test_threadsafe.c	/^void *insert_bm(void *arg)$/;"	f
insert_bm	src/test_threadsafe.c	/^void *insert_bm(void *arg)$/;"	f
insert_key	src/test_bulk.c	/^int insert_key(QF *qf, ilist **htab, uint64_t key, int count) {$/;"	f
insert_key	src/test_ext_churn.cc	/^int insert_key(QF *qf, BACKING_MAP_T& map, uint64_t key, int count) {$/;"	f
insert_key	src/test_ext_inc_throughput.cc	/^int insert_key(QF *qf, BACKING_MAP_T& map, uint64_t key, int count) {$/;"	f
insert_key	src/test_ext_throughput.cc	/^int insert_key(QF *qf, BACKING_MAP_T& map, uint64_t key, int count) {$/;"	f
insert_key	src/test_fill_varied_throughput.c	/^int insert_key(QF *qf, ilist **htab, uint64_t key, int count) {$/;"	f
insert_key	src/test_hash_accesses.c	/^int insert_key(QF *qf, ilist **htab, uint64_t key, int count) {$/;"	f
insert_key	src/test_lltable_throughput.c	/^int insert_key(QF *qf, ll_table *table, uint64_t key, int count) {$/;"	f
insert_key	src/test_merge.c	/^int insert_key(QF *qf, ilist **htab, uint64_t key, int count) {$/;"	f
insert_key	src/test_micro_throughput.c	/^int insert_key(QF *qf, set_node *set, uint64_t set_len, uint64_t key, int count) {$/;"	f
insert_key	src/test_micro_write.c	/^int insert_key(QF *qf, set_node *set, uint64_t set_len, uint64_t key, int count) {$/;"	f
insert_key	src/test_near_full.c	/^int insert_key(QF *qf, ilist **htab, uint64_t key, int count) {$/;"	f
insert_key	src/test_progress.c	/^int insert_key(QF *qf, ilist **htab, uint64_t key, int count) {$/;"	f
insert_key	src/test_splinter_adversarial.c	/^int insert_key(QF *qf, splinterdb *db, uint64_t key, int count, void *buffer) {$/;"	f
insert_key	src/test_splinter_replace_lltable_throughput.c	/^int insert_key(QF *qf, splinterdb *db, uint64_t key, int count) {$/;"	f
insert_key	src/test_splinter_throughput.c	/^int insert_key(QF *qf, splinterdb *db, uint64_t key, int count, void *buffer) {$/;"	f
insert_key	src/test_splinter_zipfian_histogram.c	/^int insert_key(QF *qf, splinterdb *db, uint64_t key, int count, void *buffer) {$/;"	f
insert_key	src/test_throughput_old.c	/^int insert_key(QF *qf, ilist **htab, uint64_t key, int count) {$/;"	f
insert_key	src/test_unit_old.c	/^int insert_key(QF *qf, ilist **htab, uint64_t key, int count) {$/;"	f
insert_key	src/test_whitelist.c	/^int insert_key(QF *qf, ilist **htab, uint64_t key, int count, uint8_t flags) {$/;"	f
insert_key	src/test_zipf_throughput.cc	/^int insert_key(QF *qf, BACKING_MAP_T& map, uint64_t key, int count) {$/;"	f
insert_keys	external/splinterdb/tests/unit/splinterdb_quick_test.c	/^insert_keys(splinterdb *kvsb, const int minkey, int numkeys, const int incr)$/;"	f	file:
insert_latency_histo	external/splinterdb/src/trunk.h	/^   platform_histo_handle insert_latency_histo;$/;"	m	struct:trunk_stats
insert_one_slot	src/gqf.c	/^static inline int insert_one_slot(QF *qf, uint64_t target_index, uint64_t insert_index, uint64_t value) {$/;"	f	file:
insert_one_slot	src/gqf_backup.c	/^static inline int insert_one_slot(QF *qf, uint64_t target_index, uint64_t insert_index, uint64_t value) {$/;"	f	file:
insert_op	other_filters/cqf/src/bm.c	/^typedef int (*insert_op)(__uint128_t val, uint64_t count);$/;"	t	file:
insert_op	src/bm.c	/^typedef int (*insert_op)(__uint128_t val, uint64_t count);$/;"	t	file:
insert_random_messages	external/splinterdb/tests/functional/test_functionality.c	/^insert_random_messages(trunk_handle              *spl,$/;"	f	file:
insert_rate	external/splinterdb/tests/functional/splinter_test.c	/^   uint64             insert_rate;$/;"	m	struct:test_splinter_thread_params	file:
insert_replace_slots_and_shift_remainders_and_runends_and_offsets	other_filters/cqf/src/gqf.c	/^static inline bool insert_replace_slots_and_shift_remainders_and_runends_and_offsets(QF		*qf, $/;"	f	file:
insert_replace_slots_and_shift_remainders_and_runends_and_offsets	src/gqf_backup.c	/^static inline int insert_replace_slots_and_shift_remainders_and_runends_and_offsets(QF *qf, int operation, uint64_t bucket_index, uint64_t overwrite_index, const uint64_t *remainders, uint64_t total_remainders, uint64_t noverwrites)$/;"	f	file:
insert_run	other_filters/taf/src/rsqf.c	/^void insert_run(RSQF* filter, size_t a, size_t b) {$/;"	f
insert_some_keys	external/splinterdb/tests/unit/splinterdb_quick_test.c	/^insert_some_keys(const int num_inserts, splinterdb *kvsb)$/;"	f	file:
insert_stats	external/splinterdb/tests/functional/splinter_test.c	/^   stats_insert       insert_stats;$/;"	m	struct:test_splinter_thread_params	file:
insert_tests	external/splinterdb/tests/unit/btree_stress_test.c	/^insert_tests(cache           *cc,$/;"	f	file:
insert_thread	external/splinterdb/tests/unit/btree_stress_test.c	/^insert_thread(void *arg)$/;"	f	file:
insert_thread_params	external/splinterdb/tests/unit/btree_stress_test.c	/^typedef struct insert_thread_params {$/;"	s	file:
insert_thread_params	external/splinterdb/tests/unit/btree_stress_test.c	/^} insert_thread_params;$/;"	t	typeref:struct:insert_thread_params	file:
insert_throughput	include/test_driver.h	/^	double insert_throughput;$/;"	m	struct:_test_results_t
insert_trace_fp	src/test_micro_write.c	/^FILE *insert_trace_fp;$/;"	v
insert_using_ll_table	src/gqf.c	/^static inline int insert_using_ll_table(QF *qf, qf_insert_result *result, uint64_t count, uint8_t runtime_lock) \/\/ copy of the insert function for modification$/;"	f	file:
insertion_goes_left	external/splinterdb/src/btree_private.h	/^      insertion_goes_left; \/\/ does the key to be inserted go to the left child$/;"	m	struct:leaf_splitting_plan
insertions	external/splinterdb/src/trunk.h	/^   uint64 insertions;$/;"	m	struct:trunk_stats
inserts	external/splinterdb/tests/functional/ycsb_test.c	/^   latency_table inserts;$/;"	m	struct:latency_tables	file:
inserts	other_filters/cqf/src/test_parallel.c	/^	uint64_t *inserts;$/;"	m	struct:__anon1	file:
inserts	src/test_driver.c	/^	uint64_t *inserts;$/;"	m	struct:__anon8	file:
int16	external/splinterdb/include/splinterdb/platform_linux/public_platform.h	/^typedef int16_t       int16;$/;"	t
int32	external/splinterdb/include/splinterdb/platform_linux/public_platform.h	/^typedef int32_t       int32;$/;"	t
int64	external/splinterdb/include/splinterdb/platform_linux/public_platform.h	/^typedef int64_t       int64;$/;"	t
int64abs	external/splinterdb/src/util.h	/^int64abs(int64 j)$/;"	f
int8	external/splinterdb/include/splinterdb/platform_linux/public_platform.h	/^typedef int8_t        int8;$/;"	t
internal_platform_status	external/splinterdb/src/platform_linux/platform_types.h	/^typedef typeof(EINVAL) internal_platform_status;$/;"	t
interval_intersects_range	external/splinterdb/src/mini_allocator.c	/^interval_intersects_range(boundary_state left_state, boundary_state right_state)$/;"	f	file:
io	external/splinterdb/src/clockcache.h	/^   io_handle         *io;$/;"	m	struct:clockcache
io	external/splinterdb/src/rc_allocator.h	/^   io_handle              *io;$/;"	m	struct:rc_allocator
io_amp	external/splinterdb/scripts/run_ycsb.py	/^                        io_amp = write_amp + read_amp$/;"	v
io_async_queue_depth	external/splinterdb/include/splinterdb/splinterdb.h	/^   uint64 io_async_queue_depth;$/;"	m	struct:splinterdb_config
io_async_queue_depth	external/splinterdb/tests/config.h	/^   uint64 io_async_queue_depth;$/;"	m	struct:master_config
io_async_req	external/splinterdb/src/io.h	/^typedef struct io_async_req io_async_req;$/;"	t	typeref:struct:io_async_req
io_async_req	external/splinterdb/src/platform_linux/laio.h	/^struct io_async_req {$/;"	s
io_callback_fn	external/splinterdb/src/io.h	/^typedef void (*io_callback_fn)(void           *metadata,$/;"	t
io_cfg	external/splinterdb/src/allocator.h	/^   io_config *io_cfg;$/;"	m	struct:allocator_config
io_cfg	external/splinterdb/src/clockcache.h	/^   io_config   *io_cfg;$/;"	m	struct:clockcache_config
io_cfg	external/splinterdb/src/splinterdb.c	/^   io_config          io_cfg;$/;"	m	struct:splinterdb	file:
io_cfgp	external/splinterdb/tests/functional/io_apis_test.c	/^   io_config          *io_cfgp;$/;"	m	struct:io_test_fn_args	file:
io_cleanup	external/splinterdb/src/io.h	/^io_cleanup(io_handle *io, uint64 count)$/;"	f
io_cleanup_fn	external/splinterdb/src/io.h	/^typedef void (*io_cleanup_fn)(io_handle *io, uint64 count);$/;"	t
io_config	external/splinterdb/src/io.h	/^typedef struct io_config {$/;"	s
io_config	external/splinterdb/src/io.h	/^} io_config;$/;"	t	typeref:struct:io_config
io_config_init	external/splinterdb/src/io.h	/^io_config_init(io_config  *io_cfg,$/;"	f
io_count	external/splinterdb/src/platform_linux/laio.h	/^   uint64       io_count; \/\/ inflight ios$/;"	m	struct:io_process_context
io_deregister_thread	external/splinterdb/src/io.h	/^io_deregister_thread(io_handle *io)$/;"	f
io_deregister_thread_fn	external/splinterdb/src/io.h	/^typedef void (*io_deregister_thread_fn)(io_handle *io);$/;"	t
io_filename	external/splinterdb/scripts/run_ycsb.py	/^                    io_filename = results_dir + "\/io"$/;"	v
io_filename	external/splinterdb/tests/config.h	/^   char   io_filename[MAX_STRING_LENGTH];$/;"	m	struct:master_config
io_flags	external/splinterdb/include/splinterdb/splinterdb.h	/^   int    io_flags;$/;"	m	struct:splinterdb_config
io_flags	external/splinterdb/tests/config.h	/^   int    io_flags;$/;"	m	struct:master_config
io_get_async_req	external/splinterdb/src/io.h	/^io_get_async_req(io_handle *io, bool32 blocking)$/;"	f
io_get_async_req_fn	external/splinterdb/src/io.h	/^typedef io_async_req *(*io_get_async_req_fn)(io_handle *io, bool32 blocking);$/;"	t
io_get_context_fn	external/splinterdb/src/io.h	/^typedef void *(*io_get_context_fn)(io_handle *io);$/;"	t
io_get_iovec	external/splinterdb/src/io.h	/^io_get_iovec(io_handle *io, io_async_req *req)$/;"	f
io_get_iovec_fn	external/splinterdb/src/io.h	/^typedef struct iovec *(*io_get_iovec_fn)(io_handle *io, io_async_req *req);$/;"	t	typeref:struct:io_get_iovec_fn
io_get_metadata	external/splinterdb/src/io.h	/^io_get_metadata(io_handle *io, io_async_req *req)$/;"	f
io_get_metadata_fn	external/splinterdb/src/io.h	/^typedef void *(*io_get_metadata_fn)(io_handle *io, io_async_req *req);$/;"	t
io_handle	external/splinterdb/src/io.h	/^struct io_handle {$/;"	s
io_handle	external/splinterdb/src/io.h	/^typedef struct io_handle    io_handle;$/;"	t	typeref:struct:io_handle
io_handle	external/splinterdb/src/splinterdb.c	/^   platform_io_handle io_handle;$/;"	m	struct:splinterdb	file:
io_handle_deinit	external/splinterdb/src/platform_linux/laio.c	/^io_handle_deinit(laio_handle *io)$/;"	f
io_handle_init	external/splinterdb/src/platform_linux/laio.c	/^io_handle_init(laio_handle *io, io_config *cfg, platform_heap_id hid)$/;"	f
io_hdlp	external/splinterdb/tests/functional/io_apis_test.c	/^   platform_io_handle *io_hdlp;$/;"	m	struct:io_test_fn_args	file:
io_max_latency_elapsed	external/splinterdb/src/io.h	/^io_max_latency_elapsed(io_handle *io, timestamp ts)$/;"	f
io_max_latency_elapsed_fn	external/splinterdb/src/io.h	/^typedef bool32 (*io_max_latency_elapsed_fn)(io_handle *io, timestamp ts);$/;"	t
io_mib	external/splinterdb/scripts/run_ycsb.py	/^                        io_mib = (net_diskstats[1] + net_diskstats[3]) \/ 1024 \/ 1024$/;"	v
io_ops	external/splinterdb/src/io.h	/^typedef struct io_ops {$/;"	s
io_ops	external/splinterdb/src/io.h	/^} io_ops;$/;"	t	typeref:struct:io_ops
io_perms	external/splinterdb/include/splinterdb/splinterdb.h	/^   uint32 io_perms;$/;"	m	struct:splinterdb_config
io_perms	external/splinterdb/tests/config.h	/^   uint32 io_perms;$/;"	m	struct:master_config
io_process_context	external/splinterdb/src/platform_linux/laio.h	/^typedef struct io_process_context {$/;"	s
io_process_context	external/splinterdb/src/platform_linux/laio.h	/^} io_process_context;$/;"	t	typeref:struct:io_process_context
io_read	external/splinterdb/src/io.h	/^io_read(io_handle *io, void *buf, uint64 bytes, uint64 addr)$/;"	f
io_read_async	external/splinterdb/src/io.h	/^io_read_async(io_handle     *io,$/;"	f
io_read_async_fn	external/splinterdb/src/io.h	/^typedef platform_status (*io_read_async_fn)(io_handle     *io,$/;"	t
io_read_fn	external/splinterdb/src/io.h	/^typedef platform_status (*io_read_fn)(io_handle *io,$/;"	t
io_register_thread	external/splinterdb/src/io.h	/^io_register_thread(io_handle *io)$/;"	f
io_register_thread_fn	external/splinterdb/src/io.h	/^typedef void (*io_register_thread_fn)(io_handle *io);$/;"	t
io_stats	external/splinterdb/src/cache.h	/^   io_stats_fn          io_stats;$/;"	m	struct:cache_ops
io_stats_fn	external/splinterdb/src/cache.h	/^typedef void (*io_stats_fn)(cache *cc, uint64 *read_bytes, uint64 *write_bytes);$/;"	t
io_test_fn_args	external/splinterdb/tests/functional/io_apis_test.c	/^typedef struct io_test_fn_args {$/;"	s	file:
io_test_fn_args	external/splinterdb/tests/functional/io_apis_test.c	/^} io_test_fn_args;$/;"	t	typeref:struct:io_test_fn_args	file:
io_wait_all	external/splinterdb/src/io.h	/^io_wait_all(io_handle *io)$/;"	f
io_wait_all_fn	external/splinterdb/src/io.h	/^typedef void (*io_wait_all_fn)(io_handle *io);$/;"	t
io_write	external/splinterdb/src/io.h	/^io_write(io_handle *io, void *buf, uint64 bytes, uint64 addr)$/;"	f
io_write_async	external/splinterdb/src/io.h	/^io_write_async(io_handle     *io,$/;"	f
io_write_async_fn	external/splinterdb/src/io.h	/^typedef platform_status (*io_write_async_fn)(io_handle     *io,$/;"	t
io_write_fn	external/splinterdb/src/io.h	/^typedef platform_status (*io_write_fn)(io_handle *io,$/;"	t
iocb	external/splinterdb/src/platform_linux/laio.h	/^   struct iocb    iocb;         \/\/ laio callback$/;"	m	struct:io_async_req	typeref:struct:io_async_req::iocb
iocb_p	external/splinterdb/src/platform_linux/laio.h	/^   struct iocb   *iocb_p;       \/\/ laio callback pointer$/;"	m	struct:io_async_req	typeref:struct:io_async_req::iocb
ioh	external/splinterdb/src/task.h	/^   platform_io_handle *ioh;$/;"	m	struct:task_system
iovec	external/splinterdb/src/platform_linux/laio.h	/^   struct iovec   iovec[];      \/\/ vector with IO offsets and size$/;"	m	struct:io_async_req	typeref:struct:io_async_req::iovec
ip4_ipaddr_keycmp	external/splinterdb/examples/splinterdb_custom_ipv4_addr_sortcmp_example.c	/^ip4_ipaddr_keycmp(const char  *key1,$/;"	f
ip4_split	external/splinterdb/examples/splinterdb_custom_ipv4_addr_sortcmp_example.c	/^ip4_split(int *key_fields, const char *key, const size_t key_len)$/;"	f
ip_file	other_filters/cqf/src/bm.c	/^	char *ip_file;$/;"	m	struct:app_params	file:
ip_file	src/bm.c	/^	char *ip_file;$/;"	m	struct:app_params	file:
is_counter	src/gqf.c	/^static inline int is_counter(const QF *qf, uint64_t index)$/;"	f	file:
is_counter	src/gqf_backup.c	/^static inline int is_counter(const QF *qf, uint64_t index)$/;"	f	file:
is_empty	external/splinterdb/src/memtable.h	/^   bool32 is_empty;$/;"	m	struct:memtable_context
is_empty	other_filters/cqf/src/gqf.c	/^static inline int is_empty(const QF *qf, uint64_t slot_index)$/;"	f	file:
is_empty	src/gqf.c	/^static inline int is_empty(const QF *qf, uint64_t slot_index)$/;"	f	file:
is_empty	src/gqf_backup.c	/^static inline int is_empty(const QF *qf, uint64_t slot_index)$/;"	f	file:
is_extension	src/gqf.c	/^static inline int is_extension(const QF *qf, uint64_t index)$/;"	f	file:
is_extension	src/gqf_backup.c	/^static inline int is_extension(const QF *qf, uint64_t index)$/;"	f	file:
is_extension_or_counter	src/gqf.c	/^static inline int is_extension_or_counter(const QF *qf, uint64_t index)$/;"	f	file:
is_extension_or_counter	src/gqf_backup.c	/^static inline int is_extension_or_counter(const QF *qf, uint64_t index)$/;"	f	file:
is_occupied	other_filters/cqf/src/gqf.c	/^static inline int is_occupied(const QF *qf, uint64_t index)$/;"	f	file:
is_occupied	src/gqf.c	/^static inline int is_occupied(const QF *qf, uint64_t index)$/;"	f	file:
is_occupied	src/gqf_backup.c	/^static inline int is_occupied(const QF *qf, uint64_t index)$/;"	f	file:
is_pow_of_2	other_filters/taf/src/rsqf.c	/^int is_pow_of_2(size_t x) {$/;"	f
is_runend	other_filters/cqf/src/gqf.c	/^static inline int is_runend(const QF *qf, uint64_t index)$/;"	f	file:
is_runend	src/gqf.c	/^static inline int is_runend(const QF *qf, uint64_t index)$/;"	f	file:
is_runend	src/gqf_backup.c	/^static inline int is_runend(const QF *qf, uint64_t index)$/;"	f	file:
is_runend_or_counter	src/gqf.c	/^static inline int is_runend_or_counter(const QF *qf, uint64_t index)$/;"	f	file:
is_runend_or_counter	src/gqf_backup.c	/^static inline int is_runend_or_counter(const QF *qf, uint64_t index)$/;"	f	file:
is_thread	external/splinterdb/tests/unit/large_inserts_stress_test.c	/^   bool           is_thread;     \/\/ Is main() or thread executing worker fn$/;"	m	struct:__anon62	file:
issue_ts	external/splinterdb/src/cache.h	/^      timestamp issue_ts; \/\/ issue time$/;"	m	struct:cache_async_ctxt::__anon23
iterator	external/splinterdb/src/iterator.h	/^struct iterator {$/;"	s
iterator	external/splinterdb/src/iterator.h	/^typedef struct iterator iterator;$/;"	t	typeref:struct:iterator
iterator	other_filters/cqf/src/bm.c	/^	iterator_op iterator;$/;"	m	struct:filter	file:
iterator	src/bm.c	/^	iterator_op iterator;$/;"	m	struct:filter	file:
iterator_bound_fn	external/splinterdb/src/iterator.h	/^typedef bool32 (*iterator_bound_fn)(iterator *itor);$/;"	t
iterator_can_curr	external/splinterdb/src/iterator.h	/^iterator_can_curr(iterator *itor)$/;"	f
iterator_can_next	external/splinterdb/src/iterator.h	/^iterator_can_next(iterator *itor)$/;"	f
iterator_can_prev	external/splinterdb/src/iterator.h	/^iterator_can_prev(iterator *itor)$/;"	f
iterator_curr	external/splinterdb/src/iterator.h	/^iterator_curr(iterator *itor, key *curr_key, message *msg)$/;"	f
iterator_curr_fn	external/splinterdb/src/iterator.h	/^typedef void (*iterator_curr_fn)(iterator *itor, key *curr_key, message *msg);$/;"	t
iterator_end_op	other_filters/cqf/src/bm.c	/^typedef int (*iterator_end_op)();$/;"	t	file:
iterator_end_op	src/bm.c	/^typedef int (*iterator_end_op)();$/;"	t	file:
iterator_get_op	other_filters/cqf/src/bm.c	/^typedef int (*iterator_get_op)(uint64_t *key, uint64_t *value, uint64_t *count);$/;"	t	file:
iterator_get_op	src/bm.c	/^typedef int (*iterator_get_op)(uint64_t *key, uint64_t *value, uint64_t *count);$/;"	t	file:
iterator_next	external/splinterdb/src/iterator.h	/^iterator_next(iterator *itor)$/;"	f
iterator_next_op	other_filters/cqf/src/bm.c	/^typedef int (*iterator_next_op)();$/;"	t	file:
iterator_next_op	src/bm.c	/^typedef int (*iterator_next_op)();$/;"	t	file:
iterator_op	other_filters/cqf/src/bm.c	/^typedef int (*iterator_op)(uint64_t pos);$/;"	t	file:
iterator_op	src/bm.c	/^typedef int (*iterator_op)(uint64_t pos);$/;"	t	file:
iterator_ops	external/splinterdb/src/iterator.h	/^typedef struct iterator_ops {$/;"	s
iterator_ops	external/splinterdb/src/iterator.h	/^} iterator_ops;$/;"	t	typeref:struct:iterator_ops
iterator_prev	external/splinterdb/src/iterator.h	/^iterator_prev(iterator *itor)$/;"	f
iterator_print	external/splinterdb/src/iterator.h	/^iterator_print(iterator *itor)$/;"	f
iterator_print_fn	external/splinterdb/src/iterator.h	/^typedef void (*iterator_print_fn)(iterator *itor);$/;"	t
iterator_seek	external/splinterdb/src/iterator.h	/^iterator_seek(iterator *itor, key seek_key, comparison seek_type)$/;"	f
iterator_seek_fn	external/splinterdb/src/iterator.h	/^typedef platform_status (*iterator_seek_fn)(iterator  *itor,$/;"	t
iterator_seek_tests	external/splinterdb/tests/unit/btree_stress_test.c	/^iterator_seek_tests(cache           *cc,$/;"	f	file:
iterator_step_fn	external/splinterdb/src/iterator.h	/^typedef platform_status (*iterator_step_fn)(iterator *itor);$/;"	t
iterator_test	external/splinterdb/tests/unit/btree_stress_test.c	/^iterator_test(platform_heap_id hid,$/;"	f	file:
iterator_tests	external/splinterdb/tests/unit/btree_stress_test.c	/^iterator_tests(cache           *cc,$/;"	f	file:
ith_latency	external/splinterdb/tests/functional/ycsb_test.c	/^ith_latency(latency_table table, uint64_t rank)$/;"	f
itor	external/splinterdb/src/btree.h	/^   iterator     *itor; \/\/ the itor which is being packed$/;"	m	struct:btree_pack_req
itor	external/splinterdb/src/merge.h	/^   iterator *itor;$/;"	m	struct:ordered_iterator
itor	external/splinterdb/src/trunk.c	/^   btree_iterator itor[TRUNK_MAX_PIVOTS];$/;"	m	struct:trunk_btree_skiperator	file:
itor	external/splinterdb/src/trunk.h	/^   iterator *itor[TRUNK_RANGE_ITOR_MAX_BRANCHES];$/;"	m	struct:trunk_range_iterator
itor_arr	external/splinterdb/src/trunk.c	/^   iterator              *itor_arr[TRUNK_RANGE_ITOR_MAX_BRANCHES];$/;"	m	struct:__anon41	file:
kBitsPerBucket	other_filters/acf/src/packedtable.h	/^  static const size_t kBitsPerBucket = (3 + kDirBitsPerTag) * 4;$/;"	m	class:cuckoofilter::PackedTable
kBitsPerBucket	other_filters/acfsim/src/packedtable.h	/^  static const size_t kBitsPerBucket = (3 + kDirBitsPerTag) * 4;$/;"	m	class:cuckoofilter::PackedTable
kBitsPerBucket	other_filters/cf/src/packedtable.h	/^  static const size_t kBitsPerBucket = (3 + kDirBitsPerTag) * 4;$/;"	m	class:cuckoofilter::PackedTable
kBytesPerBucket	other_filters/acf/src/mirroredtable.h	/^		static const size_t kBytesPerBucket =$/;"	m	class:cuckoofilter::MirroredTable
kBytesPerBucket	other_filters/acf/src/packedtable.h	/^  static const size_t kBytesPerBucket = (kBitsPerBucket + 7) >> 3;$/;"	m	class:cuckoofilter::PackedTable
kBytesPerBucket	other_filters/acf/src/singletable.h	/^  static const size_t kBytesPerBucket =$/;"	m	class:cuckoofilter::SingleTable
kBytesPerBucket	other_filters/acfsim/src/mirroredtable.h	/^		static const size_t kBytesPerBucket =$/;"	m	class:cuckoofilter::MirroredTable
kBytesPerBucket	other_filters/acfsim/src/packedtable.h	/^  static const size_t kBytesPerBucket = (kBitsPerBucket + 7) >> 3;$/;"	m	class:cuckoofilter::PackedTable
kBytesPerBucket	other_filters/acfsim/src/singletable.h	/^  static const size_t kBytesPerBucket =$/;"	m	class:cuckoofilter::SingleTable
kBytesPerBucket	other_filters/cf/src/packedtable.h	/^  static const size_t kBytesPerBucket = (kBitsPerBucket + 7) >> 3;$/;"	m	class:cuckoofilter::PackedTable
kBytesPerBucket	other_filters/cf/src/singletable.h	/^  static const size_t kBytesPerBucket =$/;"	m	class:cuckoofilter::SingleTable
kDirBitsMask	other_filters/acf/src/packedtable.h	/^  static const uint32_t kDirBitsMask = ((1ULL << kDirBitsPerTag) - 1) << 4;$/;"	m	class:cuckoofilter::PackedTable
kDirBitsMask	other_filters/acfsim/src/packedtable.h	/^  static const uint32_t kDirBitsMask = ((1ULL << kDirBitsPerTag) - 1) << 4;$/;"	m	class:cuckoofilter::PackedTable
kDirBitsMask	other_filters/cf/src/packedtable.h	/^  static const uint32_t kDirBitsMask = ((1ULL << kDirBitsPerTag) - 1) << 4;$/;"	m	class:cuckoofilter::PackedTable
kDirBitsPerTag	other_filters/acf/src/packedtable.h	/^  static const size_t kDirBitsPerTag = bits_per_tag - 4;$/;"	m	class:cuckoofilter::PackedTable
kDirBitsPerTag	other_filters/acfsim/src/packedtable.h	/^  static const size_t kDirBitsPerTag = bits_per_tag - 4;$/;"	m	class:cuckoofilter::PackedTable
kDirBitsPerTag	other_filters/cf/src/packedtable.h	/^  static const size_t kDirBitsPerTag = bits_per_tag - 4;$/;"	m	class:cuckoofilter::PackedTable
kMaxCuckooCount	other_filters/acf/src/cuckoofilter.h	/^	const size_t kMaxCuckooCount = 500;$/;"	m	namespace:cuckoofilter
kMaxCuckooCount	other_filters/acfsim/src/cuckoofilter.h	/^	const size_t kMaxCuckooCount = 500;$/;"	m	namespace:cuckoofilter
kMaxCuckooCount	other_filters/cf/src/cuckoofilter.h	/^const size_t kMaxCuckooCount = 500;$/;"	m	namespace:cuckoofilter
kPaddingBuckets	other_filters/acf/src/mirroredtable.h	/^		static const size_t kPaddingBuckets =$/;"	m	class:cuckoofilter::MirroredTable
kPaddingBuckets	other_filters/acf/src/singletable.h	/^  static const size_t kPaddingBuckets =$/;"	m	class:cuckoofilter::SingleTable
kPaddingBuckets	other_filters/acfsim/src/mirroredtable.h	/^		static const size_t kPaddingBuckets =$/;"	m	class:cuckoofilter::MirroredTable
kPaddingBuckets	other_filters/acfsim/src/singletable.h	/^  static const size_t kPaddingBuckets =$/;"	m	class:cuckoofilter::SingleTable
kPaddingBuckets	other_filters/cf/src/singletable.h	/^  static const size_t kPaddingBuckets =$/;"	m	class:cuckoofilter::SingleTable
kSelectInByte	other_filters/cqf/src/gqf.c	/^const uint8_t kSelectInByte[2048] = {$/;"	v
kSelectInByte	src/gqf.c	/^const uint8_t kSelectInByte[2048] = {$/;"	v
kSelectInByte	src/gqf_backup.c	/^const uint8_t kSelectInByte[2048] = {$/;"	v
kSelectInByteAQF	other_filters/taf/src/bit_util.c	/^const uint8_t kSelectInByteAQF[2048] = {$/;"	v
kSelectInByteAQF	src/taf.cc	/^const uint8_t kSelectInByteAQF[2048] = {$/;"	v
kTagMask	other_filters/acf/src/mirroredtable.h	/^		static const uint32_t kTagMask = (1ULL << bits_per_tag) - 1;$/;"	m	class:cuckoofilter::MirroredTable
kTagMask	other_filters/acf/src/singletable.h	/^  static const uint32_t kTagMask = (1ULL << bits_per_tag) - 1;$/;"	m	class:cuckoofilter::SingleTable
kTagMask	other_filters/acfsim/src/mirroredtable.h	/^		static const uint32_t kTagMask = (1ULL << bits_per_tag) - 1;$/;"	m	class:cuckoofilter::MirroredTable
kTagMask	other_filters/acfsim/src/singletable.h	/^  static const uint32_t kTagMask = (1ULL << bits_per_tag) - 1;$/;"	m	class:cuckoofilter::SingleTable
kTagMask	other_filters/cf/src/singletable.h	/^  static const uint32_t kTagMask = (1ULL << bits_per_tag) - 1;$/;"	m	class:cuckoofilter::SingleTable
kTagsPerBucket	other_filters/acf/src/mirroredtable.h	/^		static const size_t kTagsPerBucket = 4;$/;"	m	class:cuckoofilter::MirroredTable
kTagsPerBucket	other_filters/acf/src/singletable.h	/^  static const size_t kTagsPerBucket = 4;$/;"	m	class:cuckoofilter::SingleTable
kTagsPerBucket	other_filters/acfsim/src/mirroredtable.h	/^		static const size_t kTagsPerBucket = 4;$/;"	m	class:cuckoofilter::MirroredTable
kTagsPerBucket	other_filters/acfsim/src/singletable.h	/^  static const size_t kTagsPerBucket = 4;$/;"	m	class:cuckoofilter::SingleTable
kTagsPerBucket	other_filters/cf/src/singletable.h	/^  static const size_t kTagsPerBucket = 4;$/;"	m	class:cuckoofilter::SingleTable
k_green	test/test_range_filter.c	/^static const char *k_green = "\\033[0;32m";$/;"	v	file:
k_red	test/test_range_filter.c	/^static const char *k_red = "\\033[31m";$/;"	v	file:
k_white	test/test_range_filter.c	/^static const char *k_white = "\\033[0;0m";$/;"	v	file:
kernel_queue_size	external/splinterdb/src/io.h	/^   uint64 kernel_queue_size;$/;"	m	struct:io_config
key	external/splinterdb/src/data_internal.h	/^typedef struct key {$/;"	s
key	external/splinterdb/src/data_internal.h	/^} key;$/;"	t	typeref:struct:key
key	external/splinterdb/tests/functional/test_async.h	/^   key_buffer        key;$/;"	m	struct:__anon57
key	external/splinterdb/tests/functional/test_splinter_shadow.h	/^   uint64       key;$/;"	m	struct:test_splinter_shadow_node
key	external/splinterdb/tests/functional/ycsb_test.c	/^   char   key[YCSB_KEY_SIZE];$/;"	m	struct:ycsb_op	file:
key	include/ll_table.h	/^	uint64_t key;$/;"	m	struct:ll_node
key	other_filters/acf/src/cuckoofilter.h	/^        uint64_t key;$/;"	m	struct:_set_node
key	other_filters/acfsim/src/cuckoofilter.h	/^        uint64_t key;$/;"	m	struct:_set_node
key	other_filters/cf/example/test_micro_throughput.cc	/^        uint64_t key;$/;"	m	struct:_set_node	file:
key	other_filters/cqf/src/test_micro_super.c	/^        uint64_t key;$/;"	m	struct:_set_node	file:
key	other_filters/cqf/src/test_micro_throughput.c	/^        uint64_t key;$/;"	m	struct:_set_node	file:
key	other_filters/cqf/src/test_parallel.c	/^        uint64_t key;$/;"	m	struct:_set_node	file:
key	src/test_ext_inc_throughput.cc	/^        uint64_t key;$/;"	m	struct:_set_node	file:
key	src/test_ext_throughput.cc	/^        uint64_t key;$/;"	m	struct:_set_node	file:
key	src/test_lltable_throughput.c	/^        uint64_t key;$/;"	m	struct:_set_node	file:
key	src/test_micro_throughput.c	/^        uint64_t key;$/;"	m	struct:_set_node	file:
key	src/test_micro_write.c	/^        uint64_t key;$/;"	m	struct:_set_node	file:
key	src/test_unit.c	/^	uint64_t key;$/;"	m	struct:_ht_node	file:
key	src/test_unit_old.c	/^	uint64_t key;$/;"	m	struct:_ht_node	file:
keyCmp	external/splinterdb/tests/functional/avlTree.h	/^   AvlTreeKeyComparator  keyCmp;$/;"	m	struct:AvlTree
key_and_message	external/splinterdb/src/data_internal.h	/^   char                  key_and_message[];$/;"	m	struct:ondisk_tuple
key_bits	include/gqf_int.h	/^		uint64_t key_bits;$/;"	m	struct:quotient_filter_metadata
key_bits	other_filters/cqf/include/gqf_int.h	/^		uint64_t key_bits;$/;"	m	struct:quotient_filter_metadata
key_bits	test/test_range_filter.c	/^const uint64_t key_bits = 13;$/;"	v
key_buffer	external/splinterdb/src/data_internal.h	/^} key_buffer;$/;"	t	typeref:struct:__anon38
key_buffer_copy_key	external/splinterdb/src/data_internal.h	/^key_buffer_copy_key(key_buffer *kb, key src)$/;"	f
key_buffer_copy_slice	external/splinterdb/src/data_internal.h	/^key_buffer_copy_slice(key_buffer *kb, slice src)$/;"	f
key_buffer_data	external/splinterdb/src/data_internal.h	/^key_buffer_data(key_buffer *kb)$/;"	f
key_buffer_deinit	external/splinterdb/src/data_internal.h	/^key_buffer_deinit(key_buffer *kb)$/;"	f
key_buffer_init	external/splinterdb/src/data_internal.h	/^key_buffer_init(key_buffer *kb, platform_heap_id hid)$/;"	f
key_buffer_init_from_key	external/splinterdb/src/data_internal.h	/^key_buffer_init_from_key(key_buffer *kb, platform_heap_id hid, key src)$/;"	f
key_buffer_key	external/splinterdb/src/data_internal.h	/^key_buffer_key(key_buffer *kb)$/;"	f
key_buffer_length	external/splinterdb/src/data_internal.h	/^key_buffer_length(key_buffer *kb)$/;"	f
key_buffer_resize	external/splinterdb/src/data_internal.h	/^key_buffer_resize(key_buffer *kb, uint64 length)$/;"	f
key_bytes	external/splinterdb/src/btree.h	/^   uint32 key_bytes;$/;"	m	struct:btree_pivot_stats
key_bytes	external/splinterdb/src/btree.h	/^   uint64 key_bytes;     \/\/ total size of keys in tuples of the output tree$/;"	m	struct:btree_pack_req
key_compare	external/splinterdb/include/splinterdb/data.h	/^   key_compare_fn key_compare;$/;"	m	struct:data_config
key_compare	external/splinterdb/src/default_data_config.c	/^key_compare(const data_config *cfg, slice key1, slice key2)$/;"	f	file:
key_compare_fn	external/splinterdb/include/splinterdb/data.h	/^typedef int (*key_compare_fn)(const data_config *cfg, slice key1, slice key2);$/;"	t
key_copy_contents	external/splinterdb/src/data_internal.h	/^key_copy_contents(void *dst, key k)$/;"	f
key_create	external/splinterdb/src/data_internal.h	/^key_create(uint64 length, const void *data)$/;"	f
key_create_from_slice	external/splinterdb/src/data_internal.h	/^key_create_from_slice(slice user_slice)$/;"	f
key_data	external/splinterdb/src/data_internal.h	/^key_data(key k)$/;"	f
key_equals	external/splinterdb/src/data_internal.h	/^key_equals(key a, key b)$/;"	f
key_flags	external/splinterdb/src/data_internal.h	/^   ondisk_flags          key_flags;$/;"	m	struct:ondisk_tuple
key_fmt	external/splinterdb/tests/unit/splinterdb_quick_test.c	/^static const char key_fmt[] = "key-%04x";$/;"	v	file:
key_hash	external/splinterdb/include/splinterdb/data.h	/^   key_hash_fn    key_hash;$/;"	m	struct:data_config
key_hash_fn	external/splinterdb/include/splinterdb/data.h	/^typedef uint32 (*key_hash_fn)(const void *input, size_t length, uint32 seed);$/;"	t
key_is_negative_infinity	external/splinterdb/src/data_internal.h	/^key_is_negative_infinity(key k)$/;"	f
key_is_null	external/splinterdb/src/data_internal.h	/^key_is_null(key k)$/;"	f
key_is_positive_infinity	external/splinterdb/src/data_internal.h	/^key_is_positive_infinity(key k)$/;"	f
key_is_user_key	external/splinterdb/src/data_internal.h	/^key_is_user_key(key k)$/;"	f
key_length	external/splinterdb/src/data_internal.h	/^   ondisk_key_length     key_length;$/;"	m	struct:ondisk_tuple
key_length	external/splinterdb/src/data_internal.h	/^key_length(key k)$/;"	f
key_length	external/splinterdb/tests/unit/splinter_test.c	/^   uint64 key_length;$/;"	m	struct:shadow_entry	file:
key_offset	external/splinterdb/tests/unit/splinter_test.c	/^   uint64 key_offset;$/;"	m	struct:shadow_entry	file:
key_remainder_bits	include/gqf_int.h	/^		uint64_t key_remainder_bits;$/;"	m	struct:quotient_filter_metadata
key_remainder_bits	other_filters/cqf/include/gqf_int.h	/^		uint64_t key_remainder_bits;$/;"	m	struct:quotient_filter_metadata
key_slice	external/splinterdb/src/data_internal.h	/^key_slice(key k)$/;"	f
key_to_str_fn	external/splinterdb/include/splinterdb/data.h	/^typedef void (*key_to_str_fn)(const data_config *cfg,$/;"	t
key_to_string	external/splinterdb/include/splinterdb/data.h	/^   key_to_str_fn        key_to_string;$/;"	m	struct:data_config
key_to_string	external/splinterdb/src/default_data_config.c	/^key_to_string(const data_config *cfg, slice key, char *str, size_t max_len)$/;"	f	file:
key_type	external/splinterdb/src/data_internal.h	/^} key_type;$/;"	t	typeref:enum:__anon37
key_type	external/splinterdb/tests/functional/splinter_test.h	/^   test_key_type key_type;$/;"	m	struct:test_config
keybuf	external/splinterdb/tests/functional/btree_test.c	/^   key_buffer        keybuf;$/;"	m	struct:__anon55	file:
keyed	external/splinterdb/src/mini_allocator.h	/^   bool32          keyed;$/;"	m	struct:mini_allocator
keyed_first_entry	external/splinterdb/src/mini_allocator.c	/^keyed_first_entry(page_handle *meta_page)$/;"	f	file:
keyed_meta_entry	external/splinterdb/src/mini_allocator.c	/^typedef struct ONDISK keyed_meta_entry {$/;"	s	file:
keyed_meta_entry	external/splinterdb/src/mini_allocator.c	/^} keyed_meta_entry;$/;"	t	typeref:struct:keyed_meta_entry	file:
keyed_meta_entry_required_capacity	external/splinterdb/src/mini_allocator.c	/^keyed_meta_entry_required_capacity(key k)$/;"	f	file:
keyed_meta_entry_start_key	external/splinterdb/src/mini_allocator.c	/^keyed_meta_entry_start_key(keyed_meta_entry *entry)$/;"	f	file:
keyed_next_entry	external/splinterdb/src/mini_allocator.c	/^keyed_next_entry(keyed_meta_entry *entry)$/;"	f	file:
keys	external/splinterdb/tests/functional/test_splinter_shadow.h	/^   uint64       *keys;$/;"	m	struct:test_splinter_shadow_array
keys	other_filters/acf/src/mirroredtable.h	/^		uint64_t *keys[4];$/;"	m	class:cuckoofilter::MirroredTable
keys	other_filters/acfsim/src/mirroredtable.h	/^		uint64_t *keys[4];$/;"	m	class:cuckoofilter::MirroredTable
kind	external/splinterdb/src/data_internal.h	/^   key_type        kind;$/;"	m	struct:__anon38
kind	external/splinterdb/src/data_internal.h	/^   key_type kind;$/;"	m	struct:key
kv_bytes_reclaimed	external/splinterdb/src/trunk.c	/^   uint64  kv_bytes_reclaimed;$/;"	m	struct:trunk_compact_bundle_req	file:
kv_key	external/splinterdb/examples/splinterdb_custom_ipv4_addr_sortcmp_example.c	/^   char            *kv_key;$/;"	m	struct:kv_pair	file:
kv_key	external/splinterdb/examples/splinterdb_iterators_example.c	/^   char *kv_key;$/;"	m	struct:kv_pair	file:
kv_pair	external/splinterdb/examples/splinterdb_custom_ipv4_addr_sortcmp_example.c	/^typedef struct kv_pair {$/;"	s	file:
kv_pair	external/splinterdb/examples/splinterdb_custom_ipv4_addr_sortcmp_example.c	/^} kv_pair;$/;"	t	typeref:struct:kv_pair	file:
kv_pair	external/splinterdb/examples/splinterdb_iterators_example.c	/^typedef struct kv_pair {$/;"	s	file:
kv_pair	external/splinterdb/examples/splinterdb_iterators_example.c	/^} kv_pair;$/;"	t	typeref:struct:kv_pair	file:
kv_val	external/splinterdb/examples/splinterdb_custom_ipv4_addr_sortcmp_example.c	/^   www_ping_metrics kv_val;$/;"	m	struct:kv_pair	file:
kv_val	external/splinterdb/examples/splinterdb_iterators_example.c	/^   char *kv_val;$/;"	m	struct:kv_pair	file:
kvsb	external/splinterdb/tests/unit/large_inserts_stress_test.c	/^   splinterdb    *kvsb;$/;"	m	struct:__anon62	file:
kvsb	external/splinterdb/tests/unit/splinterdb_stress_test.c	/^   splinterdb *kvsb;$/;"	m	struct:__anon66	file:
laio_callback	external/splinterdb/src/platform_linux/laio.c	/^laio_callback(io_context_t ctx, struct iocb *iocb, long res, long res2)$/;"	f
laio_cleanup	external/splinterdb/src/platform_linux/laio.c	/^laio_cleanup(io_handle *ioh, uint64 count)$/;"	f	file:
laio_config_valid	external/splinterdb/src/platform_linux/laio.c	/^laio_config_valid(io_config *cfg)$/;"	f
laio_config_valid_extent_size	external/splinterdb/src/platform_linux/laio.c	/^laio_config_valid_extent_size(io_config *cfg)$/;"	f	file:
laio_config_valid_page_size	external/splinterdb/src/platform_linux/laio.c	/^laio_config_valid_page_size(io_config *cfg)$/;"	f	file:
laio_deregister_thread	external/splinterdb/src/platform_linux/laio.c	/^laio_deregister_thread(io_handle *ioh)$/;"	f	file:
laio_get_async_req	external/splinterdb/src/platform_linux/laio.c	/^laio_get_async_req(io_handle *ioh, bool32 blocking)$/;"	f	file:
laio_get_iovec	external/splinterdb/src/platform_linux/laio.c	/^laio_get_iovec(io_handle *ioh, io_async_req *req)$/;"	f
laio_get_kth_req	external/splinterdb/src/platform_linux/laio.c	/^laio_get_kth_req(laio_handle *io, uint64 k)$/;"	f	file:
laio_get_metadata	external/splinterdb/src/platform_linux/laio.c	/^laio_get_metadata(io_handle *ioh, io_async_req *req)$/;"	f	file:
laio_get_req_context	external/splinterdb/src/platform_linux/laio.c	/^laio_get_req_context(io_handle *ioh, io_async_req *req)$/;"	f	file:
laio_get_thread_context	external/splinterdb/src/platform_linux/laio.c	/^laio_get_thread_context(io_handle *ioh)$/;"	f	file:
laio_handle	external/splinterdb/src/platform_linux/laio.h	/^typedef struct laio_handle {$/;"	s
laio_handle	external/splinterdb/src/platform_linux/laio.h	/^} laio_handle;$/;"	t	typeref:struct:laio_handle
laio_ops	external/splinterdb/src/platform_linux/laio.c	/^static io_ops laio_ops = {$/;"	v	file:
laio_read	external/splinterdb/src/platform_linux/laio.c	/^laio_read(io_handle *ioh, void *buf, uint64 bytes, uint64 addr)$/;"	f	file:
laio_read_async	external/splinterdb/src/platform_linux/laio.c	/^laio_read_async(io_handle     *ioh,$/;"	f	file:
laio_register_thread	external/splinterdb/src/platform_linux/laio.c	/^laio_register_thread(io_handle *ioh)$/;"	f	file:
laio_wait_all	external/splinterdb/src/platform_linux/laio.c	/^laio_wait_all(io_handle *ioh)$/;"	f	file:
laio_write	external/splinterdb/src/platform_linux/laio.c	/^laio_write(io_handle *ioh, void *buf, uint64 bytes, uint64 addr)$/;"	f	file:
laio_write_async	external/splinterdb/src/platform_linux/laio.c	/^laio_write_async(io_handle     *ioh,$/;"	f	file:
last_key_seen	external/splinterdb/src/trunk.c	/^   key_buffer last_key_seen[TRUNK_MAX_HEIGHT];$/;"	m	struct:trunk_verify_scratch	file:
last_rc	external/splinterdb/src/splinterdb.c	/^   platform_status      last_rc;$/;"	m	struct:splinterdb_iterator	file:
last_thread_finish_time	external/splinterdb/tests/functional/ycsb_test.c	/^   uint64_t last_thread_finish_time;$/;"	m	struct:running_times	file:
last_token	external/splinterdb/src/platform_linux/platform.h	/^   char *last_token;$/;"	m	struct:__anon27
last_token_len	external/splinterdb/src/platform_linux/platform.h	/^   int   last_token_len;$/;"	m	struct:__anon27
latency	external/splinterdb/scripts/run_ycsb.py	/^                    latency = int(float(stats_lines[4].split()[1]))$/;"	v
latency_histo_buckets	external/splinterdb/src/trunk.c	/^static const int64 latency_histo_buckets[LATENCYHISTO_SIZE] = {$/;"	v	file:
latency_max	external/splinterdb/tests/functional/splinter_test.c	/^   uint64 latency_max;$/;"	m	struct:stats_insert	file:
latency_max	external/splinterdb/tests/test_common.h	/^   uint64 latency_max;$/;"	m	struct:stats_lookup
latency_percentile	external/splinterdb/tests/functional/ycsb_test.c	/^latency_percentile(latency_table table, float percent)$/;"	f
latency_table	external/splinterdb/tests/functional/ycsb_test.c	/^typedef uint64_t latency_table[LATENCY_EXPONENT_LIMIT][LATENCY_MANTISSA_LIMIT];$/;"	t	file:
latency_tables	external/splinterdb/tests/functional/ycsb_test.c	/^typedef struct latency_tables {$/;"	s	file:
latency_tables	external/splinterdb/tests/functional/ycsb_test.c	/^} latency_tables;$/;"	t	typeref:struct:latency_tables	file:
lctr_t	include/partitioned_counter.h	/^typedef struct local_counter lctr_t;$/;"	t	typeref:struct:local_counter
lctr_t	other_filters/cqf/include/partitioned_counter.h	/^typedef struct local_counter lctr_t;$/;"	t	typeref:struct:local_counter
leaf_entry	external/splinterdb/src/btree_private.h	/^typedef ondisk_tuple leaf_entry;$/;"	t
leaf_entry_key	external/splinterdb/src/btree_private.h	/^leaf_entry_key(leaf_entry *entry)$/;"	f
leaf_entry_key_size	external/splinterdb/src/btree.c	/^leaf_entry_key_size(const leaf_entry *entry)$/;"	f	file:
leaf_entry_message	external/splinterdb/src/btree_private.h	/^leaf_entry_message(leaf_entry *entry)$/;"	f
leaf_entry_message_size	external/splinterdb/src/btree.c	/^leaf_entry_message_size(const leaf_entry *entry)$/;"	f	file:
leaf_entry_message_type	external/splinterdb/src/btree_private.h	/^leaf_entry_message_type(leaf_entry *entry)$/;"	f
leaf_entry_required_capacity	external/splinterdb/src/btree.c	/^leaf_entry_required_capacity(key tuple_key, const message msg)$/;"	f	file:
leaf_hdr_search_tests	external/splinterdb/tests/unit/btree_test.c	/^leaf_hdr_search_tests(btree_config *cfg, platform_heap_id hid)$/;"	f	file:
leaf_hdr_tests	external/splinterdb/tests/unit/btree_test.c	/^leaf_hdr_tests(btree_config *cfg, btree_scratch *scratch, platform_heap_id hid)$/;"	f	file:
leaf_incorporate_spec	external/splinterdb/src/btree_private.h	/^typedef struct leaf_incorporate_spec {$/;"	s
leaf_incorporate_spec	external/splinterdb/src/btree_private.h	/^} leaf_incorporate_spec;$/;"	t	typeref:struct:leaf_incorporate_spec
leaf_split_max_time_ns	external/splinterdb/src/trunk.h	/^   uint64 leaf_split_max_time_ns;$/;"	m	struct:trunk_stats
leaf_split_tests	external/splinterdb/tests/unit/btree_test.c	/^leaf_split_tests(btree_config    *cfg,$/;"	f	file:
leaf_split_time_ns	external/splinterdb/src/trunk.h	/^   uint64 leaf_split_time_ns;$/;"	m	struct:trunk_stats
leaf_splits	external/splinterdb/src/trunk.h	/^   uint64 leaf_splits;$/;"	m	struct:trunk_stats
leaf_splits_leaves_created	external/splinterdb/src/trunk.h	/^   uint64 leaf_splits_leaves_created;$/;"	m	struct:trunk_stats
leaf_splitting_plan	external/splinterdb/src/btree_private.h	/^typedef struct leaf_splitting_plan {$/;"	s
leaf_splitting_plan	external/splinterdb/src/btree_private.h	/^} leaf_splitting_plan;$/;"	t	typeref:struct:leaf_splitting_plan
left	external/splinterdb/tests/functional/avlTree.h	/^   struct AvlTreeLinks *left;$/;"	m	struct:AvlTreeLinks	typeref:struct:AvlTreeLinks::AvlTreeLinks
len	other_filters/taf/src/ext.h	/^  int len;       \/\/ store which bits are valid; if len=0, then ext is empty$/;"	m	struct:ext_t
len	src/taf.cc	/^  int len;       \/\/ store which bits are valid; if len=0, then ext is empty$/;"	m	struct:ext_t	file:
len	src/test_bulk.c	/^	uint64_t len; \/\/ the number of bits used by the remainder and quotient$/;"	m	struct:_ilist	file:
len	src/test_deletions.c	/^	uint64_t len; \/\/ the number of bits used by the remainder and quotient$/;"	m	struct:_ilist	file:
len	src/test_ext_inc_throughput.cc	/^	int len;$/;"	m	struct:_set_node	file:
len	src/test_ext_throughput.cc	/^	int len;$/;"	m	struct:_set_node	file:
len	src/test_fill_varied_throughput.c	/^	uint64_t len; \/\/ the number of bits used by the remainder and quotient$/;"	m	struct:_ilist	file:
len	src/test_hash_accesses.c	/^	uint64_t len; \/\/ the number of bits used by the remainder and quotient$/;"	m	struct:_ilist	file:
len	src/test_merge.c	/^	uint64_t len; \/\/ the number of bits used by the remainder and quotient$/;"	m	struct:_ilist	file:
len	src/test_near_full.c	/^	uint64_t len; \/\/ the number of bits used by the remainder and quotient$/;"	m	struct:_ilist	file:
len	src/test_throughput_old.c	/^	uint64_t len; \/\/ the number of bits used by the remainder and quotient$/;"	m	struct:_ilist	file:
len	src/test_unit_old.c	/^	uint64_t len; \/\/ the number of bits used by the remainder and quotient$/;"	m	struct:_ilist	file:
len	src/test_whitelist.c	/^	int len; \/\/ the number of bits used by the remainder and quotient$/;"	m	struct:_ilist	file:
len_	other_filters/acf/src/packedtable.h	/^  size_t len_;$/;"	m	class:cuckoofilter::PackedTable
len_	other_filters/acfsim/src/packedtable.h	/^  size_t len_;$/;"	m	class:cuckoofilter::PackedTable
len_	other_filters/cf/src/packedtable.h	/^  size_t len_;$/;"	m	class:cuckoofilter::PackedTable
length	external/splinterdb/include/splinterdb/public_util.h	/^   uint64      length;$/;"	m	struct:slice
length	external/splinterdb/src/data_internal.h	/^   ondisk_key_length length;$/;"	m	struct:ondisk_key
length	external/splinterdb/src/platform_linux/platform_types.h	/^   size_t length;$/;"	m	struct:__anon32
length	external/splinterdb/src/util.h	/^   uint64           length;$/;"	m	struct:writable_buffer
length	include/gqf_int.h	/^		uint16_t length;$/;"	m	struct:__anon69
length	other_filters/cqf/include/gqf_int.h	/^		uint16_t length;$/;"	m	struct:__anon4
less_than	external/splinterdb/src/iterator.h	/^   less_than,$/;"	e	enum:comparison
less_than_or_equal	external/splinterdb/src/iterator.h	/^   less_than_or_equal,$/;"	e	enum:comparison
line	external/splinterdb/tests/unit/task_system_test.c	/^   int          line; \/\/ Thread created on \/ around this line #$/;"	m	struct:__anon65	file:
lineno	external/splinterdb/src/platform_linux/platform_inline.h	/^                        int              lineno);$/;"	v
links	external/splinterdb/src/trunk.h	/^   List_Links links;$/;"	m	struct:trunk_handle
ll_free	src/ll_table.c	/^void ll_free(ll_table *table) {$/;"	f
ll_list	include/ll_table.h	/^struct ll_list {$/;"	s
ll_list	include/ll_table.h	/^} typedef ll_list;$/;"	t
ll_node	include/ll_table.h	/^struct ll_node {$/;"	s
ll_node	include/ll_table.h	/^} typedef ll_node;$/;"	t
ll_table	include/ll_table.h	/^struct ll_table {$/;"	s
ll_table	include/ll_table.h	/^} typedef ll_table;$/;"	t
ll_table_init	src/ll_table.c	/^void ll_table_init(ll_table *table, uint64_t size) {$/;"	f
ll_table_insert	src/ll_table.c	/^void ll_table_insert(ll_table *table, uint64_t family, uint64_t rank, uint64_t key) {$/;"	f
ll_table_query	src/ll_table.c	/^uint64_t *ll_table_query(ll_table *table, uint64_t family, uint64_t rank) {$/;"	f
load_thread_params	external/splinterdb/tests/functional/io_apis_test.c	/^load_thread_params(io_test_fn_args *io_test_param,$/;"	f	file:
load_thread_params	external/splinterdb/tests/functional/splinter_test.c	/^load_thread_params(test_splinter_thread_params *params,$/;"	f	file:
load_ycsb_logs	external/splinterdb/tests/functional/ycsb_test.c	/^load_ycsb_logs(int          argc,$/;"	f	file:
local_counter	include/partitioned_counter.h	/^typedef struct local_counter {$/;"	s
local_counter	include/partitioned_counter.h	/^} local_counter;$/;"	t	typeref:struct:local_counter
local_counter	other_filters/cqf/include/partitioned_counter.h	/^typedef struct local_counter {$/;"	s
local_counter	other_filters/cqf/include/partitioned_counter.h	/^} local_counter;$/;"	t	typeref:struct:local_counter
local_counters	include/partitioned_counter.h	/^	lctr_t *local_counters;$/;"	m	struct:partitioned_counter
local_counters	other_filters/cqf/include/partitioned_counter.h	/^	lctr_t *local_counters;$/;"	m	struct:partitioned_counter
local_max_key	external/splinterdb/src/trunk.h	/^   key_buffer      local_max_key;$/;"	m	struct:trunk_range_iterator
local_min_key	external/splinterdb/src/trunk.h	/^   key_buffer      local_min_key;$/;"	m	struct:trunk_range_iterator
lock	external/splinterdb/src/platform_linux/platform_types.h	/^   pthread_mutex_t lock;$/;"	m	struct:platform_condvar
lock	external/splinterdb/src/platform_linux/platform_types.h	/^   volatile uint8 lock;$/;"	m	struct:__anon30
lock	external/splinterdb/src/rc_allocator.h	/^   platform_mutex   lock;$/;"	m	struct:rc_allocator
lock	external/splinterdb/tests/functional/ycsb_test.c	/^   bool32    lock;$/;"	m	struct:parse_ycsb_log_req	file:
lock_ctx	external/splinterdb/src/platform_linux/laio.c	/^lock_ctx(laio_handle *io)$/;"	f	file:
locks	include/gqf_int.h	/^		volatile int *locks;$/;"	m	struct:quotient_filter_runtime_data
locks	other_filters/cqf/include/gqf_int.h	/^		volatile int *locks;$/;"	m	struct:quotient_filter_runtime_data
locks_acquired_single_attempt	include/gqf_int.h	/^		uint64_t locks_acquired_single_attempt;$/;"	m	struct:__anon68
locks_acquired_single_attempt	other_filters/cqf/include/gqf_int.h	/^		uint64_t locks_acquired_single_attempt;$/;"	m	struct:__anon3
locks_taken	include/gqf_int.h	/^		uint64_t locks_taken;$/;"	m	struct:__anon68
locks_taken	other_filters/cqf/include/gqf_int.h	/^		uint64_t locks_taken;$/;"	m	struct:__anon3
log	external/splinterdb/src/trunk.h	/^   log_handle    *log;$/;"	m	struct:trunk_handle
log	external/splinterdb/tests/functional/log_test.c	/^   shard_log              *log;$/;"	m	struct:test_log_thread_params	file:
log_addr	external/splinterdb/src/log.h	/^log_addr(log_handle *log)$/;"	f
log_addr	external/splinterdb/src/trunk.c	/^   uint64      log_addr;$/;"	m	struct:trunk_super_block	file:
log_addr_fn	external/splinterdb/src/log.h	/^typedef uint64 (*log_addr_fn)(log_handle *log);$/;"	t
log_cfg	external/splinterdb/src/splinterdb.c	/^   shard_log_config   log_cfg;$/;"	m	struct:splinterdb	file:
log_cfg	external/splinterdb/src/trunk.h	/^   log_config     *log_cfg;$/;"	m	struct:trunk_config
log_config	external/splinterdb/src/log.h	/^typedef struct log_config   log_config;$/;"	t	typeref:struct:log_config
log_create	external/splinterdb/src/shard_log.c	/^log_create(cache *cc, log_config *lcfg, platform_heap_id hid)$/;"	f
log_entry	external/splinterdb/src/shard_log.c	/^struct ONDISK log_entry {$/;"	s	file:
log_entry	external/splinterdb/src/shard_log.h	/^typedef struct log_entry log_entry;$/;"	t	typeref:struct:log_entry
log_entry_key	external/splinterdb/src/shard_log.c	/^log_entry_key(log_entry *le)$/;"	f	file:
log_entry_message	external/splinterdb/src/shard_log.c	/^log_entry_message(log_entry *le)$/;"	f	file:
log_entry_next	external/splinterdb/src/shard_log.c	/^log_entry_next(log_entry *le)$/;"	f	file:
log_entry_required_capacity	external/splinterdb/src/shard_log.c	/^log_entry_required_capacity(key tuple_key, message msg)$/;"	f	file:
log_handle	external/splinterdb/src/log.h	/^struct log_handle {$/;"	s
log_handle	external/splinterdb/src/log.h	/^typedef struct log_handle   log_handle;$/;"	t	typeref:struct:log_handle
log_handle	external/splinterdb/src/trunk.h	/^   platform_log_handle *log_handle;$/;"	m	struct:trunk_config
log_handle	external/splinterdb/tests/config.h	/^   platform_log_handle *log_handle;$/;"	m	struct:master_config
log_index_size	external/splinterdb/src/routing_filter.h	/^   uint32        log_index_size;$/;"	m	struct:routing_config
log_iterator	external/splinterdb/src/log.h	/^typedef struct log_iterator log_iterator;$/;"	t	typeref:struct:log_iterator
log_magic	external/splinterdb/src/log.h	/^log_magic(log_handle *log)$/;"	f
log_magic_fn	external/splinterdb/src/log.h	/^typedef uint64 (*log_magic_fn)(log_handle *log);$/;"	t
log_meta_addr	external/splinterdb/src/log.h	/^log_meta_addr(log_handle *log)$/;"	f
log_meta_addr	external/splinterdb/src/trunk.c	/^   uint64      log_meta_addr;$/;"	m	struct:trunk_super_block	file:
log_num_buckets_	other_filters/acf/src/simd-block.h	/^  const int log_num_buckets_;$/;"	m	class:SimdBlockFilter
log_num_buckets_	other_filters/acfsim/src/simd-block.h	/^  const int log_num_buckets_;$/;"	m	class:SimdBlockFilter
log_num_buckets_	other_filters/cf/src/simd-block.h	/^  const int log_num_buckets_;$/;"	m	class:SimdBlockFilter
log_ops	external/splinterdb/src/log.h	/^typedef struct log_ops {$/;"	s
log_ops	external/splinterdb/src/log.h	/^} log_ops;$/;"	t	typeref:struct:log_ops
log_page_size	external/splinterdb/src/clockcache.h	/^   uint64 log_page_size;$/;"	m	struct:clockcache_config
log_release	external/splinterdb/src/log.h	/^log_release(log_handle *log)$/;"	f
log_release_fn	external/splinterdb/src/log.h	/^typedef void (*log_release_fn)(log_handle *log);$/;"	t
log_test	external/splinterdb/tests/functional/log_test.c	/^log_test(int argc, char *argv[])$/;"	f
log_trace_key	external/splinterdb/src/btree.c	/^log_trace_key(key k, char *msg)$/;"	f
log_trace_key	external/splinterdb/src/btree.c	196;"	d	file:
log_trace_leaf	external/splinterdb/src/btree.c	/^log_trace_leaf(const btree_config *cfg, const btree_hdr *hdr, char *msg)$/;"	f
log_trace_leaf	external/splinterdb/src/btree.c	197;"	d	file:
log_write	external/splinterdb/src/log.h	/^log_write(log_handle *log, key tuple_key, message data, uint64 generation)$/;"	f
log_write_fn	external/splinterdb/src/log.h	/^typedef int (*log_write_fn)(log_handle *log,$/;"	t
logfile	external/splinterdb/src/clockcache.h	/^   char         logfile[MAX_STRING_LENGTH];$/;"	m	struct:clockcache_config
logfile	external/splinterdb/src/clockcache.h	/^   platform_log_handle *logfile;$/;"	m	struct:clockcache
logger	external/splinterdb/tests/functional/cache_test.c	/^   bool32             logger;                  \/\/ IN logger thread$/;"	m	struct:__anon54	file:
logical_data_size	external/splinterdb/scripts/run_ycsb.py	/^                                (0.95 * 50 + 0.05) * op_count * (KEY_SIZE + MESSAGE_SIZE)$/;"	v
logical_data_size	external/splinterdb/scripts/run_ycsb.py	/^                            logical_data_size = op_count * (KEY_SIZE + MESSAGE_SIZE)$/;"	v
lookup	external/splinterdb/src/clockcache.h	/^   uint32              *lookup;$/;"	m	struct:clockcache
lookup	other_filters/cqf/src/bm.c	/^	lookup_op lookup;$/;"	m	struct:filter	file:
lookup	src/bm.c	/^	lookup_op lookup;$/;"	m	struct:filter	file:
lookup_num	external/splinterdb/tests/functional/test_async.h	/^      uint64 lookup_num; \/\/ Used by rest$/;"	m	union:__anon57::__anon58
lookup_op	other_filters/cqf/src/bm.c	/^typedef int (*lookup_op)(__uint128_t val);$/;"	t	file:
lookup_op	src/bm.c	/^typedef int (*lookup_op)(__uint128_t val);$/;"	t	file:
lookup_positive_pct	external/splinterdb/tests/functional/splinter_test.c	/^   uint8              lookup_positive_pct; \/\/ parallel lookup positive %$/;"	m	struct:test_splinter_thread_params	file:
lookup_state	external/splinterdb/src/trunk.h	/^   trunk_async_lookup_state lookup_state; \/\/ Can be pivot or$/;"	m	struct:trunk_async_ctxt
lookup_stats	external/splinterdb/tests/functional/splinter_test.c	/^   stats_lookup       lookup_stats[NUM_LOOKUP_TYPES];$/;"	m	struct:test_splinter_thread_params	file:
lookup_type	external/splinterdb/tests/functional/splinter_test.c	/^typedef enum lookup_type {$/;"	g	file:
lookup_type	external/splinterdb/tests/functional/splinter_test.c	/^} lookup_type;$/;"	t	typeref:enum:lookup_type	file:
lookups_found	external/splinterdb/src/trunk.h	/^   uint64 lookups_found;$/;"	m	struct:trunk_stats
lookups_not_found	external/splinterdb/src/trunk.h	/^   uint64 lookups_not_found;$/;"	m	struct:trunk_stats
low	other_filters/cqf/src/zipf.c	/^    long low;                    \/\/   How many elements are represented by all the previous buckets.$/;"	m	struct:zpair	file:
low	src/zipf.c	/^    long low;                    \/\/   How many elements are represented by all the previous buckets.$/;"	m	struct:zpair	file:
lowerbound	external/splinterdb/src/trunk.c	/^lowerbound(uint32 size)$/;"	f	file:
m_w	other_filters/cqf/src/bm.c	/^static unsigned int m_w = 1;$/;"	v	file:
m_w	other_filters/cqf/src/zipf.c	/^static unsigned int m_w = 1;$/;"	v	file:
m_w	src/bm.c	/^static unsigned int m_w = 1;$/;"	v	file:
m_w	src/zipf.c	/^static unsigned int m_w = 1;$/;"	v	file:
m_z	other_filters/cqf/src/bm.c	/^static unsigned int m_z = 1;$/;"	v	file:
m_z	other_filters/cqf/src/zipf.c	/^static unsigned int m_z = 1;$/;"	v	file:
m_z	src/bm.c	/^static unsigned int m_z = 1;$/;"	v	file:
m_z	src/zipf.c	/^static unsigned int m_z = 1;$/;"	v	file:
magic	external/splinterdb/src/log.h	/^   log_magic_fn   magic;$/;"	m	struct:log_ops
magic	external/splinterdb/src/shard_log.h	/^   uint64                magic;$/;"	m	struct:shard_log
magic	external/splinterdb/src/shard_log.h	/^   uint64      magic;$/;"	m	struct:shard_log_hdr
magic	external/splinterdb/tests/unit/ctest.h	/^   unsigned int magic;$/;"	m	struct:ctest
magic_endian_number	include/gqf_int.h	/^		uint64_t magic_endian_number;$/;"	m	struct:quotient_filter_metadata
magic_endian_number	other_filters/cqf/include/gqf_int.h	/^		uint64_t magic_endian_number;$/;"	m	struct:quotient_filter_metadata
main	external/splinterdb/examples/splinterdb_custom_ipv4_addr_sortcmp_example.c	/^main()$/;"	f
main	external/splinterdb/examples/splinterdb_intro_example.c	/^main()$/;"	f
main	external/splinterdb/examples/splinterdb_iterators_example.c	/^main()$/;"	f
main	external/splinterdb/examples/splinterdb_wide_values_example.c	/^main()$/;"	f
main	external/splinterdb/scripts/config_reader.py	/^def main():$/;"	f
main	external/splinterdb/scripts/list_test.py	/^def main():$/;"	f
main	external/splinterdb/tests/functional/driver_test.c	/^main(int argc, char *argv[])$/;"	f
main	external/splinterdb/tests/unit/main.c	/^main(int argc, const char *argv[])$/;"	f
main	other_filters/acf/benchmarks/bulk-insert-and-query.cc	/^int main(int argc, char * argv[]) {$/;"	f
main	other_filters/acf/benchmarks/conext-figure5.cc	/^int main() {$/;"	f
main	other_filters/acf/benchmarks/conext-table3.cc	/^int main() {$/;"	f
main	other_filters/acf/example/test.cc	/^int main(int argc, char **argv) {$/;"	f
main	other_filters/acf/example/test_acf_ops.cc	/^int main(int argc, char **argv) {$/;"	f
main	other_filters/acf/example/test_bits.cc	/^int main(int argc, char **argv) {$/;"	f
main	other_filters/acf/example/test_churn.cc	/^int main(int argc, char **argv) {$/;"	f
main	other_filters/acf/example/test_ext_throughput.cc	/^int main(int argc, char **argv) {$/;"	f
main	other_filters/acf/example/test_fill_varied_throughput.cc	/^int main(int argc, char **argv) {$/;"	f
main	other_filters/acf/example/test_fp.cc	/^int main(int argc, char **argv) {$/;"	f
main	other_filters/acf/example/test_micro.cc	/^int main(int argc, char **argv) {$/;"	f
main	other_filters/acf/example/test_micro_throughput.cc	/^int main(int argc, char **argv) {$/;"	f
main	other_filters/acf/example/test_splinter_adversarial.cc	/^int main(int argc, char **argv) {$/;"	f
main	other_filters/acf/example/test_splinter_inc_throughput.cc	/^int main(int argc, char **argv) {$/;"	f
main	other_filters/acf/example/test_splinter_ops.cc	/^int main(int argc, char **argv) {$/;"	f
main	other_filters/acf/example/test_splinter_throughput.cc	/^int main(int argc, char **argv) {$/;"	f
main	other_filters/acf/example/test_splinter_zipfian_histogram.cc	/^int main(int argc, char **argv) {$/;"	f
main	other_filters/acf/example/test_zipf_throughput.cc	/^int main(int argc, char **argv) {$/;"	f
main	other_filters/acfsim/example/test.cc	/^int main(int argc, char **argv) {$/;"	f
main	other_filters/acfsim/example/test_acf_ops.cc	/^int main(int argc, char **argv) {$/;"	f
main	other_filters/acfsim/example/test_bits.cc	/^int main(int argc, char **argv) {$/;"	f
main	other_filters/acfsim/example/test_churn.cc	/^int main(int argc, char **argv) {$/;"	f
main	other_filters/acfsim/example/test_ext_throughput.cc	/^int main(int argc, char **argv) {$/;"	f
main	other_filters/acfsim/example/test_fill_varied_throughput.cc	/^int main(int argc, char **argv) {$/;"	f
main	other_filters/acfsim/example/test_fp.cc	/^int main(int argc, char **argv) {$/;"	f
main	other_filters/acfsim/example/test_micro.cc	/^int main(int argc, char **argv) {$/;"	f
main	other_filters/acfsim/example/test_micro_read.cc	/^int main(int argc, char **argv) {$/;"	f
main	other_filters/acfsim/example/test_micro_throughput.cc	/^int main(int argc, char **argv) {$/;"	f
main	other_filters/acfsim/example/test_micro_write.cc	/^int main(int argc, char **argv) {$/;"	f
main	other_filters/acfsim/example/test_splinter_adversarial.cc	/^int main(int argc, char **argv) {$/;"	f
main	other_filters/acfsim/example/test_splinter_inc_throughput.cc	/^int main(int argc, char **argv) {$/;"	f
main	other_filters/acfsim/example/test_splinter_ops.cc	/^int main(int argc, char **argv) {$/;"	f
main	other_filters/acfsim/example/test_splinter_throughput.cc	/^int main(int argc, char **argv) {$/;"	f
main	other_filters/acfsim/example/test_splinter_zipfian_histogram.cc	/^int main(int argc, char **argv) {$/;"	f
main	other_filters/acfsim/example/test_zipf_throughput.cc	/^int main(int argc, char **argv) {$/;"	f
main	other_filters/cf/benchmarks/bulk-insert-and-query.cc	/^int main(int argc, char * argv[]) {$/;"	f
main	other_filters/cf/benchmarks/conext-figure5.cc	/^int main() {$/;"	f
main	other_filters/cf/benchmarks/conext-table3.cc	/^int main() {$/;"	f
main	other_filters/cf/example/test.cc	/^int main(int argc, char **argv) {$/;"	f
main	other_filters/cf/example/test_ext_throughput.cc	/^int main(int argc, char **argv) {$/;"	f
main	other_filters/cf/example/test_hash_accesses.cc	/^int main(int argc, char **argv) {$/;"	f
main	other_filters/cf/example/test_micro_super.cc	/^int main(int argc, char **argv) {$/;"	f
main	other_filters/cf/example/test_micro_throughput.cc	/^int main(int argc, char **argv) {$/;"	f
main	other_filters/cf/example/test_splinter_adversarial.cc	/^int main(int argc, char **argv) {$/;"	f
main	other_filters/cf/example/test_splinter_ops.cc	/^int main(int argc, char **argv) {$/;"	f
main	other_filters/cf/example/test_splinter_throughput.cc	/^int main(int argc, char **argv) {$/;"	f
main	other_filters/cf/example/test_splinter_zipfian_histogram.cc	/^int main(int argc, char **argv) {$/;"	f
main	other_filters/cqf/src/bm.c	/^int main(int argc, char **argv)$/;"	f
main	other_filters/cqf/src/test.c	/^int main(int argc, char **argv)$/;"	f
main	other_filters/cqf/src/test_adversarial.cc	/^int main(int argc, char **argv)$/;"	f
main	other_filters/cqf/src/test_ext_throughput.cc	/^int main(int argc, char **argv)$/;"	f
main	other_filters/cqf/src/test_fill_varied_throughput.c	/^int main(int argc, char **argv)$/;"	f
main	other_filters/cqf/src/test_hash_accesses.c	/^int main(int argc, char **argv)$/;"	f
main	other_filters/cqf/src/test_micro_super.c	/^int main(int argc, char **argv)$/;"	f
main	other_filters/cqf/src/test_micro_throughput.c	/^int main(int argc, char **argv)$/;"	f
main	other_filters/cqf/src/test_parallel.c	/^int main(int argc, char **argv)$/;"	f
main	other_filters/cqf/src/test_partitioned_counter.c	/^int main (int argc, char *argv[])$/;"	f
main	other_filters/cqf/src/test_splinter_adversarial.c	/^int main(int argc, char **argv)$/;"	f
main	other_filters/cqf/src/test_splinter_ops.c	/^int main(int argc, char **argv) {$/;"	f
main	other_filters/cqf/src/test_splinter_throughput.c	/^int main(int argc, char **argv)$/;"	f
main	other_filters/cqf/src/test_splinter_zipfian_histogram.c	/^int main(int argc, char **argv)$/;"	f
main	other_filters/cqf/src/test_threadsafe.c	/^int main(int argc, char **argv)$/;"	f
main	other_filters/taf/src/arcd.c	/^int main() {$/;"	f
main	other_filters/taf/src/exaf.c	/^int main() {$/;"	f
main	other_filters/taf/src/rsqf.c	/^int main() {$/;"	f
main	other_filters/taf/src/splinter_taf.c	/^int main(int argc, char **argv) {$/;"	f
main	other_filters/taf/src/taf.c	/^int main(int argc, char *argv[]) {$/;"	f
main	other_filters/taf/src/taf.cc	/^int main() {$/;"	f
main	other_filters/taf/src/taf_sim.c	/^int main() {$/;"	f
main	other_filters/taf/src/utaf.c	/^int main() {$/;"	f
main	src/bm.c	/^int main(int argc, char **argv)$/;"	f
main	src/taf.cc	/^int main() {$/;"	f
main	src/taf.cc	/^int main(int argc, char **argv) {$/;"	f
main	src/test_bulk.c	/^int main(int argc, char **argv)$/;"	f
main	src/test_deletions.c	/^int main(int argc, char **argv)$/;"	f
main	src/test_ext_churn.cc	/^int main(int argc, char **argv)$/;"	f
main	src/test_ext_inc_throughput.cc	/^int main(int argc, char **argv)$/;"	f
main	src/test_ext_throughput.cc	/^int main(int argc, char **argv)$/;"	f
main	src/test_fill_varied_throughput.c	/^int main(int argc, char **argv)$/;"	f
main	src/test_hash_accesses.c	/^int main(int argc, char **argv)$/;"	f
main	src/test_hash_table.c	/^int main() {$/;"	f
main	src/test_lltable_throughput.c	/^int main(int argc, char **argv)$/;"	f
main	src/test_merge.c	/^int main(int argc, char **argv)$/;"	f
main	src/test_micro_read.c	/^int main(int argc, char **argv)$/;"	f
main	src/test_micro_throughput.c	/^int main(int argc, char **argv)$/;"	f
main	src/test_micro_write.c	/^int main(int argc, char **argv)$/;"	f
main	src/test_near_full.c	/^int main(int argc, char **argv)$/;"	f
main	src/test_partitioned_counter.c	/^int main (int argc, char *argv[])$/;"	f
main	src/test_progress.c	/^int main(int argc, char **argv)$/;"	f
main	src/test_resize.c	/^int main(int argc, char **argv) {$/;"	f
main	src/test_splinter_adversarial.c	/^int main(int argc, char **argv)$/;"	f
main	src/test_splinter_inserts.c	/^int main(int argc, char **argv) {$/;"	f
main	src/test_splinter_inserts_2.c	/^int main(int argc, char **argv) {$/;"	f
main	src/test_splinter_ops.c	/^int main(int argc, char **argv) {$/;"	f
main	src/test_splinter_replace_lltable_throughput.c	/^int main(int argc, char **argv)$/;"	f
main	src/test_splinter_throughput.c	/^int main(int argc, char **argv)$/;"	f
main	src/test_splinter_zipfian_histogram.c	/^int main(int argc, char **argv)$/;"	f
main	src/test_threadsafe.c	/^int main(int argc, char **argv)$/;"	f
main	src/test_throughput_old.c	/^int main(int argc, char **argv)$/;"	f
main	src/test_unit.c	/^int main(int argc, char **argv)$/;"	f
main	src/test_unit_old.c	/^int main(int argc, char **argv)$/;"	f
main	src/test_whitelist.c	/^int main(int argc, char **argv)$/;"	f
main	src/test_zipf_throughput.cc	/^int main(int argc, char **argv)$/;"	f
main	test/test_adversarial.c	/^int main(int argc, char **argv)$/;"	f
main	test/test_micro.c	/^int main(int argc, char **argv)$/;"	f
main	test/test_parallel.c	/^int main(int argc, char **argv)$/;"	f
main	test/test_range_filter.c	/^int main()$/;"	f
main	test/test_splinter_lltable_throughput.c	/^int main(int argc, char **argv)$/;"	f
main	test/test_splinter_parallel.c	/^int main(int argc, char **argv)$/;"	f
main	test/test_split_throughput.c	/^int main(int argc, char **argv)$/;"	f
main	test/test_throughput.c	/^int main(int argc, char **argv)$/;"	f
make_madvise_calls	other_filters/cqf/src/gqf_file.c	/^static void make_madvise_calls(const QF *qf, uint64_t oldrun, uint64_t newrun)$/;"	f	file:
make_madvise_calls	src/gqf_file.c	/^static void make_madvise_calls(const QF *qf, uint64_t oldrun, uint64_t newrun)$/;"	f	file:
make_space	src/gqf_backup.c	/^static inline bool make_space(QF *qf, uint64_t insert_index, int ninserts)$/;"	f	file:
map_adapts	other_filters/acf/src/cuckoofilter.h	/^				 public: int map_inserts, map_kickouts, map_adapts;$/;"	m	class:cuckoofilter::CuckooFilter
map_adapts	other_filters/acfsim/src/cuckoofilter.h	/^				 public: int map_inserts, map_kickouts, map_adapts;$/;"	m	class:cuckoofilter::CuckooFilter
map_inserts	other_filters/acf/src/cuckoofilter.h	/^				 public: int map_inserts, map_kickouts, map_adapts;$/;"	m	class:cuckoofilter::CuckooFilter
map_inserts	other_filters/acfsim/src/cuckoofilter.h	/^				 public: int map_inserts, map_kickouts, map_adapts;$/;"	m	class:cuckoofilter::CuckooFilter
map_inserts	other_filters/cqf/src/test_adversarial.cc	/^int map_inserts = 0;$/;"	v
map_inserts	other_filters/cqf/src/test_ext_throughput.cc	/^int map_inserts = 0;$/;"	v
map_inserts	other_filters/cqf/src/test_splinter_adversarial.c	/^uint64_t map_inserts = 0;$/;"	v
map_inserts	other_filters/cqf/src/test_splinter_throughput.c	/^uint64_t map_inserts = 0;$/;"	v
map_inserts	other_filters/cqf/src/test_splinter_zipfian_histogram.c	/^uint64_t map_inserts = 0;$/;"	v
map_inserts	src/test_ext_churn.cc	/^int map_inserts = 0;$/;"	v
map_inserts	src/test_ext_inc_throughput.cc	/^int map_inserts = 0;$/;"	v
map_inserts	src/test_ext_throughput.cc	/^int map_inserts = 0;$/;"	v
map_inserts	src/test_splinter_adversarial.c	/^uint64_t map_inserts = 0;$/;"	v
map_inserts	src/test_splinter_zipfian_histogram.c	/^uint64_t map_inserts = 0;$/;"	v
map_inserts	src/test_zipf_throughput.cc	/^int map_inserts = 0;$/;"	v
map_kickouts	other_filters/acf/src/cuckoofilter.h	/^				 public: int map_inserts, map_kickouts, map_adapts;$/;"	m	class:cuckoofilter::CuckooFilter
map_kickouts	other_filters/acfsim/src/cuckoofilter.h	/^				 public: int map_inserts, map_kickouts, map_adapts;$/;"	m	class:cuckoofilter::CuckooFilter
map_queries	other_filters/cqf/src/test_adversarial.cc	/^int map_queries = 0;$/;"	v
map_queries	other_filters/cqf/src/test_ext_throughput.cc	/^int map_queries = 0;$/;"	v
map_queries	other_filters/cqf/src/test_splinter_adversarial.c	/^uint64_t map_queries = 0;$/;"	v
map_queries	other_filters/cqf/src/test_splinter_throughput.c	/^uint64_t map_queries = 0;$/;"	v
map_queries	other_filters/cqf/src/test_splinter_zipfian_histogram.c	/^uint64_t map_queries = 0;$/;"	v
map_queries	src/test_ext_churn.cc	/^int map_queries = 0;$/;"	v
map_queries	src/test_ext_inc_throughput.cc	/^int map_queries = 0;$/;"	v
map_queries	src/test_ext_throughput.cc	/^int map_queries = 0;$/;"	v
map_queries	src/test_splinter_adversarial.c	/^uint64_t map_queries = 0;$/;"	v
map_queries	src/test_splinter_zipfian_histogram.c	/^uint64_t map_queries = 0;$/;"	v
map_queries	src/test_zipf_throughput.cc	/^int map_queries = 0;$/;"	v
map_t2	src/test_ext_inc_throughput.cc	/^typedef stxxl::map<uint64_t, test_struct, CompareGreater, DATA_NODE_BLOCK_SIZE, DATA_LEAF_BLOCK_SIZE> map_t2;$/;"	t	file:
map_t2	src/test_ext_throughput.cc	/^typedef stxxl::map<uint64_t, test_struct, CompareGreater, DATA_NODE_BLOCK_SIZE, DATA_LEAF_BLOCK_SIZE> map_t2;$/;"	t	file:
map_t2	src/test_zipf_throughput.cc	/^typedef stxxl::map<uint64_t, test_struct, CompareGreater, DATA_NODE_BLOCK_SIZE, DATA_LEAF_BLOCK_SIZE> map_t2;$/;"	t	file:
master_cfg	external/splinterdb/tests/unit/large_inserts_stress_test.c	/^   master_config *master_cfg;$/;"	m	struct:__anon62	file:
master_config	external/splinterdb/tests/config.h	/^typedef struct master_config {$/;"	s
master_config	external/splinterdb/tests/config.h	/^} master_config;$/;"	t	typeref:struct:master_config
match	external/splinterdb/scripts/list_test.py	/^   def match(self, test: Test) -> None:$/;"	m	class:Filter
match	external/splinterdb/scripts/list_test.py	/^   def match(self, test: Test) -> bool:$/;"	m	class:ListAllFilter
match	external/splinterdb/scripts/list_test.py	/^   def match(self, test: Test) -> bool:$/;"	m	class:TagFilter
max	external/splinterdb/src/platform_linux/platform.c	/^                     size_t             max,$/;"	v
max	external/splinterdb/src/platform_linux/platform_types.h	/^   long          min, max, total;$/;"	m	struct:__anon33
max	external/splinterdb/tests/functional/avlTree.h	/^   unsigned      max;$/;"	m	struct:__anon60
max	external/splinterdb/tests/functional/cache_test.c	/^         uint32       max;$/;"	m	struct:__anon47::__anon49::__anon51	file:
max	other_filters/taf/src/macros.h	25;"	d
max	src/taf.cc	231;"	d	file:
max_allocated	external/splinterdb/src/rc_allocator.h	/^   int64 max_allocated;  \/\/ # of extents allocated high-water mark$/;"	m	struct:rc_allocator_stats
max_async_inflight	external/splinterdb/tests/functional/btree_test.c	/^static uint64 max_async_inflight = 32;$/;"	v	file:
max_async_inflight	external/splinterdb/tests/functional/test_async.h	/^   uint32          max_async_inflight;$/;"	m	struct:__anon59
max_batches_nonblocking_get	external/splinterdb/src/platform_linux/laio.h	/^   uint64             max_batches_nonblocking_get;$/;"	m	struct:laio_handle
max_branches_per_node	external/splinterdb/include/splinterdb/splinterdb.h	/^   uint64 max_branches_per_node;$/;"	m	struct:splinterdb_config
max_branches_per_node	external/splinterdb/src/trunk.h	/^   uint64 max_branches_per_node;$/;"	m	struct:trunk_config
max_branches_per_node	external/splinterdb/tests/config.h	/^   uint64 max_branches_per_node;$/;"	m	struct:master_config
max_extents_per_memtable	external/splinterdb/src/memtable.h	/^   uint64        max_extents_per_memtable;$/;"	m	struct:memtable_config
max_generation	external/splinterdb/tests/functional/btree_test.c	/^   uint64             max_generation;$/;"	m	struct:test_memtable_context	file:
max_key	external/splinterdb/src/btree.h	/^   key           max_key;$/;"	m	struct:btree_iterator
max_key	external/splinterdb/src/trunk.h	/^   key_buffer      max_key;$/;"	m	struct:trunk_range_iterator
max_key_size	external/splinterdb/include/splinterdb/data.h	/^   uint64 max_key_size;$/;"	m	struct:data_config
max_key_size	external/splinterdb/tests/config.h	/^   uint64 max_key_size;$/;"	m	struct:master_config
max_key_size	external/splinterdb/tests/unit/splinterdb_stress_test.c	/^   uint16_t    max_key_size;$/;"	m	struct:__anon66	file:
max_kv_bytes_per_node	external/splinterdb/src/trunk.h	/^   uint64 max_kv_bytes_per_node;$/;"	m	struct:trunk_config
max_latency	external/splinterdb/scripts/run_ycsb.py	/^                    max_latency = int(float(stats_lines[14].split()[1]))$/;"	v
max_latency	external/splinterdb/tests/functional/ycsb_test.c	/^max_latency(latency_table table)$/;"	f
max_latency_elapsed	external/splinterdb/src/io.h	/^   io_max_latency_elapsed_fn max_latency_elapsed;$/;"	m	struct:io_ops
max_memtables	external/splinterdb/src/memtable.h	/^   uint64        max_memtables;$/;"	m	struct:memtable_config
max_outstanding_tasks	external/splinterdb/src/task.h	/^   uint64    max_outstanding_tasks;$/;"	m	struct:__anon40
max_payload_size	external/splinterdb/tests/functional/test.h	/^   uint64       max_payload_size;$/;"	m	struct:test_message_generator
max_pivot_generation	external/splinterdb/src/trunk.c	/^   uint64  max_pivot_generation;$/;"	m	struct:trunk_compact_bundle_req	file:
max_pivot_keys	external/splinterdb/src/trunk.h	/^   uint64 max_pivot_keys;      \/\/ hard limit on number of pivot keys$/;"	m	struct:trunk_config
max_queue_wait_time_ns	external/splinterdb/src/task.h	/^   uint64    max_queue_wait_time_ns;$/;"	m	struct:__anon40
max_range_len	external/splinterdb/tests/functional/ycsb_test.c	/^   uint64   *max_range_len;$/;"	m	struct:parse_ycsb_log_req	file:
max_range_length	external/splinterdb/tests/functional/splinter_test.c	/^   uint64             max_range_length;$/;"	m	struct:test_splinter_thread_params	file:
max_range_length	external/splinterdb/tests/functional/splinter_test.c	/^   uint64      max_range_length;$/;"	m	struct:trunk_range_perf_params	file:
max_runtime_func	external/splinterdb/src/task.h	/^   void     *max_runtime_func;$/;"	m	struct:__anon40
max_runtime_ns	external/splinterdb/src/task.h	/^   timestamp max_runtime_ns;$/;"	m	struct:__anon40
max_size_t	external/splinterdb/src/platform_linux/platform.h	/^max_size_t(size_t a, size_t b)$/;"	f
max_tid	external/splinterdb/src/task.h	/^   threadid max_tid;$/;"	m	struct:task_system
max_tuples	external/splinterdb/src/btree.h	/^   uint64        max_tuples;$/;"	m	struct:btree_pack_req
max_tuples_per_node	external/splinterdb/src/trunk.h	/^   uint64 max_tuples_per_node; \/\/ deprecated$/;"	m	struct:trunk_config
max_value	other_filters/cf/example/test_ext_throughput.cc	/^        static uint64_t max_value() {$/;"	f	struct:CompareGreater
max_value	other_filters/cqf/src/test_adversarial.cc	/^        static uint64_t max_value() {$/;"	f	struct:CompareGreater
max_value	other_filters/cqf/src/test_ext_throughput.cc	/^        static uint64_t max_value() {$/;"	f	struct:CompareGreater
max_value	src/taf.cc	/^        static uint64_t max_value() {$/;"	f	struct:CompareGreater
max_value	src/test_ext_churn.cc	/^	static uint64_t max_value() {$/;"	f	struct:CompareGreater
max_value	src/test_ext_inc_throughput.cc	/^	static uint64_t max_value() {$/;"	f	struct:CompareGreater
max_value	src/test_ext_throughput.cc	/^	static uint64_t max_value() {$/;"	f	struct:CompareGreater
max_value	src/test_zipf_throughput.cc	/^	static uint64_t max_value() {$/;"	f	struct:CompareGreater
max_value_size	external/splinterdb/tests/unit/splinterdb_stress_test.c	/^   uint16_t    max_value_size;$/;"	m	struct:__anon66	file:
maxoutputs	other_filters/cqf/src/bm.c	/^	uint64_t maxoutputs;$/;"	m	struct:app_pregen_state	file:
maxoutputs	other_filters/cqf/src/bm.c	/^	uint64_t maxoutputs;$/;"	m	struct:uniform_online_state	file:
maxoutputs	other_filters/cqf/src/bm.c	/^	uint64_t maxoutputs;$/;"	m	struct:uniform_pregen_state	file:
maxoutputs	other_filters/cqf/src/bm.c	/^	uint64_t maxoutputs;$/;"	m	struct:zipfian_pregen_state	file:
maxoutputs	src/bm.c	/^	uint64_t maxoutputs;$/;"	m	struct:app_pregen_state	file:
maxoutputs	src/bm.c	/^	uint64_t maxoutputs;$/;"	m	struct:uniform_online_state	file:
maxoutputs	src/bm.c	/^	uint64_t maxoutputs;$/;"	m	struct:uniform_pregen_state	file:
maxoutputs	src/bm.c	/^	uint64_t maxoutputs;$/;"	m	struct:zipfian_pregen_state	file:
maxvalue	other_filters/cqf/src/bm.c	/^	uint64_t maxvalue;$/;"	m	struct:uniform_online_state	file:
maxvalue	src/bm.c	/^	uint64_t maxvalue;$/;"	m	struct:uniform_online_state	file:
mean_latency	external/splinterdb/scripts/run_ycsb.py	/^                    mean_latency = int(float(stats_lines[9].split()[1]))$/;"	v
mean_latency	external/splinterdb/tests/functional/ycsb_test.c	/^mean_latency(latency_table table)$/;"	f
measurement_command	external/splinterdb/tests/functional/ycsb_test.c	/^   char            *measurement_command;$/;"	m	struct:ycsb_phase	file:
memento_bits	test/test_range_filter.c	/^const uint64_t memento_bits = 5;$/;"	v
memory_mib	external/splinterdb/scripts/run_ycsb.py	/^                memory_mib = int(mem \/ 1024 \/ 1024)$/;"	v
memtable	external/splinterdb/src/memtable.h	/^typedef struct memtable {$/;"	s
memtable	external/splinterdb/src/memtable.h	/^} PLATFORM_CACHELINE_ALIGNED memtable;$/;"	t	typeref:struct:memtable
memtable_add_tuple	external/splinterdb/src/memtable.c	/^memtable_add_tuple(memtable_context *ctxt)$/;"	f	file:
memtable_begin_insert	external/splinterdb/src/memtable.c	/^memtable_begin_insert(memtable_context *ctxt)$/;"	f	file:
memtable_begin_lookup	external/splinterdb/src/memtable.c	/^memtable_begin_lookup(memtable_context *ctxt)$/;"	f
memtable_begin_raw_rotation	external/splinterdb/src/memtable.c	/^memtable_begin_raw_rotation(memtable_context *ctxt)$/;"	f	file:
memtable_block_lookups	external/splinterdb/src/memtable.c	/^memtable_block_lookups(memtable_context *ctxt)$/;"	f
memtable_capacity	external/splinterdb/include/splinterdb/splinterdb.h	/^   uint64 memtable_capacity;$/;"	m	struct:splinterdb_config
memtable_capacity	external/splinterdb/tests/config.h	/^   uint64 memtable_capacity;$/;"	m	struct:master_config
memtable_config	external/splinterdb/src/memtable.h	/^typedef struct memtable_config {$/;"	s
memtable_config	external/splinterdb/src/memtable.h	/^} memtable_config;$/;"	t	typeref:struct:memtable_config
memtable_config_init	external/splinterdb/src/memtable.c	/^memtable_config_init(memtable_config *cfg,$/;"	f
memtable_context	external/splinterdb/src/memtable.h	/^typedef struct memtable_context {$/;"	s
memtable_context	external/splinterdb/src/memtable.h	/^} memtable_context;$/;"	t	typeref:struct:memtable_context
memtable_context_create	external/splinterdb/src/memtable.c	/^memtable_context_create(platform_heap_id hid,$/;"	f
memtable_context_destroy	external/splinterdb/src/memtable.c	/^memtable_context_destroy(platform_heap_id hid, memtable_context *ctxt)$/;"	f
memtable_dec_ref_maybe_recycle	external/splinterdb/src/memtable.c	/^memtable_dec_ref_maybe_recycle(memtable_context *ctxt, memtable *mt)$/;"	f
memtable_deinit	external/splinterdb/src/memtable.c	/^memtable_deinit(cache *cc, memtable *mt)$/;"	f
memtable_end_gen	external/splinterdb/src/trunk.h	/^   uint64          memtable_end_gen;$/;"	m	struct:trunk_range_iterator
memtable_end_insert	external/splinterdb/src/memtable.c	/^memtable_end_insert(memtable_context *ctxt)$/;"	f
memtable_end_insert_rotation	external/splinterdb/src/memtable.c	/^memtable_end_insert_rotation(memtable_context *ctxt)$/;"	f	file:
memtable_end_lookup	external/splinterdb/src/memtable.c	/^memtable_end_lookup(memtable_context *ctxt)$/;"	f
memtable_end_raw_rotation	external/splinterdb/src/memtable.c	/^memtable_end_raw_rotation(memtable_context *ctxt)$/;"	f	file:
memtable_failed_flushes	external/splinterdb/src/trunk.h	/^   uint64 memtable_failed_flushes;$/;"	m	struct:trunk_stats
memtable_flush_root_full	external/splinterdb/src/trunk.h	/^   uint64 memtable_flush_root_full;$/;"	m	struct:trunk_stats
memtable_flush_time_max_ns	external/splinterdb/src/trunk.h	/^   uint64 memtable_flush_time_max_ns;$/;"	m	struct:trunk_stats
memtable_flush_time_ns	external/splinterdb/src/trunk.h	/^   uint64 memtable_flush_time_ns;$/;"	m	struct:trunk_stats
memtable_flush_wait_time_ns	external/splinterdb/src/trunk.h	/^   uint64 memtable_flush_wait_time_ns;$/;"	m	struct:trunk_stats
memtable_flushes	external/splinterdb/src/trunk.h	/^   uint64 memtable_flushes;$/;"	m	struct:trunk_stats
memtable_force_finalize	external/splinterdb/src/memtable.c	/^memtable_force_finalize(memtable_context *ctxt)$/;"	f
memtable_generation	external/splinterdb/src/memtable.h	/^memtable_generation(memtable_context *ctxt)$/;"	f
memtable_generation_retired	external/splinterdb/src/memtable.h	/^memtable_generation_retired(memtable_context *ctxt)$/;"	f
memtable_generation_to_incorporate	external/splinterdb/src/memtable.h	/^memtable_generation_to_incorporate(memtable_context *ctxt)$/;"	f
memtable_increment_to_generation_retired	external/splinterdb/src/memtable.h	/^memtable_increment_to_generation_retired(memtable_context *ctxt,$/;"	f
memtable_increment_to_generation_to_incorporate	external/splinterdb/src/memtable.h	/^memtable_increment_to_generation_to_incorporate(memtable_context *ctxt,$/;"	f
memtable_init	external/splinterdb/src/memtable.c	/^memtable_init(memtable *mt, cache *cc, memtable_config *cfg, uint64 generation)$/;"	f
memtable_insert	external/splinterdb/src/memtable.c	/^memtable_insert(memtable_context *ctxt,$/;"	f
memtable_is_empty	external/splinterdb/src/memtable.c	/^memtable_is_empty(memtable_context *ctxt)$/;"	f
memtable_is_full	external/splinterdb/src/memtable.c	/^memtable_is_full(const memtable_config *cfg, memtable *mt)$/;"	f
memtable_lock_incorporation_lock	external/splinterdb/src/memtable.h	/^memtable_lock_incorporation_lock(memtable_context *ctxt)$/;"	f
memtable_mark_empty	external/splinterdb/src/memtable.c	/^memtable_mark_empty(memtable_context *ctxt)$/;"	f	file:
memtable_maybe_rotate_and_begin_insert	external/splinterdb/src/memtable.c	/^memtable_maybe_rotate_and_begin_insert(memtable_context *ctxt,$/;"	f
memtable_ok_to_lookup	external/splinterdb/src/memtable.h	/^memtable_ok_to_lookup(memtable *mt)$/;"	f
memtable_ok_to_lookup_compacted	external/splinterdb/src/memtable.h	/^memtable_ok_to_lookup_compacted(memtable *mt)$/;"	f
memtable_print	external/splinterdb/src/memtable.h	/^memtable_print(platform_log_handle *log_handle, cache *cc, memtable *mt)$/;"	f
memtable_print_stats	external/splinterdb/src/memtable.h	/^memtable_print_stats(platform_log_handle *log_handle, cache *cc, memtable *mt)$/;"	f
memtable_process	external/splinterdb/src/memtable.c	/^memtable_process(memtable_context *ctxt, uint64 generation)$/;"	f	file:
memtable_root_addr	external/splinterdb/src/memtable.h	/^memtable_root_addr(memtable *mt)$/;"	f
memtable_start_gen	external/splinterdb/src/trunk.h	/^   uint64          memtable_start_gen;$/;"	m	struct:trunk_range_iterator
memtable_state	external/splinterdb/src/memtable.h	/^typedef enum memtable_state {$/;"	g
memtable_state	external/splinterdb/src/memtable.h	/^} memtable_state;$/;"	t	typeref:enum:memtable_state
memtable_transition	external/splinterdb/src/memtable.h	/^memtable_transition(memtable      *mt,$/;"	f
memtable_try_begin_insert_rotation	external/splinterdb/src/memtable.c	/^memtable_try_begin_insert_rotation(memtable_context *ctxt)$/;"	f	file:
memtable_try_transition	external/splinterdb/src/memtable.h	/^memtable_try_transition(memtable      *mt,$/;"	f
memtable_unblock_lookups	external/splinterdb/src/memtable.c	/^memtable_unblock_lookups(memtable_context *ctxt)$/;"	f
memtable_unlock_incorporation_lock	external/splinterdb/src/memtable.h	/^memtable_unlock_incorporation_lock(memtable_context *ctxt)$/;"	f
memtable_verify	external/splinterdb/src/memtable.h	/^memtable_verify(cache *cc, memtable *mt)$/;"	f
memtable_zap	external/splinterdb/src/memtable.h	/^memtable_zap(cache *cc, memtable *mt)$/;"	f
merge_accumulator	external/splinterdb/include/splinterdb/data.h	/^typedef struct merge_accumulator merge_accumulator;$/;"	t	typeref:struct:merge_accumulator
merge_accumulator_copy_message	external/splinterdb/src/data_internal.c	/^merge_accumulator_copy_message(merge_accumulator *ma, message msg)$/;"	f
merge_accumulator_data	external/splinterdb/src/data_internal.c	/^merge_accumulator_data(const merge_accumulator *ma)$/;"	f
merge_accumulator_length	external/splinterdb/src/data_internal.c	/^merge_accumulator_length(const merge_accumulator *ma)$/;"	f
merge_accumulator_message_class	external/splinterdb/src/data_internal.c	/^merge_accumulator_message_class(const merge_accumulator *ma)$/;"	f
merge_accumulator_resize	external/splinterdb/src/data_internal.c	/^merge_accumulator_resize(merge_accumulator *ma, uint64 newsize)$/;"	f
merge_accumulator_set_class	external/splinterdb/src/data_internal.c	/^merge_accumulator_set_class(merge_accumulator *ma, message_type type)$/;"	f
merge_accumulator_to_slice	external/splinterdb/src/data_internal.c	/^merge_accumulator_to_slice(const merge_accumulator *ma)$/;"	f
merge_advance_helper	external/splinterdb/src/merge.c	/^merge_advance_helper(merge_iterator *merge_itor)$/;"	f	file:
merge_behavior	external/splinterdb/src/merge.c	/^struct merge_behavior {$/;"	s	file:
merge_behavior	external/splinterdb/src/merge.h	/^typedef struct merge_behavior *merge_behavior;$/;"	t	typeref:struct:merge_behavior
merge_buffer	external/splinterdb/src/merge.h	/^   merge_accumulator merge_buffer;$/;"	m	struct:merge_iterator
merge_can_next	external/splinterdb/src/merge.c	/^merge_can_next(iterator *itor)$/;"	f
merge_can_prev	external/splinterdb/src/merge.c	/^merge_can_prev(iterator *itor)$/;"	f
merge_comp	external/splinterdb/src/merge.c	/^merge_comp(const void *one, const void *two, void *ctxt)$/;"	f	file:
merge_ctxt	external/splinterdb/src/merge.c	/^struct merge_ctxt {$/;"	s	file:
merge_curr	external/splinterdb/src/merge.c	/^merge_curr(iterator *itor, key *curr_key, message *data)$/;"	f
merge_finalize_updates_and_discard_deletes	external/splinterdb/src/merge.c	/^merge_finalize_updates_and_discard_deletes(merge_iterator *merge_itor,$/;"	f	file:
merge_full	external/splinterdb/src/merge.c	/^} merge_raw, merge_intermediate, merge_full;$/;"	v	typeref:struct:merge_behavior
merge_intermediate	external/splinterdb/src/merge.c	/^} merge_raw, merge_intermediate, merge_full;$/;"	v	typeref:struct:merge_behavior
merge_iterator	external/splinterdb/src/merge.h	/^typedef struct merge_iterator {$/;"	s
merge_iterator	external/splinterdb/src/merge.h	/^} merge_iterator;$/;"	t	typeref:struct:merge_iterator
merge_iterator_create	external/splinterdb/src/merge.c	/^merge_iterator_create(platform_heap_id hid,$/;"	f
merge_iterator_destroy	external/splinterdb/src/merge.c	/^merge_iterator_destroy(platform_heap_id hid, merge_iterator **merge_itor)$/;"	f
merge_iterator_print	external/splinterdb/src/merge.c	/^merge_iterator_print(merge_iterator *merge_itor)$/;"	f
merge_iterator_set_direction	external/splinterdb/src/merge.c	/^merge_iterator_set_direction(merge_iterator *merge_itor, bool32 forwards)$/;"	f	file:
merge_itor	external/splinterdb/src/trunk.h	/^   merge_iterator *merge_itor;$/;"	m	struct:trunk_range_iterator
merge_messages	external/splinterdb/src/merge.h	/^   bool32       merge_messages;$/;"	m	struct:merge_iterator
merge_next	external/splinterdb/src/merge.c	/^merge_next(iterator *itor)$/;"	f
merge_ops	external/splinterdb/src/merge.c	/^static iterator_ops merge_ops = {$/;"	v	file:
merge_prev	external/splinterdb/src/merge.c	/^merge_prev(iterator *itor)$/;"	f
merge_raw	external/splinterdb/src/merge.c	/^} merge_raw, merge_intermediate, merge_full;$/;"	v	typeref:struct:merge_behavior
merge_resolve_equal_keys	external/splinterdb/src/merge.c	/^merge_resolve_equal_keys(merge_iterator *merge_itor)$/;"	f	file:
merge_tuple_final_fn	external/splinterdb/include/splinterdb/data.h	/^typedef int (*merge_tuple_final_fn)(const data_config *cfg,$/;"	t
merge_tuple_fn	external/splinterdb/include/splinterdb/data.h	/^typedef int (*merge_tuple_fn)(const data_config *cfg,$/;"	t
merge_tuples	external/splinterdb/include/splinterdb/data.h	/^   merge_tuple_fn       merge_tuples;$/;"	m	struct:data_config
merge_tuples	src/splinter_util.c	/^int merge_tuples(const data_config *cfg, slice key, message old_message, merge_accumulator *new_message) {$/;"	f
merge_tuples	src/test_splinter_replace_lltable_throughput.c	/^int merge_tuples(const data_config *cfg, slice key, message old_message, merge_accumulator *new_message) {$/;"	f
merge_tuples_final	external/splinterdb/include/splinterdb/data.h	/^   merge_tuple_final_fn merge_tuples_final;$/;"	m	struct:data_config
merge_tuples_final	src/splinter_util.c	/^int merge_tuples_final(const data_config *cfg, slice key, merge_accumulator *oldest_message) {$/;"	f
merge_tuples_final	src/test_splinter_replace_lltable_throughput.c	/^int merge_tuples_final(const data_config *cfg, slice key, merge_accumulator *oldest_message) {$/;"	f
merged_data	external/splinterdb/src/btree.h	/^   char merged_data[MAX_INLINE_MESSAGE_SIZE(MAX_PAGE_SIZE)];$/;"	m	struct:__anon14
merged_message	external/splinterdb/src/btree_private.h	/^      merge_accumulator merged_message; \/\/ otherwise$/;"	m	union:leaf_incorporate_spec::__anon12
message	external/splinterdb/include/splinterdb/data.h	/^typedef struct message {$/;"	s
message	external/splinterdb/include/splinterdb/data.h	/^} message;$/;"	t	typeref:struct:message
message_bytes	external/splinterdb/src/btree.h	/^   uint32 message_bytes;$/;"	m	struct:btree_pivot_stats
message_bytes	external/splinterdb/src/btree.h	/^   uint64 message_bytes; \/\/ total size of msgs in tuples of the output tree$/;"	m	struct:btree_pack_req
message_class	external/splinterdb/include/splinterdb/data.h	/^message_class(message msg)$/;"	f
message_class_string	external/splinterdb/src/data_internal.h	/^message_class_string(message msg)$/;"	f
message_create	external/splinterdb/src/data_internal.h	/^message_create(message_type type, slice data)$/;"	f
message_data	external/splinterdb/include/splinterdb/data.h	/^message_data(message msg)$/;"	f
message_encoding	external/splinterdb/src/default_data_config.c	/^} message_encoding;$/;"	t	typeref:struct:ONDISK	file:
message_generate_set_message_type	external/splinterdb/tests/functional/test.h	/^message_generate_set_message_type(test_message_generator *gen,$/;"	f
message_is_definitive	external/splinterdb/src/data_internal.h	/^message_is_definitive(message msg)$/;"	f
message_is_invalid_user_type	external/splinterdb/src/data_internal.h	/^message_is_invalid_user_type(message msg)$/;"	f
message_is_null	external/splinterdb/src/data_internal.h	/^message_is_null(message msg)$/;"	f
message_length	external/splinterdb/include/splinterdb/data.h	/^message_length(message msg)$/;"	f
message_length	external/splinterdb/src/data_internal.h	/^   ondisk_message_length message_length;$/;"	m	struct:ondisk_tuple
message_lex_cmp	external/splinterdb/src/data_internal.h	/^message_lex_cmp(message a, message b)$/;"	f
message_size	external/splinterdb/tests/config.h	/^   uint64 message_size;$/;"	m	struct:master_config
message_slice	external/splinterdb/include/splinterdb/data.h	/^message_slice(message msg)$/;"	f
message_to_str_fn	external/splinterdb/include/splinterdb/data.h	/^typedef void (*message_to_str_fn)(const data_config *cfg,$/;"	t
message_to_string	external/splinterdb/include/splinterdb/data.h	/^   message_to_str_fn    message_to_string;$/;"	m	struct:data_config
message_to_string	external/splinterdb/src/default_data_config.c	/^message_to_string(const data_config *cfg,$/;"	f	file:
message_type	external/splinterdb/include/splinterdb/data.h	/^typedef enum message_type {$/;"	g
message_type	external/splinterdb/include/splinterdb/data.h	/^} message_type;$/;"	t	typeref:enum:message_type
message_type_string	external/splinterdb/src/data_internal.h	/^message_type_string(message_type type)$/;"	f
meta_addr	external/splinterdb/src/log.h	/^   log_addr_fn    meta_addr;$/;"	m	struct:log_ops
meta_head	external/splinterdb/src/mini_allocator.h	/^   uint64          meta_head;$/;"	m	struct:mini_allocator
meta_head	external/splinterdb/src/routing_filter.h	/^   uint64 meta_head;$/;"	m	struct:routing_filter
meta_head	external/splinterdb/src/shard_log.h	/^   uint64                meta_head;$/;"	m	struct:shard_log
meta_page	external/splinterdb/src/rc_allocator.h	/^   rc_allocator_meta_page *meta_page;$/;"	m	struct:rc_allocator
meta_tail	external/splinterdb/src/mini_allocator.h	/^   volatile uint64 meta_tail;$/;"	m	struct:mini_allocator
meta_tail	external/splinterdb/src/trunk.c	/^   uint64      meta_tail;$/;"	m	struct:trunk_super_block	file:
metadata	external/splinterdb/src/platform_linux/laio.h	/^   char           metadata[64]; \/\/ issuer callback data$/;"	m	struct:io_async_req
metadata	include/gqf_int.h	/^		qfmetadata *metadata;$/;"	m	struct:quotient_filter
metadata	other_filters/cqf/include/gqf_int.h	/^		qfmetadata *metadata;$/;"	m	struct:quotient_filter
metadata_lock	include/gqf_int.h	/^		volatile int metadata_lock;$/;"	m	struct:quotient_filter_runtime_data
metadata_lock	other_filters/cqf/include/gqf_int.h	/^		volatile int metadata_lock;$/;"	m	struct:quotient_filter_runtime_data
might_be_empty	other_filters/cqf/src/gqf.c	/^static inline int might_be_empty(const QF *qf, uint64_t slot_index)$/;"	f	file:
might_be_empty	src/gqf.c	/^static inline int might_be_empty(const QF *qf, uint64_t slot_index)$/;"	f	file:
might_be_empty	src/gqf_backup.c	/^static inline int might_be_empty(const QF *qf, uint64_t slot_index)$/;"	f	file:
min	external/splinterdb/src/platform_linux/platform_types.h	/^   long          min, max, total;$/;"	m	struct:__anon33
min	external/splinterdb/tests/functional/cache_test.c	/^         uint32       min;$/;"	m	struct:__anon47::__anon49::__anon51	file:
min	other_filters/cqf/src/partitioned_counter.c	22;"	d	file:
min	other_filters/taf/src/macros.h	24;"	d
min	src/partitioned_counter.c	13;"	d	file:
min	src/taf.cc	230;"	d	file:
min_key	external/splinterdb/src/btree.h	/^   key           min_key;$/;"	m	struct:btree_iterator
min_key	external/splinterdb/src/trunk.h	/^   key_buffer      min_key;$/;"	m	struct:trunk_range_iterator
min_latency	external/splinterdb/tests/functional/ycsb_test.c	/^min_latency(latency_table table)$/;"	f
min_payload_size	external/splinterdb/tests/functional/test.h	/^   uint64       min_payload_size;$/;"	m	struct:test_message_generator
min_range_length	external/splinterdb/tests/functional/splinter_test.c	/^   uint64             min_range_length;$/;"	m	struct:test_splinter_thread_params	file:
min_range_length	external/splinterdb/tests/functional/splinter_test.c	/^   uint64      min_range_length;$/;"	m	struct:trunk_range_perf_params	file:
mini	external/splinterdb/src/btree.h	/^   mini_allocator mini;$/;"	m	struct:btree_pack_req
mini	external/splinterdb/src/memtable.h	/^   mini_allocator          mini;$/;"	m	struct:memtable
mini	external/splinterdb/src/shard_log.h	/^   mini_allocator        mini;$/;"	m	struct:shard_log
mini	external/splinterdb/src/trunk.h	/^   mini_allocator mini;$/;"	m	struct:trunk_handle
mini	external/splinterdb/tests/unit/btree_stress_test.c	/^   mini_allocator  *mini;$/;"	m	struct:insert_thread_params	file:
mini_alloc	external/splinterdb/src/mini_allocator.c	/^mini_alloc(mini_allocator *mini,$/;"	f
mini_allocator	external/splinterdb/src/mini_allocator.h	/^typedef struct mini_allocator {$/;"	s
mini_allocator	external/splinterdb/src/mini_allocator.h	/^} mini_allocator;$/;"	t	typeref:struct:mini_allocator
mini_allocator_get_new_extent	external/splinterdb/src/mini_allocator.c	/^mini_allocator_get_new_extent(mini_allocator *mini, uint64 *addr)$/;"	f	file:
mini_append_entry	external/splinterdb/src/mini_allocator.c	/^mini_append_entry(mini_allocator *mini,$/;"	f	file:
mini_block_dec_ref	external/splinterdb/src/mini_allocator.c	/^mini_block_dec_ref(cache *cc, uint64 meta_head)$/;"	f
mini_dealloc_extent	external/splinterdb/src/mini_allocator.c	/^mini_dealloc_extent(cache *cc, page_type type, uint64 base_addr, void *out)$/;"	f	file:
mini_deinit	external/splinterdb/src/mini_allocator.c	/^mini_deinit(cache *cc, uint64 meta_head, page_type type, bool32 pinned)$/;"	f
mini_destroy_unused	external/splinterdb/src/mini_allocator.c	/^mini_destroy_unused(mini_allocator *mini)$/;"	f
mini_for_each_fn	external/splinterdb/src/mini_allocator.c	/^typedef bool32 (*mini_for_each_fn)(cache    *cc,$/;"	t	file:
mini_full_lock_meta_tail	external/splinterdb/src/mini_allocator.c	/^mini_full_lock_meta_tail(mini_allocator *mini)$/;"	f	file:
mini_full_unlock_meta_page	external/splinterdb/src/mini_allocator.c	/^mini_full_unlock_meta_page(mini_allocator *mini, page_handle *meta_page)$/;"	f	file:
mini_get_claim_meta_page	external/splinterdb/src/mini_allocator.c	/^mini_get_claim_meta_page(cache *cc, uint64 meta_addr, page_type type)$/;"	f	file:
mini_get_next_meta_addr	external/splinterdb/src/mini_allocator.c	/^mini_get_next_meta_addr(page_handle *meta_page)$/;"	f	file:
mini_init	external/splinterdb/src/mini_allocator.c	/^mini_init(mini_allocator *mini,$/;"	f
mini_init_meta_page	external/splinterdb/src/mini_allocator.c	/^mini_init_meta_page(mini_allocator *mini, page_handle *meta_page)$/;"	f	file:
mini_keyed_append_entry	external/splinterdb/src/mini_allocator.c	/^mini_keyed_append_entry(mini_allocator *mini,$/;"	f	file:
mini_keyed_count_extents	external/splinterdb/src/mini_allocator.c	/^mini_keyed_count_extents(cache *cc, page_type type, uint64 base_addr, void *out)$/;"	f	file:
mini_keyed_dec_ref	external/splinterdb/src/mini_allocator.c	/^mini_keyed_dec_ref(cache       *cc,$/;"	f
mini_keyed_dec_ref_extent	external/splinterdb/src/mini_allocator.c	/^mini_keyed_dec_ref_extent(cache    *cc,$/;"	f	file:
mini_keyed_extent_count	external/splinterdb/src/mini_allocator.c	/^mini_keyed_extent_count(cache       *cc,$/;"	f
mini_keyed_for_each	external/splinterdb/src/mini_allocator.c	/^mini_keyed_for_each(cache           *cc,$/;"	f	file:
mini_keyed_for_each_self_exclusive	external/splinterdb/src/mini_allocator.c	/^mini_keyed_for_each_self_exclusive(cache           *cc,$/;"	f	file:
mini_keyed_inc_ref	external/splinterdb/src/mini_allocator.c	/^mini_keyed_inc_ref(cache       *cc,$/;"	f
mini_keyed_inc_ref_extent	external/splinterdb/src/mini_allocator.c	/^mini_keyed_inc_ref_extent(cache    *cc,$/;"	f	file:
mini_keyed_print	external/splinterdb/src/mini_allocator.c	/^mini_keyed_print(cache       *cc,$/;"	f
mini_lock_batch_get_next_addr	external/splinterdb/src/mini_allocator.c	/^mini_lock_batch_get_next_addr(mini_allocator *mini, uint64 batch)$/;"	f	file:
mini_meta_hdr	external/splinterdb/src/mini_allocator.c	/^typedef struct ONDISK mini_meta_hdr {$/;"	s	file:
mini_meta_hdr	external/splinterdb/src/mini_allocator.c	/^} mini_meta_hdr;$/;"	t	typeref:struct:mini_meta_hdr	file:
mini_meta_tail	external/splinterdb/src/mini_allocator.h	/^mini_meta_tail(mini_allocator *mini)$/;"	f
mini_num_entries	external/splinterdb/src/mini_allocator.c	/^mini_num_entries(page_handle *meta_page)$/;"	f	file:
mini_num_extents	external/splinterdb/src/mini_allocator.h	/^mini_num_extents(mini_allocator *mini)$/;"	f
mini_prefetch_extent	external/splinterdb/src/mini_allocator.c	/^mini_prefetch_extent(cache *cc, page_type type, uint64 base_addr, void *out)$/;"	f	file:
mini_release	external/splinterdb/src/mini_allocator.c	/^mini_release(mini_allocator *mini, key end_key)$/;"	f
mini_set_next_meta_addr	external/splinterdb/src/mini_allocator.c	/^mini_set_next_meta_addr(mini_allocator *mini,$/;"	f	file:
mini_unblock_dec_ref	external/splinterdb/src/mini_allocator.c	/^mini_unblock_dec_ref(cache *cc, uint64 meta_head)$/;"	f
mini_unget_unclaim_meta_page	external/splinterdb/src/mini_allocator.c	/^mini_unget_unclaim_meta_page(cache *cc, page_handle *meta_page)$/;"	f	file:
mini_unkeyed_append_entry	external/splinterdb/src/mini_allocator.c	/^mini_unkeyed_append_entry(mini_allocator *mini,$/;"	f	file:
mini_unkeyed_dec_ref	external/splinterdb/src/mini_allocator.c	/^mini_unkeyed_dec_ref(cache *cc, uint64 meta_head, page_type type, bool32 pinned)$/;"	f
mini_unkeyed_for_each	external/splinterdb/src/mini_allocator.c	/^mini_unkeyed_for_each(cache           *cc,$/;"	f	file:
mini_unkeyed_inc_ref	external/splinterdb/src/mini_allocator.c	/^mini_unkeyed_inc_ref(cache *cc, uint64 meta_head)$/;"	f
mini_unkeyed_prefetch	external/splinterdb/src/mini_allocator.c	/^mini_unkeyed_prefetch(cache *cc, page_type type, uint64 meta_head)$/;"	f
mini_unkeyed_print	external/splinterdb/src/mini_allocator.c	/^mini_unkeyed_print(cache *cc, uint64 meta_head, page_type type)$/;"	f
mini_unlock_batch_set_next_addr	external/splinterdb/src/mini_allocator.c	/^mini_unlock_batch_set_next_addr(mini_allocator *mini,$/;"	f	file:
mini_wait_for_blockers	external/splinterdb/src/mini_allocator.c	/^mini_wait_for_blockers(cache *cc, uint64 meta_head)$/;"	f	file:
minirun_existed	include/gqf.h	/^		int minirun_existed;$/;"	m	struct:qf_insert_result_t
minirun_id	include/gqf.h	/^		uint64_t minirun_id;$/;"	m	struct:qf_insert_result_t
minirun_rank	include/gqf.h	/^		uint64_t minirun_rank; \/\/ the rank of the item among items with the same quotient and remainder (for use in the ll_table)$/;"	m	struct:qf_query_result_t
mix	other_filters/acf/src/hashutil.cc	5;"	d	file:
mix	other_filters/acfsim/src/hashutil.cc	5;"	d	file:
mix	other_filters/cf/src/hashutil.cc	5;"	d	file:
mobileNavToggle	external/splinterdb/docs/site/themes/template/assets/js/main.js	/^function mobileNavToggle() {$/;"	f
mobileNavToggle	external/splinterdb/docs/site/themes/template/static/js/main.js	/^function mobileNavToggle() {$/;"	f
mode	other_filters/taf/src/splinter_taf.h	/^  int mode;            \/\/ mode flag: handle non-adaptive case$/;"	m	struct:taf_t
mode	other_filters/taf/src/taf.h	/^  int mode;            \/\/ mode flag: handle non-adaptive case$/;"	m	struct:taf_t
mode	other_filters/taf/src/taf_sim.h	/^  int mode;            \/\/ mode flag: handle non-adaptive case$/;"	m	struct:taf_t
mode	src/taf.cc	/^  int mode;            \/\/ mode flag: handle non-adaptive case$/;"	m	struct:taf_t	file:
modify_metadata	other_filters/cqf/src/gqf.c	/^static void modify_metadata(pc_t *metadata, int cnt)$/;"	f	file:
modify_metadata	src/gqf.c	/^static void modify_metadata(pc_t *metadata, int cnt)$/;"	f	file:
modify_metadata	src/gqf_backup.c	/^static void modify_metadata(pc_t *metadata, int cnt)$/;"	f	file:
mono	external/splinterdb/tests/functional/cache_test.c	/^      } mono;$/;"	m	union:__anon47::__anon49	typeref:struct:__anon47::__anon49::__anon50	file:
most_of_entry_is_on_left_side	external/splinterdb/src/btree.c	/^most_of_entry_is_on_left_side(uint64 total_bytes,$/;"	f	file:
msg	external/splinterdb/src/btree_private.h	/^   } msg;$/;"	m	struct:leaf_incorporate_spec	typeref:union:leaf_incorporate_spec::__anon12
msg_end	external/splinterdb/tests/unit/main.c	/^msg_end(void)$/;"	f	file:
msg_level	external/splinterdb/tests/unit/ctest.h	/^typedef enum msg_level {$/;"	g
msg_level	external/splinterdb/tests/unit/ctest.h	/^} msg_level;$/;"	t	typeref:enum:msg_level
msg_start	external/splinterdb/tests/unit/main.c	/^msg_start(const char *color, const char *title)$/;"	f	file:
msggen	external/splinterdb/tests/functional/btree_test.c	/^   test_message_generator *msggen;$/;"	m	struct:test_btree_config	file:
mt	external/splinterdb/src/memtable.h	/^   memtable mt[];$/;"	m	struct:memtable_context
mt_args	external/splinterdb/src/trunk.h	/^   trunk_memtable_args       mt_args;$/;"	m	struct:trunk_compacted_memtable
mt_cfg	external/splinterdb/src/trunk.h	/^   memtable_config mt_cfg;$/;"	m	struct:trunk_config
mt_cfg	external/splinterdb/tests/functional/btree_test.c	/^   memtable_config        *mt_cfg;$/;"	m	struct:test_btree_config	file:
mt_ctxt	external/splinterdb/src/trunk.h	/^   memtable_context *mt_ctxt;$/;"	m	struct:trunk_handle
mt_ctxt	external/splinterdb/tests/functional/btree_test.c	/^   memtable_context  *mt_ctxt;$/;"	m	struct:test_memtable_context	file:
mt_reader	external/splinterdb/tests/functional/cache_test.c	/^   bool32             mt_reader;               \/\/ IN readers are MT$/;"	m	struct:__anon54	file:
multi_threaded_insertion	other_filters/cqf/src/test_threadsafe.c	/^void multi_threaded_insertion(insert_args args[], int tcnt)$/;"	f
multi_threaded_insertion	src/test_threadsafe.c	/^void multi_threaded_insertion(insert_args args[], int tcnt)$/;"	f
multiply_	other_filters/acf/src/hashutil.h	/^  unsigned __int128 multiply_, add_;$/;"	m	class:cuckoofilter::TwoIndependentMultiplyShift
multiply_	other_filters/acfsim/src/hashutil.h	/^  unsigned __int128 multiply_, add_;$/;"	m	class:cuckoofilter::TwoIndependentMultiplyShift
multiply_	other_filters/cf/src/hashutil.h	/^  unsigned __int128 multiply_, add_;$/;"	m	class:cuckoofilter::TwoIndependentMultiplyShift
mutex	external/splinterdb/src/platform_linux/platform_types.h	/^   pthread_mutex_t mutex;$/;"	m	struct:__anon29
mutex	external/splinterdb/src/srq.h	/^   platform_mutex mutex;$/;"	m	struct:srq
mycmp	other_filters/acf/example/test_splinter_adversarial.cc	/^int mycmp(const void *a, const void *b) {$/;"	f
mycmp	other_filters/acfsim/example/test_splinter_adversarial.cc	/^int mycmp(const void *a, const void *b) {$/;"	f
mycmp	other_filters/cf/example/test_splinter_adversarial.cc	/^int mycmp(const void *a, const void *b) {$/;"	f
mycmp	other_filters/cf/example/test_splinter_zipfian_histogram.cc	/^int mycmp(const void *a, const void *b) {$/;"	f
myrandom	other_filters/cqf/src/bm.c	/^static long myrandom()$/;"	f	file:
myrandom	other_filters/cqf/src/zipf.c	/^static long myrandom()$/;"	f	file:
myrandom	src/bm.c	/^static long myrandom()$/;"	f	file:
myrandom	src/zipf.c	/^static long myrandom()$/;"	f	file:
mysrandom	other_filters/cqf/src/bm.c	/^static void mysrandom (unsigned int seed) {$/;"	f	file:
mysrandom	other_filters/cqf/src/zipf.c	/^static void mysrandom (unsigned int seed) {$/;"	f	file:
mysrandom	src/bm.c	/^static void mysrandom (unsigned int seed) {$/;"	f	file:
mysrandom	src/zipf.c	/^static void mysrandom (unsigned int seed) {$/;"	f	file:
naive_range_delete	external/splinterdb/tests/unit/splinterdb_stress_test.c	/^naive_range_delete(const splinterdb *kvsb, slice start_key, uint32 count)$/;"	f	file:
name	external/splinterdb/tests/functional/ycsb_test.c	/^   char            *name;$/;"	m	struct:ycsb_phase	file:
nblocks	include/gqf_int.h	/^		uint64_t nblocks;$/;"	m	struct:quotient_filter_metadata
nblocks	other_filters/cqf/include/gqf_int.h	/^		uint64_t nblocks;$/;"	m	struct:quotient_filter_metadata
nblocks	other_filters/taf/src/exaf.h	/^  size_t nblocks;               \/* nslots\/64 *\/$/;"	m	struct:exaf_t
nblocks	other_filters/taf/src/rsqf.h	/^  size_t nblocks;               \/* nslots\/64 *\/$/;"	m	struct:rsqf_t
nblocks	other_filters/taf/src/splinter_taf.h	/^  size_t nblocks;               \/* nslots\/64 *\/$/;"	m	struct:taf_t
nblocks	other_filters/taf/src/taf.h	/^  size_t nblocks;               \/* nslots\/64 *\/$/;"	m	struct:taf_t
nblocks	other_filters/taf/src/taf_sim.h	/^  size_t nblocks;               \/* nslots\/64 *\/$/;"	m	struct:taf_t
nblocks	other_filters/taf/src/utaf.h	/^  size_t nblocks;               \/* nslots\/64 *\/$/;"	m	struct:utaf_t
nblocks	src/taf.cc	/^  size_t nblocks;               \/* nslots\/64 *\/$/;"	m	struct:taf_t	file:
ndistinct_elts	include/gqf_int.h	/^		uint64_t ndistinct_elts;$/;"	m	struct:quotient_filter_metadata
ndistinct_elts	other_filters/cqf/include/gqf_int.h	/^		uint64_t ndistinct_elts;$/;"	m	struct:quotient_filter_metadata
nearest_pow_of_2	other_filters/taf/src/macros.h	/^static inline size_t nearest_pow_of_2(size_t v) {$/;"	f
nearest_pow_of_2	src/taf.cc	/^static inline size_t nearest_pow_of_2(size_t v) {$/;"	f	file:
neg_queries	external/splinterdb/tests/functional/ycsb_test.c	/^   latency_table neg_queries;$/;"	m	struct:latency_tables	file:
nelts	include/gqf_int.h	/^		uint64_t nelts;$/;"	m	struct:quotient_filter_metadata
nelts	other_filters/cqf/include/gqf_int.h	/^		uint64_t nelts;$/;"	m	struct:quotient_filter_metadata
nelts	other_filters/taf/src/exaf.h	/^  size_t nelts;                 \/* number of elements stored  *\/$/;"	m	struct:exaf_t
nelts	other_filters/taf/src/rsqf.h	/^  size_t nelts;                 \/* number of elements stored  *\/$/;"	m	struct:rsqf_t
nelts	other_filters/taf/src/splinter_taf.h	/^  size_t nelts;                 \/* number of elements stored  *\/$/;"	m	struct:taf_t
nelts	other_filters/taf/src/taf.h	/^  size_t nelts;                 \/* number of elements stored  *\/$/;"	m	struct:taf_t
nelts	other_filters/taf/src/taf_sim.h	/^  size_t nelts;                 \/* number of elements stored  *\/$/;"	m	struct:taf_t
nelts	other_filters/taf/src/utaf.h	/^  size_t nelts;                 \/* number of elements stored  *\/$/;"	m	struct:utaf_t
nelts	src/taf.cc	/^  size_t nelts;                 \/* number of elements stored  *\/$/;"	m	struct:taf_t	file:
net_diskstats	external/splinterdb/scripts/run_ycsb.py	/^                    net_diskstats = tuple($/;"	v
new_exaf	other_filters/taf/src/exaf.c	/^ExAF *new_exaf(size_t n) {$/;"	f
new_message	external/splinterdb/src/btree_private.h	/^      message           new_message; \/\/ old_entry_state == ENTRY_DID_NOT_EXIST$/;"	m	union:leaf_incorporate_spec::__anon12
new_rsqf	other_filters/taf/src/rsqf.c	/^RSQF *new_rsqf(size_t n) {$/;"	f
new_taf	other_filters/taf/src/splinter_taf.c	/^TAF *new_taf(size_t n) {$/;"	f
new_taf	other_filters/taf/src/taf.c	/^TAF *new_taf(size_t n) {$/;"	f
new_taf	other_filters/taf/src/taf.cc	/^TAF *new_taf(size_t n) {$/;"	f
new_taf	other_filters/taf/src/taf_sim.c	/^TAF *new_taf(size_t n) {$/;"	f
new_taf	src/taf.cc	/^TAF *new_taf(size_t n) {$/;"	f
new_utaf	other_filters/taf/src/utaf.c	/^FullTAF *new_utaf(size_t n) {$/;"	f
next	external/splinterdb/src/iterator.h	/^   iterator_step_fn  next;$/;"	m	struct:iterator_ops
next	external/splinterdb/src/task.h	/^   struct task *next;$/;"	m	struct:task	typeref:struct:task::task
next	external/splinterdb/tests/unit/splinter_shmem_test.c	/^   struct shm_memfrag *next;$/;"	m	struct:shm_memfrag	typeref:struct:shm_memfrag::shm_memfrag	file:
next	include/ll_table.h	/^	struct ll_list *next;$/;"	m	struct:ll_list	typeref:struct:ll_list::ll_list
next	include/ll_table.h	/^	struct ll_node *next;$/;"	m	struct:ll_node	typeref:struct:ll_node::ll_node
next	other_filters/acf/example/test.cc	/^	struct _set_node *next;$/;"	m	struct:_set_node	typeref:struct:_set_node::_set_node	file:
next	other_filters/acf/example/test_fill_varied_throughput.cc	/^	struct _set_node *next;$/;"	m	struct:_set_node	typeref:struct:_set_node::_set_node	file:
next	other_filters/acf/example/test_fp.cc	/^	struct _set_node *next;$/;"	m	struct:_set_node	typeref:struct:_set_node::_set_node	file:
next	other_filters/acf/example/test_micro.cc	/^	struct _set_node *next;$/;"	m	struct:_set_node	typeref:struct:_set_node::_set_node	file:
next	other_filters/acf/src/cuckoofilter.h	/^        struct _set_node *next;$/;"	m	struct:_set_node	typeref:struct:_set_node::_set_node
next	other_filters/acfsim/example/test.cc	/^	struct _set_node *next;$/;"	m	struct:_set_node	typeref:struct:_set_node::_set_node	file:
next	other_filters/acfsim/example/test_fill_varied_throughput.cc	/^	struct _set_node *next;$/;"	m	struct:_set_node	typeref:struct:_set_node::_set_node	file:
next	other_filters/acfsim/example/test_fp.cc	/^	struct _set_node *next;$/;"	m	struct:_set_node	typeref:struct:_set_node::_set_node	file:
next	other_filters/acfsim/example/test_micro.cc	/^	struct _set_node *next;$/;"	m	struct:_set_node	typeref:struct:_set_node::_set_node	file:
next	other_filters/acfsim/src/cuckoofilter.h	/^        struct _set_node *next;$/;"	m	struct:_set_node	typeref:struct:_set_node::_set_node
next	other_filters/cf/example/test.cc	/^        struct _set_node *next;$/;"	m	struct:_set_node	typeref:struct:_set_node::_set_node	file:
next	other_filters/cf/example/test_micro_throughput.cc	/^        struct _set_node *next;$/;"	m	struct:_set_node	typeref:struct:_set_node::_set_node	file:
next	other_filters/cqf/src/bm.c	/^	iterator_next_op next;$/;"	m	struct:filter	file:
next	other_filters/cqf/src/test_micro_super.c	/^        struct _set_node *next;$/;"	m	struct:_set_node	typeref:struct:_set_node::_set_node	file:
next	other_filters/cqf/src/test_micro_throughput.c	/^        struct _set_node *next;$/;"	m	struct:_set_node	typeref:struct:_set_node::_set_node	file:
next	other_filters/cqf/src/test_parallel.c	/^        struct _set_node *next;$/;"	m	struct:_set_node	typeref:struct:_set_node::_set_node	file:
next	other_filters/taf/src/set.h	/^  struct setnode_t* next;$/;"	m	struct:setnode_t	typeref:struct:setnode_t::setnode_t
next	src/bm.c	/^	iterator_next_op next;$/;"	m	struct:filter	file:
next	src/taf.cc	/^  struct setnode_t* next;$/;"	m	struct:setnode_t	typeref:struct:setnode_t::setnode_t	file:
next	src/test_bulk.c	/^	struct _ilist *next;$/;"	m	struct:_ilist	typeref:struct:_ilist::_ilist	file:
next	src/test_deletions.c	/^	struct _ilist *next;$/;"	m	struct:_ilist	typeref:struct:_ilist::_ilist	file:
next	src/test_ext_inc_throughput.cc	/^        struct _set_node *next;$/;"	m	struct:_set_node	typeref:struct:_set_node::_set_node	file:
next	src/test_ext_throughput.cc	/^        struct _set_node *next;$/;"	m	struct:_set_node	typeref:struct:_set_node::_set_node	file:
next	src/test_fill_varied_throughput.c	/^	struct _ilist *next;$/;"	m	struct:_ilist	typeref:struct:_ilist::_ilist	file:
next	src/test_hash_accesses.c	/^	struct _ilist *next;$/;"	m	struct:_ilist	typeref:struct:_ilist::_ilist	file:
next	src/test_lltable_throughput.c	/^        struct _set_node *next;$/;"	m	struct:_set_node	typeref:struct:_set_node::_set_node	file:
next	src/test_merge.c	/^	struct _ilist *next;$/;"	m	struct:_ilist	typeref:struct:_ilist::_ilist	file:
next	src/test_micro_throughput.c	/^        struct _set_node *next;$/;"	m	struct:_set_node	typeref:struct:_set_node::_set_node	file:
next	src/test_micro_write.c	/^        struct _set_node *next;$/;"	m	struct:_set_node	typeref:struct:_set_node::_set_node	file:
next	src/test_near_full.c	/^	struct _ilist *next;$/;"	m	struct:_ilist	typeref:struct:_ilist::_ilist	file:
next	src/test_progress.c	/^        struct _set_node *next;$/;"	m	struct:_set_node	typeref:struct:_set_node::_set_node	file:
next	src/test_throughput_old.c	/^	struct _ilist *next;$/;"	m	struct:_ilist	typeref:struct:_ilist::_ilist	file:
next	src/test_unit.c	/^	struct _ht_node* next;$/;"	m	struct:_ht_node	typeref:struct:_ht_node::_ht_node	file:
next	src/test_unit_old.c	/^	struct _ht_node* next;$/;"	m	struct:_ht_node	typeref:struct:_ht_node::_ht_node	file:
next	src/test_unit_old.c	/^	struct _ilist *next;$/;"	m	struct:_ilist	typeref:struct:_ilist::_ilist	file:
next	src/test_whitelist.c	/^	struct _ilist *next;$/;"	m	struct:_ilist	typeref:struct:_ilist::_ilist	file:
next_addr	external/splinterdb/src/btree_private.h	/^   uint64      next_addr;$/;"	m	struct:btree_hdr
next_addr	external/splinterdb/src/mini_allocator.h	/^   volatile uint64 next_addr[MINI_MAX_BATCHES];$/;"	m	struct:mini_allocator
next_entry	external/splinterdb/src/btree_private.h	/^   node_offset next_entry;$/;"	m	struct:btree_hdr
next_extent	external/splinterdb/src/mini_allocator.h	/^   uint64          next_extent[MINI_MAX_BATCHES];$/;"	m	struct:mini_allocator
next_extent_addr	external/splinterdb/src/btree_private.h	/^   uint64      next_extent_addr;$/;"	m	struct:btree_hdr
next_extent_addr	external/splinterdb/src/shard_log.h	/^   uint64      next_extent_addr;$/;"	m	struct:shard_log_hdr
next_history_record	external/splinterdb/src/clockcache.h	/^   int            next_history_record;$/;"	m	struct:clockcache_entry
next_key_equal	external/splinterdb/src/merge.h	/^   bool32    next_key_equal;$/;"	m	struct:ordered_iterator
next_meta_addr	external/splinterdb/src/mini_allocator.c	/^   uint64 next_meta_addr;$/;"	m	struct:mini_meta_hdr	file:
next_node_id	external/splinterdb/src/trunk.c	/^   uint64      next_node_id;$/;"	m	struct:trunk_super_block	file:
next_node_id	external/splinterdb/src/trunk.h	/^   uint64                next_node_id;$/;"	m	struct:trunk_handle
next_op	external/splinterdb/tests/functional/ycsb_test.c	/^   uint64        next_op;$/;"	m	struct:ycsb_log_params	file:
next_slot	other_filters/cqf/src/gqf.c	/^static inline uint64_t next_slot(QF *qf, uint64_t current) $/;"	f	file:
next_slot	src/gqf.c	/^static inline uint64_t next_slot(QF *qf, uint64_t current) \/\/ EDIT: change schema for determining extensions \/\/ EDIT2: I don't remember what this means$/;"	f	file:
next_slot	src/gqf_backup.c	/^static inline uint64_t next_slot(QF *qf, uint64_t current) \/\/ EDIT: change schema for determining extensions$/;"	f	file:
nextoutput	other_filters/cqf/src/bm.c	/^	uint64_t nextoutput;$/;"	m	struct:app_pregen_state	file:
nextoutput	other_filters/cqf/src/bm.c	/^	uint64_t nextoutput;$/;"	m	struct:uniform_pregen_state	file:
nextoutput	other_filters/cqf/src/bm.c	/^	uint64_t nextoutput;$/;"	m	struct:zipfian_pregen_state	file:
nextoutput	src/bm.c	/^	uint64_t nextoutput;$/;"	m	struct:app_pregen_state	file:
nextoutput	src/bm.c	/^	uint64_t nextoutput;$/;"	m	struct:uniform_pregen_state	file:
nextoutput	src/bm.c	/^	uint64_t nextoutput;$/;"	m	struct:zipfian_pregen_state	file:
nf_search_skipped	external/splinterdb/src/platform_linux/shmem.c	/^   size_t nf_search_skipped;$/;"	m	struct:shminfo_usage_stats	file:
nfrees	external/splinterdb/src/platform_linux/shmem.c	/^   size_t nfrees;           \/\/ # of calls to free memory$/;"	m	struct:shminfo_usage_stats	file:
nfrees_last_frag	external/splinterdb/src/platform_linux/shmem.c	/^   size_t nfrees_last_frag; \/\/ Freed last small-fragment$/;"	m	struct:shminfo_usage_stats	file:
nightly_async_perf_tests	external/splinterdb/test.sh	/^function nightly_async_perf_tests() {$/;"	f
nightly_cache_perf_tests	external/splinterdb/test.sh	/^function nightly_cache_perf_tests() {$/;"	f
nightly_functionality_stress_tests	external/splinterdb/test.sh	/^function nightly_functionality_stress_tests() {$/;"	f
nightly_sync_perf_tests	external/splinterdb/test.sh	/^function nightly_sync_perf_tests() {$/;"	f
nightly_test_limitations	external/splinterdb/test.sh	/^function nightly_test_limitations() {$/;"	f
nightly_unit_stress_tests	external/splinterdb/test.sh	/^function nightly_unit_stress_tests() {$/;"	f
nkeys	external/splinterdb/tests/functional/test_splinter_shadow.h	/^   uint64        nkeys;$/;"	m	struct:test_splinter_shadow_array
nlarge_frags_found_in_use	external/splinterdb/src/platform_linux/shmem.c	/^   int    nlarge_frags_found_in_use;$/;"	m	struct:shminfo_usage_stats	file:
nlarge_frags_inuse	external/splinterdb/src/platform_linux/shmem.c	/^   uint32 nlarge_frags_inuse;$/;"	m	struct:shminfo_usage_stats	file:
nlarge_frags_inuse_HWM	external/splinterdb/src/platform_linux/shmem.c	/^   uint32 nlarge_frags_inuse_HWM;$/;"	m	struct:shminfo_usage_stats	file:
nlarge_frags_tracked	external/splinterdb/src/platform_linux/shmem.c	/^   uint32 nlarge_frags_tracked;$/;"	m	struct:shminfo_usage_stats	file:
nlogs	external/splinterdb/tests/functional/ycsb_test.c	/^   uint64           nlogs;$/;"	m	struct:ycsb_phase	file:
noccupied_slots	include/gqf_int.h	/^		uint64_t noccupied_slots;$/;"	m	struct:quotient_filter_metadata
noccupied_slots	other_filters/cqf/include/gqf_int.h	/^		uint64_t noccupied_slots;$/;"	m	struct:quotient_filter_metadata
node	external/splinterdb/src/btree.h	/^   btree_node        node;       \/\/ Current node$/;"	m	struct:btree_async_ctxt
nodeCmp	external/splinterdb/tests/functional/avlTree.h	/^   AvlTreeNodeComparator nodeCmp;$/;"	m	struct:AvlTree
node_fn	external/splinterdb/src/trunk.c	/^typedef bool32 (*node_fn)(trunk_handle *spl, uint64 addr, void *arg);$/;"	t	file:
node_id	external/splinterdb/src/trunk.c	/^   uint64                node_id;$/;"	m	struct:trunk_compact_bundle_req	file:
node_id	external/splinterdb/src/trunk.c	/^   uint64 node_id;$/;"	m	struct:trunk_hdr	file:
node_offset	external/splinterdb/src/btree_private.h	/^typedef uint16 node_offset; \/\/  So we can make this bigger for bigger nodes.$/;"	t
nodes	external/splinterdb/tests/functional/test_splinter_shadow.h	/^   test_splinter_shadow_node *nodes;$/;"	m	struct:test_splinter_shadow_tree
nodes_buffer	external/splinterdb/tests/functional/test_splinter_shadow.h	/^   buffer_handle              nodes_buffer;$/;"	m	struct:test_splinter_shadow_tree
noexcept	other_filters/acf/src/simd-block.h	/^  bool Find(const uint64_t key) const noexcept;$/;"	m	class:SimdBlockFilter
noexcept	other_filters/acf/src/simd-block.h	/^  static __m256i MakeMask(const uint32_t hash) noexcept;$/;"	m	class:SimdBlockFilter
noexcept	other_filters/acf/src/simd-block.h	/^  void Add(const uint64_t key) noexcept;$/;"	m	class:SimdBlockFilter
noexcept	other_filters/acf/src/simd-block.h	/^  ~SimdBlockFilter() noexcept;$/;"	m	class:SimdBlockFilter
noexcept	other_filters/acfsim/src/simd-block.h	/^  bool Find(const uint64_t key) const noexcept;$/;"	m	class:SimdBlockFilter
noexcept	other_filters/acfsim/src/simd-block.h	/^  static __m256i MakeMask(const uint32_t hash) noexcept;$/;"	m	class:SimdBlockFilter
noexcept	other_filters/acfsim/src/simd-block.h	/^  void Add(const uint64_t key) noexcept;$/;"	m	class:SimdBlockFilter
noexcept	other_filters/acfsim/src/simd-block.h	/^  ~SimdBlockFilter() noexcept;$/;"	m	class:SimdBlockFilter
noexcept	other_filters/cf/src/simd-block.h	/^  bool Find(const uint64_t key) const noexcept;$/;"	m	class:SimdBlockFilter
noexcept	other_filters/cf/src/simd-block.h	/^  static __m256i MakeMask(const uint32_t hash) noexcept;$/;"	m	class:SimdBlockFilter
noexcept	other_filters/cf/src/simd-block.h	/^  void Add(const uint64_t key) noexcept;$/;"	m	class:SimdBlockFilter
noexcept	other_filters/cf/src/simd-block.h	/^  ~SimdBlockFilter() noexcept;$/;"	m	class:SimdBlockFilter
nop_tuple_func	external/splinterdb/tests/functional/splinter_test.c	/^nop_tuple_func(key tuple_key, message value, void *arg)$/;"	f	file:
nop_tuple_func	external/splinterdb/tests/functional/ycsb_test.c	/^nop_tuple_func(key tuple_key, message value, void *arg)$/;"	f	file:
npages_per_thread	external/splinterdb/tests/functional/io_apis_test.c	/^npages_per_thread(io_test_fn_args *io_test_param, int nthreads)$/;"	f	file:
nslots	include/gqf_int.h	/^		uint64_t nslots;$/;"	m	struct:quotient_filter_metadata
nslots	other_filters/cqf/include/gqf_int.h	/^		uint64_t nslots;$/;"	m	struct:quotient_filter_metadata
nslots	other_filters/taf/src/exaf.h	/^  size_t nslots;                \/* number of slots available (2^q) *\/$/;"	m	struct:exaf_t
nslots	other_filters/taf/src/rsqf.h	/^  size_t nslots;                \/* number of slots available (2^q) *\/$/;"	m	struct:rsqf_t
nslots	other_filters/taf/src/splinter_taf.h	/^  size_t nslots;                \/* number of slots available (2^q) *\/$/;"	m	struct:taf_t
nslots	other_filters/taf/src/taf.h	/^  size_t nslots;                \/* number of slots available (2^q) *\/$/;"	m	struct:taf_t
nslots	other_filters/taf/src/taf_sim.h	/^  size_t nslots;                \/* number of slots available (2^q) *\/$/;"	m	struct:taf_t
nslots	other_filters/taf/src/utaf.h	/^  size_t nslots;                \/* number of slots available (2^q) *\/$/;"	m	struct:utaf_t
nslots	src/taf.cc	/^  size_t nslots;                \/* number of slots available (2^q) *\/$/;"	m	struct:taf_t	file:
nslots	test/test_range_filter.c	/^const uint64_t nslots = 256;$/;"	v
nthreads	external/splinterdb/tests/functional/ycsb_test.c	/^   uint64   nthreads;$/;"	m	struct:ycsb_log_params	file:
nullary	external/splinterdb/tests/unit/ctest.h	/^   ctest_nullary_run_func nullary;$/;"	m	union:ctest_run_func_union
num	external/splinterdb/src/platform_linux/platform_types.h	/^   unsigned long num; \/\/ no. of elements$/;"	m	struct:__anon33
num	external/splinterdb/tests/functional/avlTree.h	/^   unsigned      num;$/;"	m	struct:__anon60
num	other_filters/cqf/src/bm.c	/^	int num;$/;"	m	struct:app_params	file:
num	other_filters/cqf/src/zipf.c	/^    long num;                    \/\/   How many elements are represented by this bucket$/;"	m	struct:zpair	file:
num	src/bm.c	/^	int num;$/;"	m	struct:app_params	file:
num	src/zipf.c	/^    long num;                    \/\/   How many elements are represented by this bucket$/;"	m	struct:zpair	file:
numKeys	external/splinterdb/tests/functional/test_splinter_shadow.h	/^   uint64                     numKeys;$/;"	m	struct:test_splinter_shadow_tree
numPreAllocatedNodes	external/splinterdb/tests/functional/test_splinter_shadow.h	/^   uint64                     numPreAllocatedNodes;$/;"	m	struct:test_splinter_shadow_tree
num_background_threads	external/splinterdb/src/task.h	/^   uint64 num_background_threads[NUM_TASK_TYPES];$/;"	m	struct:task_system_config
num_batches	external/splinterdb/src/mini_allocator.h	/^   uint64          num_batches;$/;"	m	struct:mini_allocator
num_branches	external/splinterdb/src/trunk.h	/^   uint64          num_branches;$/;"	m	struct:trunk_range_iterator
num_buckets	external/splinterdb/src/platform_linux/platform_types.h	/^   unsigned int  num_buckets;$/;"	m	struct:__anon33
num_buckets_	other_filters/acf/src/mirroredtable.h	/^		size_t num_buckets_;$/;"	m	class:cuckoofilter::MirroredTable
num_buckets_	other_filters/acf/src/packedtable.h	/^  size_t num_buckets_;$/;"	m	class:cuckoofilter::PackedTable
num_buckets_	other_filters/acf/src/singletable.h	/^  size_t num_buckets_;$/;"	m	class:cuckoofilter::SingleTable
num_buckets_	other_filters/acfsim/src/mirroredtable.h	/^		size_t num_buckets_;$/;"	m	class:cuckoofilter::MirroredTable
num_buckets_	other_filters/acfsim/src/packedtable.h	/^  size_t num_buckets_;$/;"	m	class:cuckoofilter::PackedTable
num_buckets_	other_filters/acfsim/src/singletable.h	/^  size_t num_buckets_;$/;"	m	class:cuckoofilter::SingleTable
num_buckets_	other_filters/cf/src/packedtable.h	/^  size_t num_buckets_;$/;"	m	class:cuckoofilter::PackedTable
num_buckets_	other_filters/cf/src/singletable.h	/^  size_t num_buckets_;$/;"	m	class:cuckoofilter::SingleTable
num_clusters	include/gqf_int.h	/^		uint32_t num_clusters;$/;"	m	struct:quotient_filter_iterator
num_clusters	other_filters/cqf/include/gqf_int.h	/^		uint32_t num_clusters;$/;"	m	struct:quotient_filter_iterator
num_comparisons	external/splinterdb/tests/unit/splinterdb_quick_test.c	/^   uint64      num_comparisons;$/;"	m	struct:__anon63	file:
num_counters	include/partitioned_counter.h	/^	uint32_t num_counters;$/;"	m	struct:partitioned_counter
num_counters	other_filters/cqf/include/partitioned_counter.h	/^	uint32_t num_counters;$/;"	m	struct:partitioned_counter
num_edges	external/splinterdb/src/btree.h	/^   uint32            num_edges[BTREE_MAX_HEIGHT];$/;"	m	struct:btree_pack_req
num_elems	external/splinterdb/src/pcq.h	/^   uint32               num_elems;$/;"	m	struct:__anon34
num_entries	external/splinterdb/src/btree_private.h	/^   table_index num_entries;$/;"	m	struct:btree_hdr
num_entries	external/splinterdb/src/mini_allocator.c	/^   uint32 num_entries;$/;"	m	struct:mini_meta_hdr	file:
num_entries	external/splinterdb/src/shard_log.h	/^   uint16      num_entries;$/;"	m	struct:shard_log_hdr
num_entries	external/splinterdb/src/shard_log.h	/^   uint64            num_entries;$/;"	m	struct:shard_log_iterator
num_entries	external/splinterdb/src/srq.h	/^   uint64         num_entries;$/;"	m	struct:srq
num_entries	external/splinterdb/tests/functional/log_test.c	/^   uint64                  num_entries;$/;"	m	struct:test_log_thread_params	file:
num_extents	external/splinterdb/src/mini_allocator.h	/^   uint64          num_extents;$/;"	m	struct:mini_allocator
num_families	include/ll_table.h	/^	uint64_t num_families;$/;"	m	struct:ll_table
num_fingerprints	external/splinterdb/src/routing_filter.h	/^   uint32 num_fingerprints;$/;"	m	struct:routing_filter
num_found	external/splinterdb/tests/test_common.h	/^   uint64 num_found;$/;"	m	struct:stats_lookup
num_hooks	external/splinterdb/src/task.h	/^   int       num_hooks;$/;"	m	struct:task_system
num_inet_addrs	external/splinterdb/examples/splinterdb_custom_ipv4_addr_sortcmp_example.c	/^int num_inet_addrs = (sizeof(inet_addr_info) \/ sizeof(*inet_addr_info));$/;"	v
num_insert_threads	external/splinterdb/tests/unit/large_inserts_stress_test.c	/^   uint64         num_insert_threads;$/;"	m	struct:__anon62	file:
num_inserted	other_filters/cqf/src/test_parallel.c	/^	uint64_t num_inserted;$/;"	m	struct:__anon1	file:
num_inserted	src/test_driver.c	/^	uint64_t num_inserted;$/;"	m	struct:__anon8	file:
num_inserts	external/splinterdb/tests/config.h	/^   uint64 num_inserts;$/;"	m	struct:master_config
num_inserts	external/splinterdb/tests/functional/test.h	/^   uint64 num_inserts;$/;"	m	struct:test_exec_config
num_inserts	external/splinterdb/tests/unit/large_inserts_stress_test.c	/^   uint64         num_inserts;$/;"	m	struct:__anon62	file:
num_inserts	external/splinterdb/tests/unit/splinterdb_stress_test.c	/^   uint32_t    num_inserts;$/;"	m	struct:__anon66	file:
num_inserts	other_filters/cqf/src/test_parallel.c	/^	size_t num_inserts;$/;"	m	struct:__anon1	file:
num_inserts	src/test_driver.c	/^	size_t num_inserts;$/;"	m	struct:__anon8	file:
num_items_	other_filters/acf/src/cuckoofilter.h	/^				 size_t num_items_;$/;"	m	class:cuckoofilter::CuckooFilter
num_items_	other_filters/acfsim/src/cuckoofilter.h	/^				 size_t num_items_;$/;"	m	class:cuckoofilter::CuckooFilter
num_items_	other_filters/cf/src/cuckoofilter.h	/^  size_t num_items_;$/;"	m	class:cuckoofilter::CuckooFilter
num_keys	include/ll_table.h	/^	uint64_t num_keys;$/;"	m	struct:ll_table
num_kv_bytes	external/splinterdb/src/trunk.c	/^   uint64 num_kv_bytes;$/;"	m	struct:trunk_bundle	file:
num_kv_bytes_bundle	external/splinterdb/src/trunk.c	/^   uint64 num_kv_bytes_bundle; \/\/ # kv bytes for this pivot in bundles$/;"	m	struct:trunk_pivot_data	file:
num_kv_bytes_whole	external/splinterdb/src/trunk.c	/^   uint64 num_kv_bytes_whole;  \/\/ # kv bytes for this pivot in whole branches$/;"	m	struct:trunk_pivot_data	file:
num_kvs	external/splinterdb/src/btree.h	/^   uint32 num_kvs;$/;"	m	struct:btree_pivot_stats
num_latencies	external/splinterdb/tests/functional/ycsb_test.c	/^num_latencies(latency_table table)$/;"	f
num_locks	include/gqf_int.h	/^		uint64_t num_locks;$/;"	m	struct:quotient_filter_runtime_data
num_locks	other_filters/cqf/include/gqf_int.h	/^		uint64_t num_locks;$/;"	m	struct:quotient_filter_runtime_data
num_memtable_bg_threads	external/splinterdb/include/splinterdb/splinterdb.h	/^   uint64 num_memtable_bg_threads;$/;"	m	struct:splinterdb_config
num_memtable_bg_threads	external/splinterdb/tests/config.h	/^   uint64 num_memtable_bg_threads; \/\/ for background threads to be enabled$/;"	m	struct:master_config
num_memtable_branches	external/splinterdb/src/trunk.h	/^   uint64          num_memtable_branches;$/;"	m	struct:trunk_range_iterator
num_normal_bg_threads	external/splinterdb/include/splinterdb/splinterdb.h	/^   uint64 num_normal_bg_threads;$/;"	m	struct:splinterdb_config
num_normal_bg_threads	external/splinterdb/tests/config.h	/^   uint64 num_normal_bg_threads;   \/\/ Both bg_threads fields have to be non-zero$/;"	m	struct:master_config
num_not_found	external/splinterdb/tests/test_common.h	/^   uint64 num_not_found;$/;"	m	struct:stats_lookup
num_ops	external/splinterdb/tests/functional/btree_test.c	/^   uint64                 num_ops;$/;"	m	struct:test_btree_thread_params	file:
num_ops	external/splinterdb/tests/functional/ycsb_test.c	/^   uint64   *num_ops;$/;"	m	struct:parse_ycsb_log_req	file:
num_ops_per_thread	external/splinterdb/tests/functional/splinter_test.c	/^   uint64             num_ops_per_thread[NUM_OP_TYPES]; \/\/ in each round$/;"	m	struct:test_splinter_thread_params	file:
num_pages	external/splinterdb/tests/functional/cache_test.c	/^   uint64             num_pages;               \/\/ IN #of pages to get$/;"	m	struct:__anon54	file:
num_pages_ws	external/splinterdb/tests/functional/cache_test.c	/^   uint64             num_pages_ws;            \/\/ IN #of pages in working set$/;"	m	struct:__anon54	file:
num_periods	external/splinterdb/tests/functional/splinter_test.h	/^   uint64 num_periods;         \/\/ if TEST_PERIODIC then repeat this many times$/;"	m	struct:test_config
num_pivot_keys	external/splinterdb/src/trunk.c	/^   uint16 num_pivot_keys;   \/\/ number of used pivot keys (== num_children + 1)$/;"	m	struct:trunk_hdr	file:
num_processes	external/splinterdb/tests/config.h	/^   uint64 num_processes; \/\/ # of [forked] processes$/;"	m	struct:master_config
num_ranges	external/splinterdb/tests/functional/splinter_test.c	/^   int         num_ranges;$/;"	m	struct:trunk_range_perf_params	file:
num_remainders	external/splinterdb/src/routing_filter.c	/^   uint16 num_remainders;$/;"	m	struct:routing_hdr	file:
num_remaining	external/splinterdb/src/merge.h	/^   int          num_remaining; \/\/ number of ritors not at end$/;"	m	struct:merge_iterator
num_saved_pivot_keys	external/splinterdb/src/trunk.c	/^   uint64                 num_saved_pivot_keys;$/;"	m	struct:__anon41	file:
num_tables	external/splinterdb/tests/functional/splinter_test.c	/^   uint8              num_tables;$/;"	m	struct:test_splinter_thread_params	file:
num_threads	external/splinterdb/src/task.h	/^   uint8           num_threads;$/;"	m	struct:task_bg_thread_group
num_threads	external/splinterdb/tests/unit/splinterdb_stress_test.c	86;"	d	file:
num_trees	external/splinterdb/src/merge.h	/^   int          num_trees; \/\/ number of trees in the forest$/;"	m	struct:merge_iterator
num_tuples	external/splinterdb/src/btree.h	/^   uint64 num_tuples;    \/\/ no. of tuples in the output tree$/;"	m	struct:btree_pack_req
num_tuples	external/splinterdb/src/trunk.c	/^   uint64 num_tuples;$/;"	m	struct:trunk_bundle	file:
num_tuples	external/splinterdb/src/trunk.h	/^   uint64          num_tuples;$/;"	m	struct:trunk_range_iterator
num_tuples_bundle	external/splinterdb/src/trunk.c	/^   uint64 num_tuples_bundle;   \/\/ # tuples for this pivot in bundles$/;"	m	struct:trunk_pivot_data	file:
num_tuples_whole	external/splinterdb/src/trunk.c	/^   uint64 num_tuples_whole;    \/\/ # tuples for this pivot in whole branches$/;"	m	struct:trunk_pivot_data	file:
num_unique	external/splinterdb/src/routing_filter.h	/^   uint32 num_unique;$/;"	m	struct:routing_filter
num_www_addrs	external/splinterdb/examples/splinterdb_iterators_example.c	/^int num_www_addrs = (sizeof(www_inet_info) \/ sizeof(*www_inet_info));$/;"	v
number	external/splinterdb/src/platform_linux/laio.h	/^   uint64         number;       \/\/ request number\/id$/;"	m	struct:io_async_req
numerator	external/splinterdb/src/util.h	/^   uint64 numerator;$/;"	m	struct:fraction
objname	external/splinterdb/src/platform_linux/platform_inline.h	/^                        const char      *objname,$/;"	v
occupieds	include/gqf_int.h	/^		uint64_t occupieds[QF_METADATA_WORDS_PER_BLOCK];$/;"	m	struct:qfblock
occupieds	other_filters/cqf/include/gqf_int.h	/^		uint64_t occupieds[QF_METADATA_WORDS_PER_BLOCK];$/;"	m	struct:qfblock
occupieds	other_filters/taf/src/exaf.h	/^  uint64_t occupieds;$/;"	m	struct:exaf_block_t
occupieds	other_filters/taf/src/rsqf.h	/^  uint64_t occupieds;$/;"	m	struct:rsqf_block_t
occupieds	other_filters/taf/src/splinter_taf.h	/^  uint64_t occupieds;$/;"	m	struct:taf_block_t
occupieds	other_filters/taf/src/taf.h	/^  uint64_t occupieds;$/;"	m	struct:taf_block_t
occupieds	other_filters/taf/src/taf_sim.h	/^  uint64_t occupieds;$/;"	m	struct:taf_block_t
occupieds	other_filters/taf/src/utaf.h	/^  uint64_t occupieds;$/;"	m	struct:utaf_block_t
occupieds	src/taf.cc	/^  uint64_t occupieds;$/;"	m	struct:taf_block_t	file:
offset	external/splinterdb/src/shard_log.h	/^   uint64 offset;$/;"	m	struct:shard_log_thread_data
offset	include/gqf_int.h	/^		uint8_t offset; $/;"	m	struct:qfblock
offset	other_filters/cqf/include/gqf_int.h	/^		uint8_t offset; $/;"	m	struct:qfblock
offset	other_filters/taf/src/exaf.h	/^  size_t offset;$/;"	m	struct:exaf_block_t
offset	other_filters/taf/src/rsqf.h	/^  size_t offset;$/;"	m	struct:rsqf_block_t
offset	other_filters/taf/src/splinter_taf.h	/^  size_t offset;$/;"	m	struct:taf_block_t
offset	other_filters/taf/src/taf.h	/^  size_t offset;$/;"	m	struct:taf_block_t
offset	other_filters/taf/src/taf_sim.h	/^  size_t offset;$/;"	m	struct:taf_block_t
offset	other_filters/taf/src/utaf.h	/^  size_t offset;$/;"	m	struct:utaf_block_t
offset	src/taf.cc	/^  size_t offset;$/;"	m	struct:taf_block_t	file:
offset_lower_bound	other_filters/cqf/src/gqf.c	/^static inline int offset_lower_bound(const QF *qf, uint64_t slot_index)$/;"	f	file:
offset_lower_bound	src/gqf.c	/^static inline int offset_lower_bound(const QF *qf, uint64_t slot_index)$/;"	f	file:
offset_lower_bound	src/gqf_backup.c	/^static inline int offset_lower_bound(const QF *qf, uint64_t slot_index)$/;"	f	file:
offset_state_init	other_filters/taf/src/rsqf.c	/^RSQF* offset_state_init() {$/;"	f
offsetof	external/splinterdb/src/merge.h	/^                  == offsetof(merge_iterator, ordered_iterator_stored[-1]),$/;"	v
offsetof	external/splinterdb/src/merge.h	/^                  == offsetof(merge_iterator, ordered_iterators[-1]),$/;"	v
offsets	external/splinterdb/src/btree_private.h	/^   table_entry offsets[];$/;"	m	struct:btree_hdr
old_entry_state	external/splinterdb/src/btree_private.h	/^   } old_entry_state;$/;"	m	struct:leaf_incorporate_spec	typeref:enum:leaf_incorporate_spec::__anon11
old_filter	external/splinterdb/src/trunk.c	/^   routing_filter old_filter[TRUNK_MAX_PIVOTS];$/;"	m	struct:trunk_filter_scratch	file:
ondisk_flags	external/splinterdb/src/data_internal.h	/^typedef uint8  ondisk_flags;$/;"	t
ondisk_key	external/splinterdb/src/data_internal.h	/^typedef struct ONDISK ondisk_key {$/;"	s
ondisk_key	external/splinterdb/src/data_internal.h	/^} ondisk_key;$/;"	t	typeref:struct:ondisk_key
ondisk_key_length	external/splinterdb/src/data_internal.h	/^typedef uint16 ondisk_key_length;$/;"	t
ondisk_key_required_data_capacity	external/splinterdb/src/data_internal.h	/^ondisk_key_required_data_capacity(key k)$/;"	f
ondisk_key_to_key	external/splinterdb/src/data_internal.h	/^ondisk_key_to_key(const ondisk_key *odk)$/;"	f
ondisk_message_length	external/splinterdb/src/data_internal.h	/^typedef uint16 ondisk_message_length;$/;"	t
ondisk_tuple	external/splinterdb/src/data_internal.h	/^typedef struct ONDISK ondisk_tuple {$/;"	s
ondisk_tuple	external/splinterdb/src/data_internal.h	/^} ondisk_tuple;$/;"	t	typeref:struct:ondisk_tuple
one_long_run	other_filters/taf/src/rsqf.c	/^RSQF* one_long_run() {$/;"	f
op	other_filters/acfsim/src/cuckoofilter.h	/^        char op;$/;"	m	struct:operation
op	src/test_micro_read.c	/^	char op;$/;"	m	struct:operation	file:
op_count	external/splinterdb/scripts/run_ycsb.py	/^                op_count = get_maybe_set_op_count(trace_filename)$/;"	v
op_granularity	external/splinterdb/tests/functional/splinter_test.c	/^   uint64             op_granularity;$/;"	m	struct:test_splinter_thread_params	file:
opaque	external/splinterdb/include/splinterdb/splinterdb.h	/^   char opaque[SPLINTERDB_LOOKUP_BUFSIZE];$/;"	m	struct:__anon46
operation	other_filters/acfsim/src/cuckoofilter.h	/^struct operation {$/;"	s
operation	other_filters/acfsim/src/cuckoofilter.h	/^} typedef operation;$/;"	t
operation	src/test_micro_read.c	/^struct operation {$/;"	s	file:
operation	src/test_micro_read.c	/^} typedef operation;$/;"	t	file:
operator ()	other_filters/acf/src/hashutil.h	/^	uint64_t operator()(const uint64_t key) const {$/;"	f	class:cuckoofilter::Murmur64Hasher
operator ()	other_filters/acf/src/hashutil.h	/^  uint64_t operator()(const uint64_t key) const {$/;"	f	class:cuckoofilter::TwoIndependentMultiplyShift
operator ()	other_filters/acf/src/hashutil.h	/^  uint64_t operator()(uint64_t key) const {$/;"	f	class:cuckoofilter::SimpleTabulation
operator ()	other_filters/acfsim/src/hashutil.h	/^	uint64_t operator()(const uint64_t key) const {$/;"	f	class:cuckoofilter::Murmur64Hasher
operator ()	other_filters/acfsim/src/hashutil.h	/^  uint64_t operator()(const uint64_t key) const {$/;"	f	class:cuckoofilter::TwoIndependentMultiplyShift
operator ()	other_filters/acfsim/src/hashutil.h	/^  uint64_t operator()(uint64_t key) const {$/;"	f	class:cuckoofilter::SimpleTabulation
operator ()	other_filters/cf/example/test_ext_throughput.cc	/^        bool operator () (const uint64_t& a, const uint64_t& b) const {$/;"	f	struct:CompareGreater
operator ()	other_filters/cf/example/test_ext_throughput.cc	/^        size_t operator () (uint64_t key) const {$/;"	f	struct:HashFunctor
operator ()	other_filters/cf/src/hashutil.h	/^  uint64_t operator()(uint64_t key) const {$/;"	f	class:cuckoofilter::SimpleTabulation
operator ()	other_filters/cf/src/hashutil.h	/^  uint64_t operator()(uint64_t key) const {$/;"	f	class:cuckoofilter::TwoIndependentMultiplyShift
operator ()	other_filters/cqf/src/test_adversarial.cc	/^        bool operator () (const uint64_t& a, const uint64_t& b) const {$/;"	f	struct:CompareGreater
operator ()	other_filters/cqf/src/test_adversarial.cc	/^        size_t operator () (int key) const {$/;"	f	struct:HashFunctor
operator ()	other_filters/cqf/src/test_ext_throughput.cc	/^        bool operator () (const uint64_t& a, const uint64_t& b) const {$/;"	f	struct:CompareGreater
operator ()	other_filters/cqf/src/test_ext_throughput.cc	/^        size_t operator () (int key) const {$/;"	f	struct:HashFunctor
operator ()	src/taf.cc	/^        bool operator () (const uint64_t& a, const uint64_t& b) const {$/;"	f	struct:CompareGreater
operator ()	src/taf.cc	/^        size_t operator () (uint64_t key) const {$/;"	f	struct:HashFunctor
operator ()	src/test_ext_churn.cc	/^	bool operator () (const uint64_t& a, const uint64_t& b) const {$/;"	f	struct:CompareGreater
operator ()	src/test_ext_churn.cc	/^	size_t operator () (int key) const {$/;"	f	struct:HashFunctor
operator ()	src/test_ext_inc_throughput.cc	/^	bool operator () (const uint64_t& a, const uint64_t& b) const {$/;"	f	struct:CompareGreater
operator ()	src/test_ext_inc_throughput.cc	/^	size_t operator () (int key) const {$/;"	f	struct:HashFunctor
operator ()	src/test_ext_throughput.cc	/^	bool operator () (const uint64_t& a, const uint64_t& b) const {$/;"	f	struct:CompareGreater
operator ()	src/test_ext_throughput.cc	/^	size_t operator () (int key) const {$/;"	f	struct:HashFunctor
operator ()	src/test_zipf_throughput.cc	/^	bool operator () (const uint64_t& a, const uint64_t& b) const {$/;"	f	struct:CompareGreater
operator ()	src/test_zipf_throughput.cc	/^	size_t operator () (int key) const {$/;"	f	struct:HashFunctor
operator <<	other_filters/acf/benchmarks/bulk-insert-and-query.cc	/^basic_ostream<CharT, Traits>& operator<<($/;"	f
operator <<	other_filters/cf/benchmarks/bulk-insert-and-query.cc	/^basic_ostream<CharT, Traits>& operator<<($/;"	f
ops	external/splinterdb/src/allocator.h	/^   const allocator_ops *ops;$/;"	m	struct:allocator
ops	external/splinterdb/src/cache.h	/^   const cache_config_ops *ops;$/;"	m	struct:cache_config
ops	external/splinterdb/src/cache.h	/^   const cache_ops *ops;$/;"	m	struct:cache
ops	external/splinterdb/src/io.h	/^   const io_ops *ops;$/;"	m	struct:io_handle
ops	external/splinterdb/src/iterator.h	/^   const iterator_ops *ops;$/;"	m	struct:iterator
ops	external/splinterdb/src/log.h	/^   const log_ops *ops;$/;"	m	struct:log_handle
ordered_iterator	external/splinterdb/src/merge.h	/^typedef struct ordered_iterator {$/;"	s
ordered_iterator	external/splinterdb/src/merge.h	/^} ordered_iterator;$/;"	t	typeref:struct:ordered_iterator
ordered_iterator_stored	external/splinterdb/src/merge.h	/^   ordered_iterator ordered_iterator_stored[MAX_MERGE_ARITY];$/;"	m	struct:merge_iterator
ordered_iterator_stored_pad	external/splinterdb/src/merge.h	/^   ordered_iterator ordered_iterator_stored_pad;$/;"	m	struct:merge_iterator
ordered_iterators	external/splinterdb/src/merge.h	/^   ordered_iterator *ordered_iterators[MAX_MERGE_ARITY];$/;"	m	struct:merge_iterator
ordered_iterators_pad	external/splinterdb/src/merge.h	/^   ordered_iterator *ordered_iterators_pad;$/;"	m	struct:merge_iterator
ordered_map_t	other_filters/acf/example/test_churn.cc	/^typedef stxxl::map<uint64_t, uint64_t, CompareGreater, DATA_NODE_BLOCK_SIZE, DATA_LEAF_BLOCK_SIZE> ordered_map_t;$/;"	t	file:
ordered_map_t	other_filters/acf/example/test_zipf_throughput.cc	/^typedef stxxl::map<uint64_t, uint64_t, CompareGreater, DATA_NODE_BLOCK_SIZE, DATA_LEAF_BLOCK_SIZE> ordered_map_t;$/;"	t	file:
ordered_map_t	other_filters/acfsim/example/test_churn.cc	/^typedef stxxl::map<uint64_t, uint64_t, CompareGreater, DATA_NODE_BLOCK_SIZE, DATA_LEAF_BLOCK_SIZE> ordered_map_t;$/;"	t	file:
ordered_map_t	other_filters/acfsim/example/test_zipf_throughput.cc	/^typedef stxxl::map<uint64_t, uint64_t, CompareGreater, DATA_NODE_BLOCK_SIZE, DATA_LEAF_BLOCK_SIZE> ordered_map_t;$/;"	t	file:
ordered_map_t	other_filters/cf/example/test_ext_throughput.cc	/^typedef stxxl::map<uint64_t, uint64_t, CompareGreater, DATA_NODE_BLOCK_SIZE, DATA_LEAF_BLOCK_SIZE> ordered_map_t;$/;"	t	file:
ordered_map_t	other_filters/cqf/src/test_adversarial.cc	/^typedef stxxl::map<uint64_t, uint64_t, CompareGreater, DATA_NODE_BLOCK_SIZE, DATA_LEAF_BLOCK_SIZE> ordered_map_t;$/;"	t	file:
ordered_map_t	other_filters/cqf/src/test_ext_throughput.cc	/^typedef stxxl::map<uint64_t, uint64_t, CompareGreater, DATA_NODE_BLOCK_SIZE, DATA_LEAF_BLOCK_SIZE> ordered_map_t;$/;"	t	file:
ordered_map_t	src/taf.cc	/^typedef stxxl::map<uint64_t, uint64_t, CompareGreater, DATA_NODE_BLOCK_SIZE, DATA_LEAF_BLOCK_SIZE> ordered_map_t;$/;"	t	file:
ordered_map_t	src/test_ext_churn.cc	/^typedef stxxl::map<uint64_t, uint64_t, CompareGreater, DATA_NODE_BLOCK_SIZE, DATA_LEAF_BLOCK_SIZE> ordered_map_t;$/;"	t	file:
ordered_map_t	src/test_ext_inc_throughput.cc	/^typedef stxxl::map<uint64_t, uint64_t, CompareGreater, DATA_NODE_BLOCK_SIZE, DATA_LEAF_BLOCK_SIZE> ordered_map_t;$/;"	t	file:
ordered_map_t	src/test_ext_throughput.cc	/^typedef stxxl::map<uint64_t, uint64_t, CompareGreater, DATA_NODE_BLOCK_SIZE, DATA_LEAF_BLOCK_SIZE> ordered_map_t;$/;"	t	file:
ordered_map_t	src/test_zipf_throughput.cc	/^typedef stxxl::map<uint64_t, uint64_t, CompareGreater, DATA_NODE_BLOCK_SIZE, DATA_LEAF_BLOCK_SIZE> ordered_map_t;$/;"	t	file:
output_filename	external/splinterdb/scripts/run_ycsb.py	/^                output_filename = results_dir + "\/output"$/;"	v
output_pivot_kv_byte_count	external/splinterdb/src/trunk.c	/^   uint64  output_pivot_kv_byte_count[TRUNK_MAX_PIVOTS];$/;"	m	struct:trunk_compact_bundle_req	file:
output_pivot_tuple_count	external/splinterdb/src/trunk.c	/^   uint64  output_pivot_tuple_count[TRUNK_MAX_PIVOTS];$/;"	m	struct:trunk_compact_bundle_req	file:
outputs	other_filters/cqf/src/bm.c	/^	__uint128_t *outputs;$/;"	m	struct:app_pregen_state	file:
outputs	other_filters/cqf/src/bm.c	/^	__uint128_t *outputs;$/;"	m	struct:uniform_pregen_state	file:
outputs	other_filters/cqf/src/bm.c	/^	__uint128_t *outputs;$/;"	m	struct:zipfian_pregen_state	file:
outputs	src/bm.c	/^	__uint128_t *outputs;$/;"	m	struct:app_pregen_state	file:
outputs	src/bm.c	/^	__uint128_t *outputs;$/;"	m	struct:uniform_pregen_state	file:
outputs	src/bm.c	/^	__uint128_t *outputs;$/;"	m	struct:zipfian_pregen_state	file:
owner	external/splinterdb/src/platform_linux/platform_types.h	/^   threadid        owner;$/;"	m	struct:__anon29
owner	external/splinterdb/tests/unit/splinter_shmem_test.c	/^   threadid            owner;$/;"	m	struct:shm_memfrag	file:
p	other_filters/taf/src/exaf.h	/^  size_t p;                     \/* fingerprint prefix size = log2(n\/E) to get false-pos rate E *\/$/;"	m	struct:exaf_t
p	other_filters/taf/src/rsqf.h	/^  size_t p;                     \/* fingerprint prefix size = log2(n\/E) to get false-pos rate E *\/$/;"	m	struct:rsqf_t
p	other_filters/taf/src/splinter_taf.h	/^  size_t p;                     \/* fingerprint prefix size = log2(n\/E) to get false-pos rate E *\/$/;"	m	struct:taf_t
p	other_filters/taf/src/taf.h	/^  size_t p;                     \/* fingerprint prefix size = log2(n\/E) to get false-pos rate E *\/$/;"	m	struct:taf_t
p	other_filters/taf/src/taf_sim.h	/^  size_t p;                     \/* fingerprint prefix size = log2(n\/E) to get false-pos rate E *\/$/;"	m	struct:taf_t
p	other_filters/taf/src/utaf.h	/^  size_t p;                     \/* fingerprint prefix size = log2(n\/E) to get false-pos rate E *\/$/;"	m	struct:utaf_t
p	src/taf.cc	/^  size_t p;                     \/* fingerprint prefix size = log2(n\/E) to get false-pos rate E *\/$/;"	m	struct:taf_t	file:
pack	other_filters/acf/src/permencoding.h	/^  inline uint16_t pack(const uint8_t in[4]) const {$/;"	f	class:cuckoofilter::PermEncoding
pack	other_filters/acfsim/src/permencoding.h	/^  inline uint16_t pack(const uint8_t in[4]) const {$/;"	f	class:cuckoofilter::PermEncoding
pack	other_filters/cf/src/permencoding.h	/^  inline uint16_t pack(const uint8_t in[4]) const {$/;"	f	class:cuckoofilter::PermEncoding
pack_tests	external/splinterdb/tests/unit/btree_stress_test.c	/^pack_tests(cache           *cc,$/;"	f	file:
pad_data	other_filters/acf/example/test_acf_ops.cc	/^void pad_data(void *dest, const void *src, const size_t dest_len, const size_t src_len, const int flagged) {$/;"	f
pad_data	other_filters/acf/example/test_splinter_adversarial.cc	/^void pad_data(void *dest, const void *src, const size_t dest_len, const size_t src_len, const int flagged) {$/;"	f
pad_data	other_filters/acf/example/test_splinter_throughput.cc	/^void pad_data(void *dest, const void *src, const size_t dest_len, const size_t src_len, const int flagged) {$/;"	f
pad_data	other_filters/acf/example/test_splinter_zipfian_histogram.cc	/^void pad_data(void *dest, const void *src, const size_t dest_len, const size_t src_len, const int flagged) {$/;"	f
pad_data	other_filters/acf/src/cuckoofilter.h	/^	void pad_data(void *dest, const void *src, const size_t dest_len, const size_t src_len, const int flagged) {$/;"	f	namespace:cuckoofilter
pad_data	other_filters/acfsim/example/test_acf_ops.cc	/^void pad_data(void *dest, const void *src, const size_t dest_len, const size_t src_len, const int flagged) {$/;"	f
pad_data	other_filters/acfsim/example/test_splinter_adversarial.cc	/^void pad_data(void *dest, const void *src, const size_t dest_len, const size_t src_len, const int flagged) {$/;"	f
pad_data	other_filters/acfsim/example/test_splinter_throughput.cc	/^void pad_data(void *dest, const void *src, const size_t dest_len, const size_t src_len, const int flagged) {$/;"	f
pad_data	other_filters/acfsim/example/test_splinter_zipfian_histogram.cc	/^void pad_data(void *dest, const void *src, const size_t dest_len, const size_t src_len, const int flagged) {$/;"	f
pad_data	other_filters/acfsim/src/cuckoofilter.h	/^	void pad_data(void *dest, const void *src, const size_t dest_len, const size_t src_len, const int flagged) {$/;"	f	namespace:cuckoofilter
pad_data	other_filters/cf/example/test_splinter_adversarial.cc	/^void pad_data(void *dest, const void *src, const size_t dest_len, const size_t src_len, const int flagged) {$/;"	f
pad_data	other_filters/cf/example/test_splinter_throughput.cc	/^void pad_data(void *dest, const void *src, const size_t dest_len, const size_t src_len, const int flagged) {$/;"	f
pad_data	other_filters/cf/example/test_splinter_zipfian_histogram.cc	/^void pad_data(void *dest, const void *src, const size_t dest_len, const size_t src_len, const int flagged) {$/;"	f
pad_data	other_filters/cqf/src/test_splinter_adversarial.c	/^void pad_data(void *dest, const void *src, const size_t dest_len, const size_t src_len, const int flagged) {$/;"	f
pad_data	other_filters/cqf/src/test_splinter_throughput.c	/^void pad_data(void *dest, const void *src, const size_t dest_len, const size_t src_len, const int flagged) {$/;"	f
pad_data	other_filters/cqf/src/test_splinter_zipfian_histogram.c	/^void pad_data(void *dest, const void *src, const size_t dest_len, const size_t src_len, const int flagged) {$/;"	f
pad_data	other_filters/taf/src/splinter_taf.c	/^void pad_data(void *dest, const void *src, const size_t dest_len, const size_t src_len) {$/;"	f
pad_data	src/splinter_util.c	/^void pad_data(void *dest, const void *src, const size_t dest_len, const size_t src_len, const int flagged) {$/;"	f
pad_data	src/test_splinter_adversarial.c	/^void pad_data(void *dest, const void *src, const size_t dest_len, const size_t src_len, const int flagged) {$/;"	f
pad_data	src/test_splinter_inserts_2.c	/^void pad_data(void *dest, const void *src, const size_t dest_len, const size_t src_len) {$/;"	f
pad_data	src/test_splinter_replace_lltable_throughput.c	/^void pad_data(void *dest, const void *src, const size_t dest_len, const size_t src_len, const int flagged) {$/;"	f
pad_data	src/test_splinter_throughput.c	/^void pad_data(void *dest, const void *src, const size_t dest_len, const size_t src_len, const int flagged) {$/;"	f
pad_data	src/test_splinter_zipfian_histogram.c	/^void pad_data(void *dest, const void *src, const size_t dest_len, const size_t src_len, const int flagged) {$/;"	f
padded_slice	other_filters/acf/example/test_acf_ops.cc	/^slice padded_slice(const void *data, const size_t dest_len, const size_t src_len, void *buffer, const int flagged) {$/;"	f
padded_slice	other_filters/acf/example/test_splinter_adversarial.cc	/^slice padded_slice(const void *data, const size_t dest_len, const size_t src_len, void *buffer, const int flagged) {$/;"	f
padded_slice	other_filters/acf/example/test_splinter_throughput.cc	/^slice padded_slice(const void *data, const size_t dest_len, const size_t src_len, void *buffer, const int flagged) {$/;"	f
padded_slice	other_filters/acf/example/test_splinter_zipfian_histogram.cc	/^slice padded_slice(const void *data, const size_t dest_len, const size_t src_len, void *buffer, const int flagged) {$/;"	f
padded_slice	other_filters/acf/src/cuckoofilter.h	/^	slice padded_slice(const void *data, const size_t dest_len, const size_t src_len, void *buffer, const int flagged) {$/;"	f	namespace:cuckoofilter
padded_slice	other_filters/acfsim/example/test_acf_ops.cc	/^slice padded_slice(const void *data, const size_t dest_len, const size_t src_len, void *buffer, const int flagged) {$/;"	f
padded_slice	other_filters/acfsim/example/test_splinter_adversarial.cc	/^slice padded_slice(const void *data, const size_t dest_len, const size_t src_len, void *buffer, const int flagged) {$/;"	f
padded_slice	other_filters/acfsim/example/test_splinter_throughput.cc	/^slice padded_slice(const void *data, const size_t dest_len, const size_t src_len, void *buffer, const int flagged) {$/;"	f
padded_slice	other_filters/acfsim/example/test_splinter_zipfian_histogram.cc	/^slice padded_slice(const void *data, const size_t dest_len, const size_t src_len, void *buffer, const int flagged) {$/;"	f
padded_slice	other_filters/acfsim/src/cuckoofilter.h	/^	slice padded_slice(const void *data, const size_t dest_len, const size_t src_len, void *buffer, const int flagged) {$/;"	f	namespace:cuckoofilter
padded_slice	other_filters/cf/example/test_splinter_adversarial.cc	/^slice padded_slice(const void *data, const size_t dest_len, const size_t src_len, void *buffer, const int flagged) {$/;"	f
padded_slice	other_filters/cf/example/test_splinter_throughput.cc	/^slice padded_slice(const void *data, const size_t dest_len, const size_t src_len, void *buffer, const int flagged) {$/;"	f
padded_slice	other_filters/cf/example/test_splinter_zipfian_histogram.cc	/^slice padded_slice(const void *data, const size_t dest_len, const size_t src_len, void *buffer, const int flagged) {$/;"	f
padded_slice	other_filters/cqf/src/test_splinter_adversarial.c	/^slice padded_slice(const void *data, const size_t dest_len, const size_t src_len, void *buffer, const int flagged) {$/;"	f
padded_slice	other_filters/cqf/src/test_splinter_throughput.c	/^slice padded_slice(const void *data, const size_t dest_len, const size_t src_len, void *buffer, const int flagged) {$/;"	f
padded_slice	other_filters/cqf/src/test_splinter_zipfian_histogram.c	/^slice padded_slice(const void *data, const size_t dest_len, const size_t src_len, void *buffer, const int flagged) {$/;"	f
padded_slice	other_filters/taf/src/splinter_taf.c	/^slice padded_slice(const void *data, const size_t dest_len, const size_t src_len, void *buffer) {$/;"	f
padded_slice	src/splinter_util.c	/^slice padded_slice(const void *data, const size_t dest_len, const size_t src_len, void *buffer, const int flagged) {$/;"	f
padded_slice	src/test_splinter_adversarial.c	/^slice padded_slice(const void *data, const size_t dest_len, const size_t src_len, void *buffer, const int flagged) {$/;"	f
padded_slice	src/test_splinter_inserts_2.c	/^slice padded_slice(const void *data, const size_t dest_len, const size_t src_len, void *buffer) {$/;"	f
padded_slice	src/test_splinter_replace_lltable_throughput.c	/^slice padded_slice(const void *data, const size_t dest_len, const size_t src_len, void *buffer, const int flagged) {$/;"	f
padded_slice	src/test_splinter_throughput.c	/^slice padded_slice(const void *data, const size_t dest_len, const size_t src_len, void *buffer, const int flagged) {$/;"	f
padded_slice	src/test_splinter_zipfian_histogram.c	/^slice padded_slice(const void *data, const size_t dest_len, const size_t src_len, void *buffer, const int flagged) {$/;"	f
padding	include/partitioned_counter.h	/^	int64_t padding[7];$/;"	m	struct:local_counter
padding	other_filters/cqf/include/partitioned_counter.h	/^	int64_t padding[7];$/;"	m	struct:local_counter
page	external/splinterdb/src/btree.h	/^   page_handle *page;$/;"	m	struct:btree_node
page	external/splinterdb/src/cache.h	/^   page_handle    *page;   \/\/ OUT page handle$/;"	m	struct:cache_async_ctxt
page	external/splinterdb/src/clockcache.h	/^   page_handle           page;$/;"	m	struct:clockcache_entry
page	external/splinterdb/src/trunk.h	/^   page_handle *page;$/;"	m	struct:trunk_node
page_addr	external/splinterdb/src/routing_filter.h	/^   uint64              page_addr;   \/\/ Can be index or filter$/;"	m	struct:routing_async_ctxt
page_alloc	external/splinterdb/src/cache.h	/^   page_alloc_fn        page_alloc;$/;"	m	struct:cache_ops
page_alloc_fn	external/splinterdb/src/cache.h	/^typedef page_handle *(*page_alloc_fn)(cache *cc, uint64 addr, page_type type);$/;"	t
page_async_done	external/splinterdb/src/cache.h	/^   page_async_done_fn   page_async_done;$/;"	m	struct:cache_ops
page_async_done_fn	external/splinterdb/src/cache.h	/^typedef void (*page_async_done_fn)(cache            *cc,$/;"	t
page_capacity	external/splinterdb/src/allocator.h	/^   uint64 page_capacity;$/;"	m	struct:allocator_config
page_capacity	external/splinterdb/src/clockcache.h	/^   uint32 page_capacity;$/;"	m	struct:clockcache_config
page_generic_fn	external/splinterdb/src/cache.h	/^typedef void (*page_generic_fn)(cache *cc, page_handle *page);$/;"	t
page_get	external/splinterdb/src/cache.h	/^   page_get_fn          page_get;$/;"	m	struct:cache_ops
page_get_async	external/splinterdb/src/cache.h	/^   page_get_async_fn    page_get_async;$/;"	m	struct:cache_ops
page_get_async_fn	external/splinterdb/src/cache.h	/^typedef cache_async_result (*page_get_async_fn)(cache            *cc,$/;"	t
page_get_fn	external/splinterdb/src/cache.h	/^typedef page_handle *(*page_get_fn)(cache    *cc,$/;"	t
page_get_read_ref	external/splinterdb/src/cache.h	/^   page_get_read_ref_fn page_get_read_ref;$/;"	m	struct:cache_ops
page_get_read_ref_fn	external/splinterdb/src/cache.h	/^typedef uint16 (*page_get_read_ref_fn)(cache *cc, page_handle *page);$/;"	t
page_handle	external/splinterdb/src/cache.h	/^typedef struct page_handle {$/;"	s
page_handle	external/splinterdb/src/cache.h	/^} page_handle;$/;"	t	typeref:struct:page_handle
page_lock	external/splinterdb/src/cache.h	/^   page_generic_fn      page_lock;$/;"	m	struct:cache_ops
page_mark_dirty	external/splinterdb/src/cache.h	/^   page_generic_fn      page_mark_dirty;$/;"	m	struct:cache_ops
page_pin	external/splinterdb/src/cache.h	/^   page_generic_fn      page_pin;$/;"	m	struct:cache_ops
page_prefetch	external/splinterdb/src/cache.h	/^   page_prefetch_fn     page_prefetch;$/;"	m	struct:cache_ops
page_prefetch_fn	external/splinterdb/src/cache.h	/^typedef void (*page_prefetch_fn)(cache *cc, uint64 addr, page_type type);$/;"	t
page_reads	external/splinterdb/src/cache.h	/^   uint64 page_reads[NUM_PAGE_TYPES];$/;"	m	struct:cache_stats
page_size	external/splinterdb/include/splinterdb/splinterdb.h	/^   uint64 page_size;$/;"	m	struct:splinterdb_config
page_size	external/splinterdb/src/cache.h	/^   cache_config_generic_uint64_fn page_size;$/;"	m	struct:cache_config_ops
page_size	external/splinterdb/src/io.h	/^   uint64 page_size;$/;"	m	struct:io_config
page_size	external/splinterdb/tests/config.h	/^   uint64 page_size;$/;"	m	struct:master_config
page_sync	external/splinterdb/src/cache.h	/^   page_sync_fn         page_sync;$/;"	m	struct:cache_ops
page_sync_fn	external/splinterdb/src/cache.h	/^typedef void (*page_sync_fn)(cache       *cc,$/;"	t
page_try_claim	external/splinterdb/src/cache.h	/^   page_try_claim_fn    page_try_claim;$/;"	m	struct:cache_ops
page_try_claim_fn	external/splinterdb/src/cache.h	/^typedef bool32 (*page_try_claim_fn)(cache *cc, page_handle *page);$/;"	t
page_type	external/splinterdb/src/allocator.h	/^typedef enum page_type {$/;"	g
page_type	external/splinterdb/src/allocator.h	/^} page_type;$/;"	t	typeref:enum:page_type
page_type	external/splinterdb/src/btree.h	/^   page_type     page_type;$/;"	m	struct:btree_iterator
page_type_str	external/splinterdb/src/allocator.h	/^static const char *const page_type_str[] = {"invalid",$/;"	v
page_unclaim	external/splinterdb/src/cache.h	/^   page_generic_fn      page_unclaim;$/;"	m	struct:cache_ops
page_unget	external/splinterdb/src/cache.h	/^   page_generic_fn      page_unget;$/;"	m	struct:cache_ops
page_unlock	external/splinterdb/src/cache.h	/^   page_generic_fn      page_unlock;$/;"	m	struct:cache_ops
page_unpin	external/splinterdb/src/cache.h	/^   page_generic_fn      page_unpin;$/;"	m	struct:cache_ops
page_writes	external/splinterdb/src/cache.h	/^   uint64 page_writes[NUM_PAGE_TYPES];$/;"	m	struct:cache_stats
pages_outstanding	external/splinterdb/src/clockcache.c	/^   uint64     *pages_outstanding;$/;"	m	struct:clockcache_sync_callback_req	file:
pages_per_extent	external/splinterdb/src/clockcache.h	/^   uint64 pages_per_extent;$/;"	m	struct:clockcache_config
pair_t	other_filters/acf/example/test_churn.cc	/^typedef std::pair<uint64_t, uint64_t> pair_t;$/;"	t	file:
pair_t	other_filters/acf/example/test_zipf_throughput.cc	/^typedef std::pair<uint64_t, uint64_t> pair_t;$/;"	t	file:
pair_t	other_filters/acfsim/example/test_churn.cc	/^typedef std::pair<uint64_t, uint64_t> pair_t;$/;"	t	file:
pair_t	other_filters/acfsim/example/test_zipf_throughput.cc	/^typedef std::pair<uint64_t, uint64_t> pair_t;$/;"	t	file:
pair_t	other_filters/cf/example/test_ext_throughput.cc	/^typedef std::pair<uint64_t, uint64_t> pair_t;$/;"	t	file:
pair_t	other_filters/cqf/src/test_adversarial.cc	/^typedef std::pair<uint64_t, uint64_t> pair_t;$/;"	t	file:
pair_t	other_filters/cqf/src/test_ext_throughput.cc	/^typedef std::pair<uint64_t, uint64_t> pair_t;$/;"	t	file:
pair_t	src/taf.cc	/^typedef std::pair<uint64_t, uint64_t> pair_t;$/;"	t	file:
pair_t	src/test_ext_churn.cc	/^typedef std::pair<uint64_t, uint64_t> pair_t;$/;"	t	file:
pair_t	src/test_ext_inc_throughput.cc	/^typedef std::pair<uint64_t, uint64_t> pair_t;$/;"	t	file:
pair_t	src/test_ext_throughput.cc	/^typedef std::pair<uint64_t, uint64_t> pair_t;$/;"	t	file:
pair_t	src/test_zipf_throughput.cc	/^typedef std::pair<uint64_t, uint64_t> pair_t;$/;"	t	file:
pairs	other_filters/cqf/src/zipf.c	/^    struct zpair pairs[NPAIRS]; $/;"	m	struct:zipfian	typeref:struct:zipfian::zpair	file:
pairs	src/zipf.c	/^    struct zpair pairs[NPAIRS]; $/;"	m	struct:zipfian	typeref:struct:zipfian::zpair	file:
panic	external/splinterdb/scripts/config_reader.py	/^def panic(msg):$/;"	f
panic	other_filters/taf/src/arcd.c	236;"	d	file:
panic	src/taf.cc	854;"	d	file:
parallel_perf	external/splinterdb/tests/functional/splinter_test.h	/^   parallel_perf,$/;"	e	enum:test_type
params	external/splinterdb/tests/functional/ycsb_test.c	/^   ycsb_log_params *params;$/;"	m	struct:ycsb_phase	file:
params	other_filters/cqf/src/bm.c	/^	app_params *params;$/;"	m	struct:app_pregen_state	file:
params	other_filters/cqf/src/bm.c	/^	zipf_params *params;$/;"	m	struct:zipfian_pregen_state	file:
params	src/bm.c	/^	app_params *params;$/;"	m	struct:app_pregen_state	file:
params	src/bm.c	/^	zipf_params *params;$/;"	m	struct:zipfian_pregen_state	file:
parent	external/splinterdb/src/splinterdb.c	/^   const splinterdb    *parent;$/;"	m	struct:splinterdb_iterator	file:
parse_cfg_file	external/splinterdb/scripts/config_reader.py	/^   def parse_cfg_file(self, file):$/;"	m	class:ConfigDB
parse_cli_opts	external/splinterdb/scripts/config_reader.py	/^   def parse_cli_opts(self, opts):$/;"	m	class:ConfigDB
parse_cmdline_args	external/splinterdb/tests/unit/limitations_test.c	/^parse_cmdline_args(void *datap, int unit_test_argc, char **unit_test_argv)$/;"	f	file:
parse_test	external/splinterdb/scripts/list_test.py	/^def parse_test(tags: Tuple[str, ...], test: List[str]) -> Test:$/;"	f
parse_ycsb_log_file	external/splinterdb/tests/functional/ycsb_test.c	/^parse_ycsb_log_file(void *arg)$/;"	f	file:
parse_ycsb_log_req	external/splinterdb/tests/functional/ycsb_test.c	/^typedef struct parse_ycsb_log_req {$/;"	s	file:
parse_ycsb_log_req	external/splinterdb/tests/functional/ycsb_test.c	/^} parse_ycsb_log_req;$/;"	t	typeref:struct:parse_ycsb_log_req	file:
partitioned_counter	include/partitioned_counter.h	/^typedef struct partitioned_counter {$/;"	s
partitioned_counter	include/partitioned_counter.h	/^} partitioned_counter;$/;"	t	typeref:struct:partitioned_counter
partitioned_counter	other_filters/cqf/include/partitioned_counter.h	/^typedef struct partitioned_counter {$/;"	s
partitioned_counter	other_filters/cqf/include/partitioned_counter.h	/^} partitioned_counter;$/;"	t	typeref:struct:partitioned_counter
pathlib	external/splinterdb/scripts/run_ycsb.py	/^import pathlib$/;"	i
payload_size_limit	external/splinterdb/tests/test_data.c	/^   uint64      payload_size_limit;$/;"	m	struct:data_test_config	file:
pc_add	other_filters/cqf/src/partitioned_counter.c	/^void pc_add(pc_t *pc, int64_t count) {$/;"	f
pc_add	src/partitioned_counter.c	/^void pc_add(pc_t *pc, int64_t count) {$/;"	f
pc_destructor	other_filters/cqf/src/partitioned_counter.c	/^void pc_destructor(pc_t *pc)$/;"	f
pc_destructor	src/partitioned_counter.c	/^void pc_destructor(pc_t *pc)$/;"	f
pc_init	other_filters/cqf/src/partitioned_counter.c	/^int pc_init(pc_t *pc, int64_t *global_counter, uint32_t num_counters,$/;"	f
pc_init	src/partitioned_counter.c	/^int pc_init(pc_t *pc, int64_t *global_counter, uint32_t num_counters,$/;"	f
pc_ndistinct_elts	include/gqf_int.h	/^		pc_t pc_ndistinct_elts;$/;"	m	struct:quotient_filter_runtime_data
pc_ndistinct_elts	other_filters/cqf/include/gqf_int.h	/^		pc_t pc_ndistinct_elts;$/;"	m	struct:quotient_filter_runtime_data
pc_nelts	include/gqf_int.h	/^		pc_t pc_nelts;$/;"	m	struct:quotient_filter_runtime_data
pc_nelts	other_filters/cqf/include/gqf_int.h	/^		pc_t pc_nelts;$/;"	m	struct:quotient_filter_runtime_data
pc_noccupied_slots	include/gqf_int.h	/^		pc_t pc_noccupied_slots;$/;"	m	struct:quotient_filter_runtime_data
pc_noccupied_slots	other_filters/cqf/include/gqf_int.h	/^		pc_t pc_noccupied_slots;$/;"	m	struct:quotient_filter_runtime_data
pc_sync	other_filters/cqf/src/partitioned_counter.c	/^void pc_sync(pc_t *pc) {$/;"	f
pc_sync	src/partitioned_counter.c	/^void pc_sync(pc_t *pc) {$/;"	f
pc_t	include/partitioned_counter.h	/^typedef struct partitioned_counter pc_t;$/;"	t	typeref:struct:partitioned_counter
pc_t	other_filters/cqf/include/partitioned_counter.h	/^typedef struct partitioned_counter pc_t;$/;"	t	typeref:struct:partitioned_counter
pcq	external/splinterdb/src/pcq.h	/^} pcq;$/;"	t	typeref:struct:__anon34
pcq_alloc	external/splinterdb/src/pcq.h	/^pcq_alloc(platform_heap_id hid, size_t num_elems)$/;"	f
pcq_count	external/splinterdb/src/pcq.h	/^pcq_count(const pcq *q)$/;"	f
pcq_dequeue	external/splinterdb/src/pcq.h	/^pcq_dequeue(pcq   *q,    \/\/ IN$/;"	f
pcq_enqueue	external/splinterdb/src/pcq.h	/^pcq_enqueue(pcq *q, void *elem)$/;"	f
pcq_free	external/splinterdb/src/pcq.h	/^pcq_free(platform_heap_id hid, pcq *q)$/;"	f
pcq_is_empty	external/splinterdb/src/pcq.h	/^pcq_is_empty(const pcq *q)$/;"	f
pcq_is_full	external/splinterdb/src/pcq.h	/^pcq_is_full(const pcq *q)$/;"	f
pdata	external/splinterdb/src/trunk.h	/^   struct trunk_pivot_data *pdata;        \/\/ Pivot data for next trunk node$/;"	m	struct:trunk_async_ctxt	typeref:struct:trunk_async_ctxt::trunk_pivot_data
per_thread	external/splinterdb/src/clockcache.h	/^   } PLATFORM_CACHELINE_ALIGNED per_thread[MAX_THREADS];$/;"	m	struct:clockcache	typeref:struct:clockcache::__anon44
perc_latency	external/splinterdb/scripts/run_ycsb.py	/^                    perc_latency = int(float(stats_lines[11].split()[1]))$/;"	v
perf	external/splinterdb/tests/functional/splinter_test.h	/^   perf,$/;"	e	enum:test_type
perf_tests_all	external/splinterdb/scripts/list_test.py	/^                 perf_tests_btree + perf_tests_cache$/;"	v
perf_tests_btree	external/splinterdb/scripts/list_test.py	/^perf_tests_btree = [$/;"	v
perf_tests_cache	external/splinterdb/scripts/list_test.py	/^perf_tests_cache = [$/;"	v
perf_tests_parallelperf	external/splinterdb/scripts/list_test.py	/^perf_tests_parallelperf = [$/;"	v
perf_tests_semiseqperf	external/splinterdb/scripts/list_test.py	/^perf_tests_semiseqperf = [$/;"	v
perf_tests_seqperf	external/splinterdb/scripts/list_test.py	/^perf_tests_seqperf = [$/;"	v
perf_tests_splinter	external/splinterdb/scripts/list_test.py	/^perf_tests_splinter = [$/;"	v
period	external/splinterdb/tests/functional/btree_test.c	/^   uint64                  period;$/;"	m	struct:test_btree_config	file:
period	external/splinterdb/tests/functional/splinter_test.h	/^   uint64        period;       \/\/ if TEST_PERIODIC then repeat sequence after$/;"	m	struct:test_config
periodic	external/splinterdb/tests/functional/splinter_test.h	/^   periodic,$/;"	e	enum:test_type
perm_	other_filters/acf/src/packedtable.h	/^  PermEncoding perm_;$/;"	m	class:cuckoofilter::PackedTable
perm_	other_filters/acfsim/src/packedtable.h	/^  PermEncoding perm_;$/;"	m	class:cuckoofilter::PackedTable
perm_	other_filters/cf/src/packedtable.h	/^  PermEncoding perm_;$/;"	m	class:cuckoofilter::PackedTable
perms	external/splinterdb/src/io.h	/^   uint32 perms;$/;"	m	struct:io_config
pid	external/splinterdb/src/platform_linux/laio.h	/^   pid_t        pid;$/;"	m	struct:io_process_context
pincount	external/splinterdb/src/clockcache.h	/^   volatile uint8 *pincount;$/;"	m	struct:clockcache
pinned	external/splinterdb/src/mini_allocator.h	/^   bool32          pinned;$/;"	m	struct:mini_allocator
pivot	external/splinterdb/src/btree_private.h	/^   ondisk_key       pivot;$/;"	m	struct:index_entry
pivot	external/splinterdb/src/trunk.c	/^   key_buffer     pivot[TRUNK_MAX_PIVOTS];$/;"	m	struct:__anon42	file:
pivot	external/splinterdb/src/trunk.c	/^   ondisk_key     pivot;$/;"	m	struct:trunk_pivot_data	file:
pivot_data	external/splinterdb/src/btree_private.h	/^   btree_pivot_data pivot_data;$/;"	m	struct:index_entry
pivot_generation	external/splinterdb/src/srq.h	/^   uint64 pivot_generation;$/;"	m	struct:srq_data
pivot_generation	external/splinterdb/src/trunk.c	/^   uint64  pivot_generation[TRUNK_MAX_PIVOTS];$/;"	m	struct:trunk_compact_bundle_req	file:
pivot_generation	external/splinterdb/src/trunk.c	/^   uint64 pivot_generation; \/\/ counter incremented when new pivots are added$/;"	m	struct:trunk_hdr	file:
plan_move_more_entries_to_left	external/splinterdb/src/btree.c	/^plan_move_more_entries_to_left(const btree_config  *cfg,$/;"	f	file:
platform_align_bytes_reqd	external/splinterdb/src/platform_linux/platform_inline.h	/^platform_align_bytes_reqd(const size_t alignment, const size_t size)$/;"	f
platform_aligned_malloc	external/splinterdb/src/platform_linux/platform_inline.h	/^platform_aligned_malloc(const platform_heap_id heap_id,$/;"	f
platform_aligned_zalloc	external/splinterdb/src/platform_linux/platform.h	/^platform_aligned_zalloc(platform_heap_id heap_id,$/;"	f
platform_assert	external/splinterdb/src/platform_linux/platform.h	605;"	d
platform_assert_false	external/splinterdb/src/platform_linux/platform.c	/^platform_assert_false(const char *filename,$/;"	f
platform_assert_msg	external/splinterdb/src/platform_linux/platform.c	/^platform_assert_msg(platform_log_handle *log_handle,$/;"	f
platform_assert_status_ok	external/splinterdb/src/platform_linux/platform.h	217;"	d
platform_backtrace	external/splinterdb/src/platform_linux/platform.h	/^platform_backtrace(void **buffer, int size)$/;"	f
platform_batch_rwlock	external/splinterdb/src/platform_linux/platform_types.h	/^} PLATFORM_CACHELINE_ALIGNED platform_batch_rwlock;$/;"	t	typeref:struct:__anon31
platform_batch_rwlock_claim_loop	external/splinterdb/src/platform_linux/platform.c	/^platform_batch_rwlock_claim_loop(platform_batch_rwlock *lock, uint64 lock_idx)$/;"	f
platform_batch_rwlock_full_unlock	external/splinterdb/src/platform_linux/platform.c	/^platform_batch_rwlock_full_unlock(platform_batch_rwlock *lock, uint64 lock_idx)$/;"	f
platform_batch_rwlock_get	external/splinterdb/src/platform_linux/platform.c	/^platform_batch_rwlock_get(platform_batch_rwlock *lock, uint64 lock_idx)$/;"	f
platform_batch_rwlock_init	external/splinterdb/src/platform_linux/platform.c	/^platform_batch_rwlock_init(platform_batch_rwlock *lock)$/;"	f
platform_batch_rwlock_lock	external/splinterdb/src/platform_linux/platform.c	/^platform_batch_rwlock_lock(platform_batch_rwlock *lock, uint64 lock_idx)$/;"	f
platform_batch_rwlock_try_claim	external/splinterdb/src/platform_linux/platform.c	/^platform_batch_rwlock_try_claim(platform_batch_rwlock *lock, uint64 lock_idx)$/;"	f
platform_batch_rwlock_unclaim	external/splinterdb/src/platform_linux/platform.c	/^platform_batch_rwlock_unclaim(platform_batch_rwlock *lock, uint64 lock_idx)$/;"	f
platform_batch_rwlock_unget	external/splinterdb/src/platform_linux/platform.c	/^platform_batch_rwlock_unget(platform_batch_rwlock *lock, uint64 lock_idx)$/;"	f
platform_batch_rwlock_unlock	external/splinterdb/src/platform_linux/platform.c	/^platform_batch_rwlock_unlock(platform_batch_rwlock *lock, uint64 lock_idx)$/;"	f
platform_buffer_deinit	external/splinterdb/src/platform_linux/platform.c	/^platform_buffer_deinit(buffer_handle *bh)$/;"	f
platform_buffer_getaddr	external/splinterdb/src/platform_linux/platform.c	/^platform_buffer_getaddr(const buffer_handle *bh)$/;"	f
platform_buffer_init	external/splinterdb/src/platform_linux/platform.c	/^platform_buffer_init(buffer_handle *bh, size_t length)$/;"	f
platform_checksum128	external/splinterdb/src/platform_linux/platform_inline.h	28;"	d
platform_checksum32	external/splinterdb/src/platform_linux/platform_inline.h	26;"	d
platform_checksum64	external/splinterdb/src/platform_linux/platform_inline.h	27;"	d
platform_checksum_is_equal	external/splinterdb/src/platform_linux/platform_inline.h	/^platform_checksum_is_equal(checksum128 left, checksum128 right)$/;"	f
platform_claimlock	external/splinterdb/src/platform_linux/platform_types.h	/^} platform_claimlock;$/;"	t	typeref:struct:__anon30
platform_close_log_file	external/splinterdb/src/platform_linux/platform_inline.h	346;"	d
platform_close_log_stream	external/splinterdb/src/platform_linux/platform_inline.h	/^platform_close_log_stream(platform_stream_handle *stream,$/;"	f
platform_condvar	external/splinterdb/src/platform_linux/platform_types.h	/^typedef struct platform_condvar {$/;"	s
platform_condvar	external/splinterdb/src/platform_linux/platform_types.h	/^} platform_condvar;$/;"	t	typeref:struct:platform_condvar
platform_condvar_broadcast	external/splinterdb/src/platform_linux/platform.c	/^platform_condvar_broadcast(platform_condvar *cv)$/;"	f
platform_condvar_destroy	external/splinterdb/src/platform_linux/platform_inline.h	/^platform_condvar_destroy(platform_condvar *cv)$/;"	f
platform_condvar_init	external/splinterdb/src/platform_linux/platform.c	/^platform_condvar_init(platform_condvar *cv, platform_heap_id heap_id)$/;"	f
platform_condvar_lock	external/splinterdb/src/platform_linux/platform_inline.h	/^platform_condvar_lock(platform_condvar *cv)$/;"	f
platform_condvar_signal	external/splinterdb/src/platform_linux/platform.c	/^platform_condvar_signal(platform_condvar *cv)$/;"	f
platform_condvar_unlock	external/splinterdb/src/platform_linux/platform_inline.h	/^platform_condvar_unlock(platform_condvar *cv)$/;"	f
platform_condvar_wait	external/splinterdb/src/platform_linux/platform.c	/^platform_condvar_wait(platform_condvar *cv)$/;"	f
platform_default_log	external/splinterdb/src/platform_linux/platform_inline.h	307;"	d
platform_disable_tracing_large_frags	external/splinterdb/src/platform_linux/shmem.c	/^platform_disable_tracing_large_frags()$/;"	f
platform_disable_tracing_shm_allocs	external/splinterdb/src/platform_linux/shmem.c	/^platform_disable_tracing_shm_allocs()$/;"	f
platform_disable_tracing_shm_frees	external/splinterdb/src/platform_linux/shmem.c	/^platform_disable_tracing_shm_frees()$/;"	f
platform_disable_tracing_shm_ops	external/splinterdb/src/platform_linux/shmem.c	/^platform_disable_tracing_shm_ops()$/;"	f
platform_enable_tracing_large_frags	external/splinterdb/src/platform_linux/shmem.c	/^platform_enable_tracing_large_frags()$/;"	f
platform_enable_tracing_shm_allocs	external/splinterdb/src/platform_linux/shmem.c	/^platform_enable_tracing_shm_allocs()$/;"	f
platform_enable_tracing_shm_frees	external/splinterdb/src/platform_linux/shmem.c	/^platform_enable_tracing_shm_frees()$/;"	f
platform_enable_tracing_shm_ops	external/splinterdb/src/platform_linux/shmem.c	/^platform_enable_tracing_shm_ops()$/;"	f
platform_error_log	external/splinterdb/src/platform_linux/platform_inline.h	312;"	d
platform_flush_log_stream	external/splinterdb/src/platform_linux/platform_inline.h	/^platform_flush_log_stream(platform_stream_handle *stream)$/;"	f
platform_free	external/splinterdb/src/platform_linux/platform.h	744;"	d
platform_free_from_heap	external/splinterdb/src/platform_linux/platform_inline.h	/^platform_free_from_heap(platform_heap_id heap_id,$/;"	f
platform_free_volatile	external/splinterdb/src/platform_linux/platform.h	751;"	d
platform_free_volatile_from_heap	external/splinterdb/src/platform_linux/platform.h	/^platform_free_volatile_from_heap(platform_heap_id heap_id,$/;"	f
platform_get_heap_id	external/splinterdb/src/platform_linux/platform_inline.h	/^platform_get_heap_id(void)$/;"	f
platform_get_module_id	external/splinterdb/src/platform_linux/platform_inline.h	/^platform_get_module_id()$/;"	f
platform_get_real_time	external/splinterdb/src/platform_linux/platform_inline.h	/^platform_get_real_time(void)$/;"	f
platform_get_stdout_stream	external/splinterdb/src/platform_linux/platform.c	/^platform_get_stdout_stream(void)$/;"	f
platform_get_tid	external/splinterdb/src/platform_linux/platform_inline.h	/^platform_get_tid()$/;"	f
platform_get_timestamp	external/splinterdb/src/platform_linux/platform_inline.h	/^platform_get_timestamp(void)$/;"	f
platform_getpid	external/splinterdb/src/platform_linux/platform_inline.h	/^platform_getpid()$/;"	f
platform_hash128	external/splinterdb/src/platform_linux/platform_inline.h	32;"	d
platform_hash32	external/splinterdb/src/platform_linux/platform_inline.h	30;"	d
platform_hash64	external/splinterdb/src/platform_linux/platform_inline.h	31;"	d
platform_heap_destroy	external/splinterdb/src/platform_linux/platform.c	/^platform_heap_destroy(platform_heap_id *heap_id)$/;"	f
platform_heap_get_splinterdb_handle	external/splinterdb/src/platform_linux/shmem.c	/^platform_heap_get_splinterdb_handle(const platform_heap_id heap_id)$/;"	f
platform_heap_id	external/splinterdb/src/platform_linux/platform_types.h	/^typedef void *platform_heap_id;$/;"	t
platform_heap_id_to_shmaddr	external/splinterdb/src/platform_linux/shmem.c	/^platform_heap_id_to_shmaddr(platform_heap_id hid)$/;"	f
platform_histo_create	external/splinterdb/src/platform_linux/platform.c	/^platform_histo_create(platform_heap_id       heap_id,$/;"	f
platform_histo_destroy	external/splinterdb/src/platform_linux/platform.c	/^platform_histo_destroy(platform_heap_id       heap_id,$/;"	f
platform_histo_handle	external/splinterdb/src/platform_linux/platform_types.h	/^} * platform_histo_handle;$/;"	t	typeref:struct:__anon33
platform_histo_insert	external/splinterdb/src/platform_linux/platform_inline.h	/^platform_histo_insert(platform_histo_handle histo, int64 datum)$/;"	f
platform_histo_merge_in	external/splinterdb/src/platform_linux/platform_inline.h	/^platform_histo_merge_in(platform_histo_handle dest_histo,$/;"	f
platform_histo_print	external/splinterdb/src/platform_linux/platform.c	/^platform_histo_print(platform_histo_handle histo,$/;"	f
platform_init_log_file_handles	external/splinterdb/src/platform_linux/platform.c	/^void __attribute__((constructor)) platform_init_log_file_handles(void)$/;"	f
platform_io_handle	external/splinterdb/src/platform_linux/platform_types.h	/^typedef struct laio_handle platform_io_handle;$/;"	t	typeref:struct:laio_handle
platform_log	external/splinterdb/src/platform_linux/platform_inline.h	301;"	d
platform_log_handle	external/splinterdb/include/splinterdb/platform_linux/public_platform.h	/^typedef FILE platform_log_handle;$/;"	t
platform_log_stream	external/splinterdb/src/platform_linux/platform_inline.h	317;"	d
platform_log_stream_to_log_handle	external/splinterdb/src/platform_linux/platform_inline.h	/^platform_log_stream_to_log_handle(platform_stream_handle *stream)$/;"	f
platform_log_stream_to_string	external/splinterdb/src/platform_linux/platform_inline.h	/^platform_log_stream_to_string(platform_stream_handle *stream)$/;"	f
platform_module_id	external/splinterdb/src/platform_linux/platform_types.h	/^typedef void *platform_module_id;$/;"	t
platform_mutex	external/splinterdb/src/platform_linux/platform_types.h	/^} platform_mutex;$/;"	t	typeref:struct:__anon29
platform_mutex_destroy	external/splinterdb/src/platform_linux/platform.c	/^platform_mutex_destroy(platform_mutex *lock)$/;"	f
platform_mutex_init	external/splinterdb/src/platform_linux/platform.c	/^platform_mutex_init(platform_mutex    *lock,$/;"	f
platform_mutex_lock	external/splinterdb/src/platform_linux/platform_inline.h	/^platform_mutex_lock(platform_mutex *lock)$/;"	f
platform_mutex_unlock	external/splinterdb/src/platform_linux/platform_inline.h	/^platform_mutex_unlock(platform_mutex *lock)$/;"	f
platform_open_log_file	external/splinterdb/src/platform_linux/platform_inline.h	339;"	d
platform_open_log_stream	external/splinterdb/src/platform_linux/platform_inline.h	/^platform_open_log_stream(platform_stream_handle *stream)$/;"	f
platform_pause	external/splinterdb/src/platform_linux/platform_inline.h	/^platform_pause()$/;"	f
platform_popcount	external/splinterdb/src/platform_linux/platform_inline.h	/^platform_popcount(uint32 x)$/;"	f
platform_realloc	external/splinterdb/src/platform_linux/platform_inline.h	/^platform_realloc(const platform_heap_id heap_id,$/;"	f
platform_save_usage_stats	external/splinterdb/src/platform_linux/shmem.c	/^platform_save_usage_stats(shminfo_usage_stats *usage, shmem_heap *shm)$/;"	f
platform_semaphore	external/splinterdb/src/platform_linux/platform_types.h	/^typedef sem_t platform_semaphore;$/;"	t
platform_semaphore_destroy	external/splinterdb/src/platform_linux/platform_inline.h	/^platform_semaphore_destroy(platform_semaphore *sema)$/;"	f
platform_semaphore_init	external/splinterdb/src/platform_linux/platform_inline.h	/^platform_semaphore_init(platform_semaphore *sema,$/;"	f
platform_semaphore_post	external/splinterdb/src/platform_linux/platform_inline.h	/^platform_semaphore_post(platform_semaphore *sema)$/;"	f
platform_semaphore_try_wait	external/splinterdb/src/platform_linux/platform_inline.h	/^platform_semaphore_try_wait(platform_semaphore *sema)$/;"	f
platform_semaphore_wait	external/splinterdb/src/platform_linux/platform_inline.h	/^platform_semaphore_wait(platform_semaphore *sema)$/;"	f
platform_set_log_streams	external/splinterdb/src/platform_linux/platform.c	/^platform_set_log_streams(platform_log_handle *info_stream,$/;"	f
platform_set_tid	external/splinterdb/src/platform_linux/platform_inline.h	/^platform_set_tid(threadid t)$/;"	f
platform_shm_alloc	external/splinterdb/src/platform_linux/shmem.c	/^platform_shm_alloc(platform_heap_id hid,$/;"	f
platform_shm_ctrlblock_size	external/splinterdb/src/platform_linux/shmem.c	/^platform_shm_ctrlblock_size()$/;"	f
platform_shm_find_large	external/splinterdb/src/platform_linux/shmem.c	/^platform_shm_find_large(shmem_heap *shm,$/;"	f	file:
platform_shm_free	external/splinterdb/src/platform_linux/shmem.c	/^platform_shm_free(platform_heap_id hid,$/;"	f
platform_shm_heap_id_valid	external/splinterdb/src/platform_linux/shmem.c	/^platform_shm_heap_id_valid(const platform_heap_id heap_id)$/;"	f
platform_shm_heap_valid	external/splinterdb/src/platform_linux/shmem.c	/^platform_shm_heap_valid(shmem_heap *shmheap)$/;"	f
platform_shm_hip	external/splinterdb/src/platform_linux/shmem.c	/^platform_shm_hip(platform_heap_id hid)$/;"	f	file:
platform_shm_lop	external/splinterdb/src/platform_linux/shmem.c	/^platform_shm_lop(platform_heap_id hid)$/;"	f	file:
platform_shm_next_free_addr	external/splinterdb/src/platform_linux/shmem.c	/^platform_shm_next_free_addr(platform_heap_id heap_id)$/;"	f
platform_shm_print_usage	external/splinterdb/src/platform_linux/shmem.c	/^platform_shm_print_usage(platform_heap_id hid)$/;"	f
platform_shm_print_usage_stats	external/splinterdb/src/platform_linux/shmem.c	/^platform_shm_print_usage_stats(shminfo_usage_stats *usage)$/;"	f
platform_shm_realloc	external/splinterdb/src/platform_linux/shmem.c	/^platform_shm_realloc(platform_heap_id hid,$/;"	f
platform_shm_set_splinterdb_handle	external/splinterdb/src/platform_linux/shmem.c	/^platform_shm_set_splinterdb_handle(platform_heap_id heap_id, void *addr)$/;"	f
platform_shm_trace_allocs	external/splinterdb/src/platform_linux/shmem.c	/^platform_shm_trace_allocs(shmem_heap  *shm,$/;"	f	file:
platform_shm_tracing_init	external/splinterdb/src/platform_linux/shmem.c	/^platform_shm_tracing_init(const bool trace_shmem,$/;"	f
platform_shm_track_free	external/splinterdb/src/platform_linux/shmem.c	/^platform_shm_track_free(shmem_heap *shm,$/;"	f	file:
platform_shm_track_large_alloc	external/splinterdb/src/platform_linux/shmem.c	/^platform_shm_track_large_alloc(shmem_heap *shm, void *addr, size_t size)$/;"	f	file:
platform_shmbytes_free	external/splinterdb/src/platform_linux/shmem.c	/^platform_shmbytes_free(platform_heap_id heap_id)$/;"	f
platform_shmbytes_used	external/splinterdb/src/platform_linux/shmem.c	/^platform_shmbytes_used(platform_heap_id heap_id)$/;"	f
platform_shmcreate	external/splinterdb/src/platform_linux/shmem.c	/^platform_shmcreate(size_t            size,$/;"	f
platform_shmdestroy	external/splinterdb/src/platform_linux/shmem.c	/^platform_shmdestroy(platform_heap_id *hid_out)$/;"	f
platform_shmsize	external/splinterdb/src/platform_linux/shmem.c	/^platform_shmsize(platform_heap_id heap_id)$/;"	f
platform_sleep_ns	external/splinterdb/src/platform_linux/platform_inline.h	/^platform_sleep_ns(uint64 ns)$/;"	f
platform_sort_cmpfn	external/splinterdb/src/platform_linux/platform.h	/^typedef int (*platform_sort_cmpfn)(const void *a, const void *b, void *arg);$/;"	t
platform_sort_slow	external/splinterdb/src/platform_linux/platform.c	/^platform_sort_slow(void               *base,$/;"	f
platform_spin_lock	external/splinterdb/src/platform_linux/platform_inline.h	/^platform_spin_lock(platform_spinlock *lock)$/;"	f
platform_spin_unlock	external/splinterdb/src/platform_linux/platform_inline.h	/^platform_spin_unlock(platform_spinlock *lock)$/;"	f
platform_spinlock	external/splinterdb/src/platform_linux/platform_types.h	/^typedef pthread_spinlock_t platform_spinlock;$/;"	t
platform_spinlock_destroy	external/splinterdb/src/platform_linux/platform.c	/^platform_spinlock_destroy(platform_spinlock *lock)$/;"	f
platform_spinlock_init	external/splinterdb/src/platform_linux/platform.c	/^platform_spinlock_init(platform_spinlock *lock,$/;"	f
platform_status	external/splinterdb/src/platform_linux/platform.h	/^} platform_status;$/;"	t	typeref:struct:__anon24
platform_status_to_int	external/splinterdb/src/splinterdb.c	/^platform_status_to_int(const platform_status status) \/\/ IN$/;"	f	file:
platform_status_to_string	external/splinterdb/src/platform_linux/platform_inline.h	/^platform_status_to_string(const platform_status status)$/;"	f
platform_stream_handle	external/splinterdb/src/platform_linux/platform_types.h	/^} platform_stream_handle;$/;"	t	typeref:struct:__anon28
platform_strnlen	external/splinterdb/src/platform_linux/platform_inline.h	/^platform_strnlen(const char *s, size_t maxlen)$/;"	f
platform_strtok_ctx	external/splinterdb/src/platform_linux/platform.h	/^} platform_strtok_ctx;$/;"	t	typeref:struct:__anon27
platform_strtok_r	external/splinterdb/src/platform_linux/platform.c	/^platform_strtok_r(char *str, const char *delim, platform_strtok_ctx *ctx)$/;"	f
platform_thread	external/splinterdb/src/platform_linux/platform_types.h	/^typedef pthread_t platform_thread;$/;"	t
platform_thread_cleanup_pop	external/splinterdb/src/platform_linux/platform_inline.h	354;"	d
platform_thread_cleanup_push	external/splinterdb/src/platform_linux/platform_inline.h	351;"	d
platform_thread_create	external/splinterdb/src/platform_linux/platform.c	/^platform_thread_create(platform_thread       *thread,$/;"	f
platform_thread_id_self	external/splinterdb/src/platform_linux/platform.c	/^platform_thread_id_self()$/;"	f
platform_thread_join	external/splinterdb/src/platform_linux/platform.c	/^platform_thread_join(platform_thread thread)$/;"	f
platform_thread_worker	external/splinterdb/src/platform_linux/platform.h	/^typedef void (*platform_thread_worker)(void *);$/;"	t
platform_throttled_default_log	external/splinterdb/src/platform_linux/platform_inline.h	329;"	d
platform_throttled_error_log	external/splinterdb/src/platform_linux/platform_inline.h	334;"	d
platform_throttled_log	external/splinterdb/src/platform_linux/platform_inline.h	324;"	d
platform_timestamp_diff	external/splinterdb/src/platform_linux/platform_inline.h	/^platform_timestamp_diff(timestamp start, timestamp end)$/;"	f
platform_timestamp_elapsed	external/splinterdb/src/platform_linux/platform_inline.h	/^platform_timestamp_elapsed(timestamp tv)$/;"	f
platform_trace_large_frags	external/splinterdb/src/platform_linux/shmem.c	/^platform_trace_large_frags(shmem_heap *shm)$/;"	f	file:
platform_use_hugetlb	external/splinterdb/src/platform_linux/platform.c	/^bool32 platform_use_hugetlb = FALSE;$/;"	v
platform_use_mlock	external/splinterdb/src/platform_linux/platform.c	/^bool32 platform_use_mlock   = FALSE;$/;"	v
platform_valid_addr_in_heap	external/splinterdb/src/platform_linux/shmem.c	/^platform_valid_addr_in_heap(platform_heap_id heap_id, const void *addr)$/;"	f
platform_valid_addr_in_shm	external/splinterdb/src/platform_linux/shmem.c	/^platform_valid_addr_in_shm(shmem_heap *shmaddr, const void *addr)$/;"	f	file:
platform_yield	external/splinterdb/src/platform_linux/platform_inline.h	/^platform_yield()$/;"	f
pointer_byte_offset	external/splinterdb/src/util.h	/^pointer_byte_offset(void *base, int64 offset)$/;"	f
popcnt	other_filters/cqf/src/gqf.c	/^static inline int popcnt(uint64_t val)$/;"	f	file:
popcnt	other_filters/taf/src/bit_util.c	/^int popcnt(uint64_t val) {$/;"	f
popcnt	src/gqf.c	/^static inline int popcnt(uint64_t val)$/;"	f	file:
popcnt	src/gqf_backup.c	/^static inline int popcnt(uint64_t val)$/;"	f	file:
popcnt	src/taf.cc	/^int popcnt(uint64_t val) {$/;"	f
popcntv	other_filters/cqf/src/gqf.c	/^static inline int popcntv(const uint64_t val, int ignore)$/;"	f	file:
popcntv	src/gqf.c	/^static inline int popcntv(const uint64_t val, int ignore)$/;"	f	file:
popcntv	src/gqf_backup.c	/^static inline int popcntv(const uint64_t val, int ignore)$/;"	f	file:
pos	external/splinterdb/src/mini_allocator.c	/^   uint64 pos;$/;"	m	struct:mini_meta_hdr	file:
pos	external/splinterdb/src/shard_log.h	/^   uint64            pos;$/;"	m	struct:shard_log_iterator
pos	external/splinterdb/tests/unit/splinter_test.c	/^   uint64        pos;$/;"	m	struct:shadow_check_tuple_arg	file:
pos_queries	external/splinterdb/tests/functional/ycsb_test.c	/^   latency_table pos_queries;$/;"	m	struct:latency_tables	file:
precheckin_tests	external/splinterdb/scripts/list_test.py	/^precheckin_tests = [$/;"	v
precheckin_tests_no_args	external/splinterdb/scripts/list_test.py	/^precheckin_tests_no_args = [$/;"	v
prefetches_issued	external/splinterdb/src/cache.h	/^   uint64 prefetches_issued[NUM_PAGE_TYPES];$/;"	m	struct:cache_stats
prev	external/splinterdb/src/iterator.h	/^   iterator_step_fn  prev;$/;"	m	struct:iterator_ops
prev	external/splinterdb/src/task.h	/^   struct task *prev;$/;"	m	struct:task	typeref:struct:task::task
prev_addr	external/splinterdb/src/btree_private.h	/^   uint64      prev_addr;$/;"	m	struct:btree_hdr
prev_state	external/splinterdb/src/btree.h	/^   btree_async_state prev_state; \/\/ Previous state$/;"	m	struct:btree_async_ctxt
prev_state	external/splinterdb/src/routing_filter.h	/^   routing_async_state prev_state; \/\/ Previous state$/;"	m	struct:routing_async_ctxt
prev_state	external/splinterdb/src/trunk.h	/^   trunk_async_state prev_state; \/\/ state machine's previous state$/;"	m	struct:trunk_async_ctxt
print	external/splinterdb/src/cache.h	/^   cache_print_fn       print;$/;"	m	struct:cache_ops
print	external/splinterdb/src/iterator.h	/^   iterator_print_fn print;$/;"	m	struct:iterator_ops
print_allocated	external/splinterdb/src/allocator.h	/^   print_fn print_allocated;$/;"	m	struct:allocator_ops
print_backtrace	other_filters/taf/src/exaf.c	/^void print_backtrace() {$/;"	f
print_backtrace	other_filters/taf/src/rsqf.c	/^void print_backtrace() {$/;"	f
print_backtrace	other_filters/taf/src/splinter_taf.c	/^void print_backtrace() {$/;"	f
print_backtrace	other_filters/taf/src/taf.c	/^void print_backtrace() {$/;"	f
print_backtrace	other_filters/taf/src/taf.cc	/^void print_backtrace() {$/;"	f
print_backtrace	other_filters/taf/src/taf_sim.c	/^void print_backtrace() {$/;"	f
print_backtrace	other_filters/taf/src/utaf.c	/^void print_backtrace() {$/;"	f
print_backtrace	src/taf.cc	/^void print_backtrace() {$/;"	f
print_bin_hash	src/test_bulk.c	/^void print_bin_hash(uint64_t num, int qbits, int rbits) {$/;"	f
print_bin_hash	src/test_whitelist.c	/^void print_bin_hash(uint64_t num, int qbits, int rbits) {$/;"	f
print_errormsg	external/splinterdb/tests/unit/main.c	/^print_errormsg(const char *const fmt, ...)$/;"	f	file:
print_exaf	other_filters/taf/src/exaf.c	/^void print_exaf(ExAF* filter) {$/;"	f
print_exaf_block	other_filters/taf/src/exaf.c	/^void print_exaf_block(ExAF* filter, size_t block_index) {$/;"	f
print_exaf_metadata	other_filters/taf/src/exaf.c	/^void print_exaf_metadata(ExAF* filter) {$/;"	f
print_exts	other_filters/taf/src/arcd.c	/^void print_exts(Ext exts[64]) {$/;"	f
print_exts	src/taf.cc	/^void print_exts(Ext exts[64]) {$/;"	f
print_fn	external/splinterdb/src/allocator.h	/^typedef void (*print_fn)(allocator *al);$/;"	t
print_latency_cdf	external/splinterdb/tests/functional/ycsb_test.c	/^print_latency_cdf(platform_log_handle *log_handle, latency_table table)$/;"	f
print_latency_table	external/splinterdb/tests/functional/ycsb_test.c	/^print_latency_table(latency_table table, platform_log_handle *log_handle)$/;"	f
print_operation_statistics	external/splinterdb/tests/functional/ycsb_test.c	/^print_operation_statistics(platform_log_handle *output,$/;"	f
print_ping_metrics	external/splinterdb/examples/splinterdb_custom_ipv4_addr_sortcmp_example.c	/^print_ping_metrics(int kctr, slice key, slice value)$/;"	f	file:
print_rsqf	other_filters/taf/src/rsqf.c	/^void print_rsqf(RSQF* filter) {$/;"	f
print_rsqf_block	other_filters/taf/src/rsqf.c	/^void print_rsqf_block(RSQF* filter, size_t block_index) {$/;"	f
print_rsqf_metadata	other_filters/taf/src/rsqf.c	/^void print_rsqf_metadata(RSQF* filter) {$/;"	f
print_sels	other_filters/taf/src/splinter_taf.c	/^static void print_sels(const int sels[64]) {$/;"	f	file:
print_sels	other_filters/taf/src/taf.c	/^static void print_sels(const int sels[64]) {$/;"	f	file:
print_sels	other_filters/taf/src/taf.cc	/^static void print_sels(const int sels[64]) {$/;"	f	file:
print_sels	other_filters/taf/src/taf_sim.c	/^static void print_sels(const int sels[64]) {$/;"	f	file:
print_sels	other_filters/taf/src/utaf.c	/^static void print_sels(const uint8_t sels[64]) {$/;"	f	file:
print_sels	src/taf.cc	/^static void print_sels(const int sels[64]) {$/;"	f	file:
print_set	other_filters/taf/src/set.c	/^void print_set(Setnode* set, int set_size) {$/;"	f
print_set	src/taf.cc	/^void print_set(Setnode* set, int set_size) {$/;"	f
print_statistics_file	external/splinterdb/tests/functional/ycsb_test.c	/^print_statistics_file(platform_log_handle *output,$/;"	f
print_stats	external/splinterdb/src/allocator.h	/^   print_fn print_stats;$/;"	m	struct:allocator_ops
print_stats	external/splinterdb/src/cache.h	/^   cache_print_fn       print_stats;$/;"	m	struct:cache_ops
print_taf	other_filters/taf/src/splinter_taf.c	/^void print_taf(TAF* filter) {$/;"	f
print_taf	other_filters/taf/src/taf.c	/^void print_taf(TAF* filter) {$/;"	f
print_taf	other_filters/taf/src/taf.cc	/^void print_taf(TAF* filter) {$/;"	f
print_taf	other_filters/taf/src/taf_sim.c	/^void print_taf(TAF* filter) {$/;"	f
print_taf	src/taf.cc	/^void print_taf(TAF* filter) {$/;"	f
print_taf_block	other_filters/taf/src/splinter_taf.c	/^void print_taf_block(TAF* filter, size_t block_index) {$/;"	f
print_taf_block	other_filters/taf/src/taf.c	/^void print_taf_block(TAF* filter, size_t block_index) {$/;"	f
print_taf_block	other_filters/taf/src/taf.cc	/^void print_taf_block(TAF* filter, size_t block_index) {$/;"	f
print_taf_block	other_filters/taf/src/taf_sim.c	/^void print_taf_block(TAF* filter, size_t block_index) {$/;"	f
print_taf_block	src/taf.cc	/^void print_taf_block(TAF* filter, size_t block_index) {$/;"	f
print_taf_metadata	other_filters/taf/src/splinter_taf.c	/^void print_taf_metadata(TAF* filter) {$/;"	f
print_taf_metadata	other_filters/taf/src/taf.c	/^void print_taf_metadata(TAF* filter) {$/;"	f
print_taf_metadata	other_filters/taf/src/taf.cc	/^void print_taf_metadata(TAF* filter) {$/;"	f
print_taf_metadata	other_filters/taf/src/taf_sim.c	/^void print_taf_metadata(TAF* filter) {$/;"	f
print_taf_metadata	src/taf.cc	/^void print_taf_metadata(TAF* filter) {$/;"	f
print_taf_stats	other_filters/taf/src/splinter_taf.c	/^void print_taf_stats(TAF* filter) {$/;"	f
print_taf_stats	other_filters/taf/src/taf.c	/^void print_taf_stats(TAF* filter) {$/;"	f
print_taf_stats	other_filters/taf/src/taf.cc	/^void print_taf_stats(TAF* filter) {$/;"	f
print_taf_stats	other_filters/taf/src/taf_sim.c	/^void print_taf_stats(TAF* filter) {$/;"	f
print_taf_stats	src/taf.cc	/^void print_taf_stats(TAF* filter) {$/;"	f
print_test_suite_names	external/splinterdb/tests/unit/main.c	/^print_test_suite_names(const struct ctest *test_begin,$/;"	f	file:
print_utaf	other_filters/taf/src/utaf.c	/^void print_utaf(FullTAF* filter) {$/;"	f
print_utaf_block	other_filters/taf/src/utaf.c	/^void print_utaf_block(FullTAF* filter, size_t block_index) {$/;"	f
print_utaf_metadata	other_filters/taf/src/utaf.c	/^void print_utaf_metadata(FullTAF* filter) {$/;"	f
print_utaf_stats	other_filters/taf/src/utaf.c	/^void print_utaf_stats(FullTAF* filter) {$/;"	f
priority	external/splinterdb/src/srq.h	/^   uint64 priority;$/;"	m	struct:srq_data
probably_is_empty	other_filters/cqf/src/gqf.c	/^static inline int probably_is_empty(const QF *qf, uint64_t slot_index)$/;"	f	file:
probably_is_empty	src/gqf.c	/^static inline int probably_is_empty(const QF *qf, uint64_t slot_index)$/;"	f	file:
probably_is_empty	src/gqf_backup.c	/^static inline int probably_is_empty(const QF *qf, uint64_t slot_index)$/;"	f	file:
process	external/splinterdb/src/memtable.h	/^   process_fn process;$/;"	m	struct:memtable_context
process_ctxt	external/splinterdb/src/memtable.h	/^   void      *process_ctxt;$/;"	m	struct:memtable_context
process_fn	external/splinterdb/src/memtable.h	/^typedef void (*process_fn)(void *arg, uint64 generation);$/;"	t
ptr	external/splinterdb/src/platform_linux/platform_inline.h	/^                        void            *ptr,$/;"	v
q	other_filters/taf/src/exaf.h	/^  size_t q;                     \/* length of quotient *\/$/;"	m	struct:exaf_t
q	other_filters/taf/src/rsqf.h	/^  size_t q;                     \/* length of quotient *\/$/;"	m	struct:rsqf_t
q	other_filters/taf/src/splinter_taf.h	/^  size_t q;                     \/* length of quotient *\/$/;"	m	struct:taf_t
q	other_filters/taf/src/taf.h	/^  size_t q;                     \/* length of quotient *\/$/;"	m	struct:taf_t
q	other_filters/taf/src/taf_sim.h	/^  size_t q;                     \/* length of quotient *\/$/;"	m	struct:taf_t
q	other_filters/taf/src/utaf.h	/^  size_t q;                     \/* length of quotient *\/$/;"	m	struct:utaf_t
q	src/taf.cc	/^  size_t q;                     \/* length of quotient *\/$/;"	m	struct:taf_t	file:
qf	include/gqf_int.h	/^		const QF *qf;$/;"	m	struct:quotient_filter_iterator
qf	other_filters/cqf/include/gqf_int.h	/^		const QF *qf;$/;"	m	struct:quotient_filter_iterator
qf	other_filters/cqf/src/test_parallel.c	/^	QF *qf;$/;"	m	struct:__anon1	file:
qf	src/test_bulk.c	/^QF qf;$/;"	v
qf	src/test_driver.c	/^	QF *qf;$/;"	m	struct:__anon8	file:
qf	src/test_whitelist.c	/^QF qf;$/;"	v
qf_adapt	src/gqf.c	/^int qf_adapt(QF *qf, uint64_t index, uint64_t key, uint64_t other_key, uint64_t *ret_hash, uint8_t flags) {$/;"	f
qf_adapt	src/gqf_backup.c	/^int qf_adapt(QF *qf, uint64_t index, uint64_t key, uint64_t other_key, uint64_t *ret_hash, uint8_t flags) {$/;"	f
qf_adapt_using_ll_table	src/gqf.c	/^int qf_adapt_using_ll_table(QF *qf, uint64_t orig_key, uint64_t fp_key, uint64_t minirun_rank, uint8_t flags) {$/;"	f
qf_bulk_insert	src/gqf.c	/^void qf_bulk_insert(const QF *qf, uint64_t *keys, int nkeys) {$/;"	f
qf_bulk_insert	src/gqf_backup.c	/^void qf_bulk_insert(const QF *qf, uint64_t *keys, int nkeys) {$/;"	f
qf_closefile	other_filters/cqf/src/gqf_file.c	/^bool qf_closefile(QF* qf)$/;"	f
qf_closefile	src/gqf_file.c	/^bool qf_closefile(QF* qf)$/;"	f
qf_copy	other_filters/cqf/src/gqf.c	/^void qf_copy(QF *dest, const QF *src)$/;"	f
qf_copy	src/gqf.c	/^void qf_copy(QF *dest, const QF *src)$/;"	f
qf_copy	src/gqf_backup.c	/^void qf_copy(QF *dest, const QF *src)$/;"	f
qf_count_key_value	other_filters/cqf/src/gqf.c	/^uint64_t qf_count_key_value(const QF *qf, uint64_t key, uint64_t value,$/;"	f
qf_count_key_value	src/gqf.c	/^uint64_t qf_count_key_value(const QF *qf, uint64_t key, uint64_t value,$/;"	f
qf_count_key_value	src/gqf_backup.c	/^uint64_t qf_count_key_value(const QF *qf, uint64_t key, uint64_t value,$/;"	f
qf_data_config_init	src/splinter_util.c	/^data_config qf_data_config_init() {$/;"	f
qf_delete_key_value	other_filters/cqf/src/gqf.c	/^int qf_delete_key_value(QF *qf, uint64_t key, uint64_t value, uint8_t flags)$/;"	f
qf_deletefile	other_filters/cqf/src/gqf_file.c	/^bool qf_deletefile(QF* qf)$/;"	f
qf_deletefile	src/gqf_file.c	/^bool qf_deletefile(QF* qf)$/;"	f
qf_deserialize	other_filters/cqf/src/gqf_file.c	/^uint64_t qf_deserialize(QF *qf, const char *filename)$/;"	f
qf_deserialize	src/gqf_file.c	/^uint64_t qf_deserialize(QF *qf, const char *filename)$/;"	f
qf_destroy	other_filters/cqf/src/gqf.c	/^void *qf_destroy(QF *qf)$/;"	f
qf_destroy	src/gqf.c	/^void *qf_destroy(QF *qf)$/;"	f
qf_destroy	src/gqf_backup.c	/^void *qf_destroy(QF *qf)$/;"	f
qf_dump	other_filters/cqf/src/gqf.c	/^void qf_dump(const QF *qf)$/;"	f
qf_dump	src/gqf.c	/^void qf_dump(const QF *qf)$/;"	f
qf_dump	src/gqf_backup.c	/^void qf_dump(const QF *qf)$/;"	f
qf_dump_block	other_filters/cqf/src/gqf.c	/^static inline void qf_dump_block(const QF *qf, uint64_t i)$/;"	f	file:
qf_dump_block	src/gqf.c	/^static inline void qf_dump_block(const QF *qf, uint64_t i)$/;"	f	file:
qf_dump_block	src/gqf_backup.c	/^static inline void qf_dump_block(const QF *qf, uint64_t i)$/;"	f	file:
qf_dump_metadata	other_filters/cqf/src/gqf.c	/^void qf_dump_metadata(const QF *qf) {$/;"	f
qf_dump_metadata	src/gqf.c	/^void qf_dump_metadata(const QF *qf) {$/;"	f
qf_dump_metadata	src/gqf_backup.c	/^void qf_dump_metadata(const QF *qf) {$/;"	f
qf_free	other_filters/cqf/src/gqf.c	/^bool qf_free(QF *qf)$/;"	f
qf_free	src/gqf.c	/^bool qf_free(QF *qf)$/;"	f
qf_free	src/gqf_backup.c	/^bool qf_free(QF *qf)$/;"	f
qf_get_bits_per_slot	other_filters/cqf/src/gqf.c	/^uint64_t qf_get_bits_per_slot(const QF *qf) {$/;"	f
qf_get_bits_per_slot	src/gqf.c	/^uint64_t qf_get_bits_per_slot(const QF *qf) {$/;"	f
qf_get_bits_per_slot	src/gqf_backup.c	/^uint64_t qf_get_bits_per_slot(const QF *qf) {$/;"	f
qf_get_count_using_ll_table	src/gqf.c	/^int qf_get_count_using_ll_table(const QF *qf, uint64_t key, uint64_t *ret_hash, uint8_t *ret_minirun_rank, uint8_t flags) {$/;"	f
qf_get_hash_range	other_filters/cqf/src/gqf.c	/^__uint128_t qf_get_hash_range(const QF *qf) {$/;"	f
qf_get_hash_range	src/gqf.c	/^__uint128_t qf_get_hash_range(const QF *qf) {$/;"	f
qf_get_hash_range	src/gqf_backup.c	/^__uint128_t qf_get_hash_range(const QF *qf) {$/;"	f
qf_get_hash_seed	other_filters/cqf/src/gqf.c	/^uint64_t qf_get_hash_seed(const QF *qf) {$/;"	f
qf_get_hash_seed	src/gqf.c	/^uint64_t qf_get_hash_seed(const QF *qf) {$/;"	f
qf_get_hash_seed	src/gqf_backup.c	/^uint64_t qf_get_hash_seed(const QF *qf) {$/;"	f
qf_get_hashmode	other_filters/cqf/src/gqf.c	/^enum qf_hashmode qf_get_hashmode(const QF *qf) {$/;"	f
qf_get_hashmode	src/gqf.c	/^enum qf_hashmode qf_get_hashmode(const QF *qf) {$/;"	f
qf_get_hashmode	src/gqf_backup.c	/^enum qf_hashmode qf_get_hashmode(const QF *qf) {$/;"	f
qf_get_nslots	other_filters/cqf/src/gqf.c	/^uint64_t qf_get_nslots(const QF *qf) {$/;"	f
qf_get_nslots	src/gqf.c	/^uint64_t qf_get_nslots(const QF *qf) {$/;"	f
qf_get_nslots	src/gqf_backup.c	/^uint64_t qf_get_nslots(const QF *qf) {$/;"	f
qf_get_num_distinct_key_value_pairs	other_filters/cqf/src/gqf.c	/^uint64_t qf_get_num_distinct_key_value_pairs(const QF *qf) {$/;"	f
qf_get_num_distinct_key_value_pairs	src/gqf.c	/^uint64_t qf_get_num_distinct_key_value_pairs(const QF *qf) {$/;"	f
qf_get_num_distinct_key_value_pairs	src/gqf_backup.c	/^uint64_t qf_get_num_distinct_key_value_pairs(const QF *qf) {$/;"	f
qf_get_num_key_bits	other_filters/cqf/src/gqf.c	/^uint64_t qf_get_num_key_bits(const QF *qf) {$/;"	f
qf_get_num_key_bits	src/gqf.c	/^uint64_t qf_get_num_key_bits(const QF *qf) {$/;"	f
qf_get_num_key_bits	src/gqf_backup.c	/^uint64_t qf_get_num_key_bits(const QF *qf) {$/;"	f
qf_get_num_key_remainder_bits	other_filters/cqf/src/gqf.c	/^uint64_t qf_get_num_key_remainder_bits(const QF *qf) {$/;"	f
qf_get_num_key_remainder_bits	src/gqf.c	/^uint64_t qf_get_num_key_remainder_bits(const QF *qf) {$/;"	f
qf_get_num_key_remainder_bits	src/gqf_backup.c	/^uint64_t qf_get_num_key_remainder_bits(const QF *qf) {$/;"	f
qf_get_num_occupied_slots	other_filters/cqf/src/gqf.c	/^uint64_t qf_get_num_occupied_slots(const QF *qf) {$/;"	f
qf_get_num_occupied_slots	src/gqf.c	/^uint64_t qf_get_num_occupied_slots(const QF *qf) {$/;"	f
qf_get_num_occupied_slots	src/gqf_backup.c	/^uint64_t qf_get_num_occupied_slots(const QF *qf) {$/;"	f
qf_get_num_value_bits	other_filters/cqf/src/gqf.c	/^uint64_t qf_get_num_value_bits(const QF *qf) {$/;"	f
qf_get_num_value_bits	src/gqf.c	/^uint64_t qf_get_num_value_bits(const QF *qf) {$/;"	f
qf_get_num_value_bits	src/gqf_backup.c	/^uint64_t qf_get_num_value_bits(const QF *qf) {$/;"	f
qf_get_sum_of_counts	other_filters/cqf/src/gqf.c	/^uint64_t qf_get_sum_of_counts(const QF *qf) {$/;"	f
qf_get_sum_of_counts	src/gqf.c	/^uint64_t qf_get_sum_of_counts(const QF *qf) {$/;"	f
qf_get_sum_of_counts	src/gqf_backup.c	/^uint64_t qf_get_sum_of_counts(const QF *qf) {$/;"	f
qf_get_total_size_in_bytes	other_filters/cqf/src/gqf.c	/^uint64_t qf_get_total_size_in_bytes(const QF *qf) {$/;"	f
qf_get_total_size_in_bytes	src/gqf.c	/^uint64_t qf_get_total_size_in_bytes(const QF *qf) {$/;"	f
qf_get_total_size_in_bytes	src/gqf_backup.c	/^uint64_t qf_get_total_size_in_bytes(const QF *qf) {$/;"	f
qf_get_unique_index	other_filters/cqf/src/gqf.c	/^int64_t qf_get_unique_index(const QF *qf, uint64_t key, uint64_t value,$/;"	f
qf_get_unique_index	src/gqf_backup.c	/^int64_t qf_get_unique_index(const QF *qf, uint64_t key, uint64_t value,$/;"	f
qf_hash_cmp	src/gqf.c	/^inline int qf_hash_cmp(const QF *qf, const uint64_t hash1, const uint64_t hash2) {$/;"	f
qf_hash_comp	src/gqf_backup.c	/^inline int qf_hash_comp(const QF *qf, const uint64_t hash1, const uint64_t hash2) {$/;"	f
qf_hashmode	include/gqf.h	/^	enum qf_hashmode {$/;"	g
qf_hashmode	other_filters/cqf/include/gqf.h	/^	enum qf_hashmode {$/;"	g
qf_init	other_filters/cqf/src/gqf.c	/^uint64_t qf_init(QF *qf, uint64_t nslots, uint64_t key_bits, uint64_t value_bits,$/;"	f
qf_init	src/gqf.c	/^uint64_t qf_init(QF *qf, uint64_t nslots, uint64_t key_bits, uint64_t value_bits,$/;"	f
qf_init	src/gqf_backup.c	/^uint64_t qf_init(QF *qf, uint64_t nslots, uint64_t key_bits, uint64_t value_bits,$/;"	f
qf_initfile	other_filters/cqf/src/gqf_file.c	/^bool qf_initfile(QF *qf, uint64_t nslots, uint64_t key_bits, uint64_t$/;"	f
qf_initfile	src/gqf_file.c	/^bool qf_initfile(QF *qf, uint64_t nslots, uint64_t key_bits, uint64_t$/;"	f
qf_inner_product	other_filters/cqf/src/gqf.c	/^uint64_t qf_inner_product(const QF *qfa, const QF *qfb)$/;"	f
qf_inner_product	src/gqf.c	/^uint64_t qf_inner_product(const QF *qfa, const QF *qfb)$/;"	f
qf_inner_product	src/gqf_backup.c	/^uint64_t qf_inner_product(const QF *qfa, const QF *qfb)$/;"	f
qf_insert	other_filters/cqf/src/gqf.c	/^int qf_insert(QF *qf, uint64_t key, uint64_t value, uint64_t count, uint8_t$/;"	f
qf_insert	src/gqf.c	/^int qf_insert(QF *qf, uint64_t key, uint64_t value, uint64_t count, uint8_t flags)$/;"	f
qf_insert	src/gqf_backup.c	/^int qf_insert(QF *qf, uint64_t key, uint64_t value, uint64_t count, uint8_t flags)$/;"	f
qf_insert_result	include/gqf.h	/^	} typedef qf_insert_result;$/;"	t
qf_insert_result_t	include/gqf.h	/^	struct qf_insert_result_t {$/;"	s
qf_insert_ret	src/gqf.c	/^int qf_insert_ret(QF *qf, uint64_t key, uint64_t count, uint64_t *ret_index, uint64_t *ret_hash, int *ret_hash_len, uint8_t flags)$/;"	f
qf_insert_ret	src/gqf_backup.c	/^int qf_insert_ret(QF *qf, uint64_t key, uint64_t count, uint64_t *ret_index, uint64_t *ret_hash, int *ret_hash_len, uint8_t flags)$/;"	f
qf_insert_using_ll_table	src/gqf.c	/^int qf_insert_using_ll_table(QF *qf, uint64_t key, uint64_t count, qf_insert_result *result, uint8_t flags)$/;"	f
qf_intersect	other_filters/cqf/src/gqf.c	/^void qf_intersect(const QF *qfa, const QF *qfb, QF *qfr)$/;"	f
qf_intersect	src/gqf.c	/^void qf_intersect(const QF *qfa, const QF *qfb, QF *qfr)$/;"	f
qf_intersect	src/gqf_backup.c	/^void qf_intersect(const QF *qfa, const QF *qfb, QF *qfr)$/;"	f
qf_is_auto_resize_enabled	other_filters/cqf/src/gqf.c	/^bool qf_is_auto_resize_enabled(const QF *qf) {$/;"	f
qf_is_auto_resize_enabled	src/gqf.c	/^bool qf_is_auto_resize_enabled(const QF *qf) {$/;"	f
qf_is_auto_resize_enabled	src/gqf_backup.c	/^bool qf_is_auto_resize_enabled(const QF *qf) {$/;"	f
qf_iterator_from_key_value	other_filters/cqf/src/gqf.c	/^int64_t qf_iterator_from_key_value(const QF *qf, QFi *qfi, uint64_t key,$/;"	f
qf_iterator_from_key_value	src/gqf.c	/^int64_t qf_iterator_from_key_value(const QF *qf, QFi *qfi, uint64_t key,$/;"	f
qf_iterator_from_key_value	src/gqf_backup.c	/^int64_t qf_iterator_from_key_value(const QF *qf, QFi *qfi, uint64_t key,$/;"	f
qf_iterator_from_position	other_filters/cqf/src/gqf.c	/^int64_t qf_iterator_from_position(const QF *qf, QFi *qfi, uint64_t position)$/;"	f
qf_iterator_from_position	src/gqf.c	/^int64_t qf_iterator_from_position(const QF *qf, QFi *qfi, uint64_t position)$/;"	f
qf_iterator_from_position	src/gqf_backup.c	/^int64_t qf_iterator_from_position(const QF *qf, QFi *qfi, uint64_t position)$/;"	f
qf_lock	other_filters/cqf/src/gqf.c	/^bool qf_lock(QF *qf, uint64_t hash_bucket_index, bool small, uint8_t$/;"	f
qf_lock	src/gqf.c	/^bool qf_lock(QF *qf, uint64_t hash_bucket_index, bool small, uint8_t$/;"	f
qf_lock	src/gqf_backup.c	/^static bool qf_lock(QF *qf, uint64_t hash_bucket_index, bool small, uint8_t$/;"	f	file:
qf_magnitude	other_filters/cqf/src/gqf.c	/^uint64_t qf_magnitude(const QF *qf)$/;"	f
qf_magnitude	src/gqf.c	/^uint64_t qf_magnitude(const QF *qf)$/;"	f
qf_magnitude	src/gqf_backup.c	/^uint64_t qf_magnitude(const QF *qf)$/;"	f
qf_malloc	other_filters/cqf/src/gqf.c	/^bool qf_malloc(QF *qf, uint64_t nslots, uint64_t key_bits, uint64_t$/;"	f
qf_malloc	src/gqf.c	/^bool qf_malloc(QF *qf, uint64_t nslots, uint64_t key_bits, uint64_t$/;"	f
qf_malloc	src/gqf_backup.c	/^bool qf_malloc(QF *qf, uint64_t nslots, uint64_t key_bits, uint64_t$/;"	f
qf_merge	other_filters/cqf/src/gqf.c	/^void qf_merge(const QF *qfa, const QF *qfb, QF *qfc)$/;"	f
qf_merge	src/gqf.c	/^void qf_merge(const QF *qfa, const QF *qfb, QF *qfc) {$/;"	f
qf_merge	src/gqf_backup.c	/^void qf_merge(const QF *qfa, const QF *qfb, QF *qfc) {$/;"	f
qf_merge_ret	src/gqf.c	/^void qf_merge_ret(const QF *qfa, const QF *qfb, QF *qfc, uint64_t **coll_hash, int **coll_len, int *coll_amt) {$/;"	f
qf_merge_ret	src/gqf_backup.c	/^void qf_merge_ret(const QF *qfa, const QF *qfb, QF *qfc, uint64_t **coll_hash, int **coll_len, int *coll_amt) {$/;"	f
qf_multi_merge	other_filters/cqf/src/gqf.c	/^void qf_multi_merge(const QF *qf_arr[], int nqf, QF *qfr)$/;"	f
qf_multi_merge	src/gqf.c	/^void qf_multi_merge(const QF *qf_arr[], int nqf, QF *qfr)$/;"	f
qf_multi_merge	src/gqf_backup.c	/^void qf_multi_merge(const QF *qf_arr[], int nqf, QF *qfr)$/;"	f
qf_query	other_filters/cqf/src/gqf.c	/^uint64_t qf_query(const QF *qf, uint64_t key, uint64_t *value, uint8_t flags)$/;"	f
qf_query	src/gqf.c	/^uint64_t qf_query(const QF *qf, uint64_t key, uint64_t *ret_index, uint64_t *ret_hash, int *ret_hash_len, uint8_t flags)$/;"	f
qf_query	src/gqf_backup.c	/^uint64_t qf_query(const QF *qf, uint64_t key, uint64_t *ret_index, uint64_t *ret_hash, int *ret_hash_len, uint8_t flags)$/;"	f
qf_query_result	include/gqf.h	/^	} typedef qf_query_result;$/;"	t
qf_query_result_t	include/gqf.h	/^	struct qf_query_result_t {$/;"	s
qf_query_using_ll_table	src/gqf.c	/^int qf_query_using_ll_table(const QF *qf, uint64_t key, uint64_t *ret_hash, uint8_t flags) {$/;"	f
qf_remove	other_filters/cqf/src/gqf.c	/^int qf_remove(QF *qf, uint64_t key, uint64_t value, uint64_t count, uint8_t$/;"	f
qf_remove	src/gqf.c	/^int qf_remove(QF *qf, uint64_t key, uint64_t *ret_hash, int *ret_hash_len, uint8_t flags)$/;"	f
qf_remove	src/gqf_backup.c	/^int qf_remove(QF *qf, uint64_t key, uint64_t *ret_hash, int *ret_hash_len, uint8_t flags)$/;"	f
qf_reset	other_filters/cqf/src/gqf.c	/^void qf_reset(QF *qf)$/;"	f
qf_reset	src/gqf.c	/^void qf_reset(QF *qf)$/;"	f
qf_reset	src/gqf_backup.c	/^void qf_reset(QF *qf)$/;"	f
qf_resize	other_filters/cqf/src/gqf.c	/^uint64_t qf_resize(QF* qf, uint64_t nslots, void* buffer, uint64_t buffer_len)$/;"	f
qf_resize	src/gqf.c	/^uint64_t qf_resize(QF* qf, uint64_t nslots, void* buffer, uint64_t buffer_len)$/;"	f
qf_resize	src/gqf_backup.c	/^uint64_t qf_resize(QF* qf, uint64_t nslots, void* buffer, uint64_t buffer_len)$/;"	f
qf_resize_file	other_filters/cqf/src/gqf_file.c	/^int64_t qf_resize_file(QF *qf, uint64_t nslots)$/;"	f
qf_resize_file	src/gqf_file.c	/^int64_t qf_resize_file(QF *qf, uint64_t nslots)$/;"	f
qf_resize_malloc	other_filters/cqf/src/gqf.c	/^int64_t qf_resize_malloc(QF *qf, uint64_t nslots)$/;"	f
qf_resize_malloc	src/gqf.c	/^int qf_resize_malloc(QF *qf, uint64_t nslots) {$/;"	f
qf_resize_malloc	src/gqf_backup.c	/^int64_t qf_resize_malloc(QF *qf, uint64_t nslots)$/;"	f
qf_serialize	other_filters/cqf/src/gqf_file.c	/^uint64_t qf_serialize(const QF *qf, const char *filename)$/;"	f
qf_serialize	src/gqf_file.c	/^uint64_t qf_serialize(const QF *qf, const char *filename)$/;"	f
qf_set_auto_resize	other_filters/cqf/src/gqf.c	/^void qf_set_auto_resize(QF* qf, bool enabled)$/;"	f
qf_set_auto_resize	src/gqf.c	/^void qf_set_auto_resize(QF* qf, bool enabled)$/;"	f
qf_set_auto_resize	src/gqf_backup.c	/^void qf_set_auto_resize(QF* qf, bool enabled)$/;"	f
qf_set_count	other_filters/cqf/src/gqf.c	/^int qf_set_count(QF *qf, uint64_t key, uint64_t value, uint64_t count, uint8_t$/;"	f
qf_set_count	src/gqf.c	/^int qf_set_count(QF *qf, uint64_t key, uint64_t value, uint64_t count, uint8_t$/;"	f
qf_set_count	src/gqf_backup.c	/^int qf_set_count(QF *qf, uint64_t key, uint64_t value, uint64_t count, uint8_t$/;"	f
qf_spin_lock	other_filters/cqf/src/gqf.c	/^static inline bool qf_spin_lock(QF *qf, volatile int *lock, uint64_t idx,$/;"	f	file:
qf_spin_lock	other_filters/cqf/src/gqf.c	/^static inline bool qf_spin_lock(volatile int *lock, uint8_t flag)$/;"	f	file:
qf_spin_lock	src/gqf.c	/^static inline bool qf_spin_lock(QF *qf, volatile int *lock, uint64_t idx,$/;"	f	file:
qf_spin_lock	src/gqf.c	/^static inline bool qf_spin_lock(volatile int *lock, uint8_t flag)$/;"	f	file:
qf_spin_lock	src/gqf_backup.c	/^static inline bool qf_spin_lock(QF *qf, volatile int *lock, uint64_t idx,$/;"	f	file:
qf_spin_lock	src/gqf_backup.c	/^static inline bool qf_spin_lock(volatile int *lock, uint8_t flag)$/;"	f	file:
qf_spin_unlock	other_filters/cqf/src/gqf.c	/^static inline void qf_spin_unlock(volatile int *lock)$/;"	f	file:
qf_spin_unlock	src/gqf.c	/^static inline void qf_spin_unlock(volatile int *lock)$/;"	f	file:
qf_spin_unlock	src/gqf_backup.c	/^static inline void qf_spin_unlock(volatile int *lock)$/;"	f	file:
qf_splinter_insert	src/splinter_util.c	/^int qf_splinter_insert(QF *qf, splinterdb *db, uint64_t key, int count) {$/;"	f
qf_splinter_insert_split	src/splinter_util.c	/^int qf_splinter_insert_split(QF *qf, splinterdb *db, splinterdb *bm, uint64_t key, uint64_t val) {$/;"	f
qf_splinterdb_config_init	src/splinter_util.c	/^splinterdb_config qf_splinterdb_config_init(char *db_path, data_config *data_cfg) {$/;"	f
qf_sync_counters	other_filters/cqf/src/gqf.c	/^void qf_sync_counters(const QF *qf) {$/;"	f
qf_sync_counters	src/gqf.c	/^void qf_sync_counters(const QF *qf) {$/;"	f
qf_sync_counters	src/gqf_backup.c	/^void qf_sync_counters(const QF *qf) {$/;"	f
qf_unlock	other_filters/cqf/src/gqf.c	/^void qf_unlock(QF *qf, uint64_t hash_bucket_index, bool small)$/;"	f
qf_unlock	src/gqf.c	/^void qf_unlock(QF *qf, uint64_t hash_bucket_index, bool small)$/;"	f
qf_unlock	src/gqf_backup.c	/^static void qf_unlock(QF *qf, uint64_t hash_bucket_index, bool small)$/;"	f	file:
qf_use	other_filters/cqf/src/gqf.c	/^uint64_t qf_use(QF* qf, void* buffer, uint64_t buffer_len)$/;"	f
qf_use	src/gqf.c	/^uint64_t qf_use(QF* qf, void* buffer, uint64_t buffer_len)$/;"	f
qf_use	src/gqf_backup.c	/^uint64_t qf_use(QF* qf, void* buffer, uint64_t buffer_len)$/;"	f
qf_usefile	other_filters/cqf/src/gqf_file.c	/^uint64_t qf_usefile(QF* qf, const char* filename, int flag)$/;"	f
qf_usefile	src/gqf_file.c	/^uint64_t qf_usefile(QF* qf, const char* filename, int flag)$/;"	f
qfblock	include/gqf_int.h	/^	typedef struct __attribute__ ((__packed__)) qfblock {$/;"	s
qfblock	include/gqf_int.h	/^	typedef struct qfblock qfblock;$/;"	t	typeref:struct:qfblock
qfblock	include/gqf_int.h	/^	} qfblock;$/;"	t	typeref:struct:qfblock
qfblock	other_filters/cqf/include/gqf_int.h	/^	typedef struct __attribute__ ((__packed__)) qfblock {$/;"	s
qfblock	other_filters/cqf/include/gqf_int.h	/^	typedef struct qfblock qfblock;$/;"	t	typeref:struct:qfblock
qfblock	other_filters/cqf/include/gqf_int.h	/^	} qfblock;$/;"	t	typeref:struct:qfblock
qfi_end	other_filters/cqf/src/gqf.c	/^bool qfi_end(const QFi *qfi)$/;"	f
qfi_end	src/gqf.c	/^bool qfi_end(const QFi *qfi)$/;"	f
qfi_end	src/gqf_backup.c	/^bool qfi_end(const QFi *qfi)$/;"	f
qfi_get	other_filters/cqf/src/gqf.c	/^static int qfi_get(const QFi *qfi, uint64_t *key, uint64_t *value, uint64_t$/;"	f	file:
qfi_get	src/gqf.c	/^static inline int qfi_get(const QFi *qfi, uint64_t *rem, uint64_t *ext, int *ext_len, uint64_t *count)$/;"	f	file:
qfi_get	src/gqf_backup.c	/^static inline int qfi_get(const QFi *qfi, uint64_t *rem, uint64_t *ext, int *ext_len, uint64_t *count)$/;"	f	file:
qfi_get_hash	other_filters/cqf/src/gqf.c	/^int qfi_get_hash(const QFi *qfi, uint64_t *key, uint64_t *value, uint64_t$/;"	f
qfi_get_hash	src/gqf.c	/^int qfi_get_hash(const QFi *qfi, uint64_t *rem, uint64_t *ext, int *ext_len, uint64_t *count)$/;"	f
qfi_get_hash	src/gqf_backup.c	/^int qfi_get_hash(const QFi *qfi, uint64_t *rem, uint64_t *ext, int *ext_len, uint64_t *count)$/;"	f
qfi_get_key	other_filters/cqf/src/gqf.c	/^int qfi_get_key(const QFi *qfi, uint64_t *key, uint64_t *value, uint64_t$/;"	f
qfi_get_key	src/gqf.c	/^int qfi_get_key(const QFi *qfi, uint64_t *key, uint64_t *value, uint64_t$/;"	f
qfi_get_key	src/gqf_backup.c	/^int qfi_get_key(const QFi *qfi, uint64_t *key, uint64_t *value, uint64_t$/;"	f
qfi_initial_madvise	other_filters/cqf/src/gqf_file.c	/^int qfi_initial_madvise(QFi *qfi)$/;"	f
qfi_initial_madvise	src/gqf_file.c	/^int qfi_initial_madvise(QFi *qfi)$/;"	f
qfi_next	other_filters/cqf/src/gqf.c	/^int qfi_next(QFi *qfi)$/;"	f
qfi_next	src/gqf.c	/^int qfi_next(QFi *qfi)$/;"	f
qfi_next	src/gqf_backup.c	/^int qfi_next(QFi *qfi)$/;"	f
qfi_next_madvise	other_filters/cqf/src/gqf_file.c	/^int qfi_next_madvise(QFi *qfi)$/;"	f
qfi_next_madvise	src/gqf_file.c	/^int qfi_next_madvise(QFi *qfi)$/;"	f
qfmetadata	include/gqf_int.h	/^	typedef quotient_filter_metadata qfmetadata;$/;"	t
qfmetadata	other_filters/cqf/include/gqf_int.h	/^	typedef quotient_filter_metadata qfmetadata;$/;"	t
qfruntime	include/gqf_int.h	/^	typedef quotient_filter_runtime_data qfruntime;$/;"	t
qfruntime	other_filters/cqf/include/gqf_int.h	/^	typedef quotient_filter_runtime_data qfruntime;$/;"	t
query_set_size	src/test_progress.c	/^uint64_t query_set_size = 2900000;$/;"	v
query_tests	external/splinterdb/tests/unit/btree_stress_test.c	/^query_tests(cache           *cc,$/;"	f	file:
query_throughput	include/test_driver.h	/^	double query_throughput;$/;"	m	struct:_test_results_t
query_trace_fp	src/test_micro_write.c	/^FILE *query_trace_fp;$/;"	v
queue_scale_percent	external/splinterdb/include/splinterdb/splinterdb.h	/^   uint64 queue_scale_percent;$/;"	m	struct:splinterdb_config
queue_scale_percent	external/splinterdb/src/trunk.h	/^   uint64 queue_scale_percent;  \/\/ Governs when inserters perform bg tasks.  See$/;"	m	struct:trunk_config
queue_scale_percent	external/splinterdb/tests/config.h	/^   uint64 queue_scale_percent;$/;"	m	struct:master_config
quoteRe	external/splinterdb/scripts/copywriter.sh	/^quoteRe() { sed -e 's\/[^^]\/[&]\/g; s\/\\^\/\\\\^\/g; $!a\\'$'\\n''\\\\n' <<<"$1" | tr -d '\\n'; }$/;"	f
quoteSubst	external/splinterdb/scripts/copywriter.sh	/^quoteSubst() {$/;"	f
quotient_bits	include/gqf_int.h	/^		uint64_t quotient_bits;$/;"	m	struct:quotient_filter_metadata
quotient_filter	include/gqf.h	/^	typedef struct quotient_filter quotient_filter;$/;"	t	typeref:struct:quotient_filter
quotient_filter	include/gqf_int.h	/^	typedef struct quotient_filter {$/;"	s
quotient_filter	include/gqf_int.h	/^	} quotient_filter;$/;"	t	typeref:struct:quotient_filter
quotient_filter	other_filters/cqf/include/gqf.h	/^	typedef struct quotient_filter quotient_filter;$/;"	t	typeref:struct:quotient_filter
quotient_filter	other_filters/cqf/include/gqf_int.h	/^	typedef struct quotient_filter {$/;"	s
quotient_filter	other_filters/cqf/include/gqf_int.h	/^	} quotient_filter;$/;"	t	typeref:struct:quotient_filter
quotient_filter_iterator	include/gqf.h	/^	typedef struct quotient_filter_iterator quotient_filter_iterator;$/;"	t	typeref:struct:quotient_filter_iterator
quotient_filter_iterator	include/gqf_int.h	/^	typedef struct quotient_filter_iterator {$/;"	s
quotient_filter_iterator	include/gqf_int.h	/^	} quotient_filter_iterator;$/;"	t	typeref:struct:quotient_filter_iterator
quotient_filter_iterator	other_filters/cqf/include/gqf.h	/^	typedef struct quotient_filter_iterator quotient_filter_iterator;$/;"	t	typeref:struct:quotient_filter_iterator
quotient_filter_iterator	other_filters/cqf/include/gqf_int.h	/^	typedef struct quotient_filter_iterator {$/;"	s
quotient_filter_iterator	other_filters/cqf/include/gqf_int.h	/^	} quotient_filter_iterator;$/;"	t	typeref:struct:quotient_filter_iterator
quotient_filter_metadata	include/gqf_int.h	/^	typedef struct quotient_filter_metadata {$/;"	s
quotient_filter_metadata	include/gqf_int.h	/^	} quotient_filter_metadata;$/;"	t	typeref:struct:quotient_filter_metadata
quotient_filter_metadata	other_filters/cqf/include/gqf_int.h	/^	typedef struct quotient_filter_metadata {$/;"	s
quotient_filter_metadata	other_filters/cqf/include/gqf_int.h	/^	} quotient_filter_metadata;$/;"	t	typeref:struct:quotient_filter_metadata
quotient_filter_runtime_data	include/gqf_int.h	/^	typedef struct quotient_filter_runtime_data {$/;"	s
quotient_filter_runtime_data	include/gqf_int.h	/^	} quotient_filter_runtime_data;$/;"	t	typeref:struct:quotient_filter_runtime_data
quotient_filter_runtime_data	other_filters/cqf/include/gqf_int.h	/^	typedef struct quotient_filter_runtime_data {$/;"	s
quotient_filter_runtime_data	other_filters/cqf/include/gqf_int.h	/^	} quotient_filter_runtime_data;$/;"	t	typeref:struct:quotient_filter_runtime_data
quotient_remainder_bits	include/gqf_int.h	/^		uint64_t quotient_remainder_bits;$/;"	m	struct:quotient_filter_metadata
r	external/splinterdb/src/platform_linux/platform.h	/^   internal_platform_status r;$/;"	m	struct:__anon24
r	other_filters/taf/src/exaf.h	/^  size_t r;                     \/* length of remainder *\/$/;"	m	struct:exaf_t
r	other_filters/taf/src/rsqf.h	/^  size_t r;                     \/* length of remainder *\/$/;"	m	struct:rsqf_t
r	other_filters/taf/src/splinter_taf.h	/^  size_t r;                     \/* length of remainder *\/$/;"	m	struct:taf_t
r	other_filters/taf/src/taf.h	/^  size_t r;                     \/* length of remainder *\/$/;"	m	struct:taf_t
r	other_filters/taf/src/taf_sim.h	/^  size_t r;                     \/* length of remainder *\/$/;"	m	struct:taf_t
r	other_filters/taf/src/utaf.h	/^  size_t r;                     \/* length of remainder *\/$/;"	m	struct:utaf_t
r	src/taf.cc	/^  size_t r;                     \/* length of remainder *\/$/;"	m	struct:taf_t	file:
rand	external/splinterdb/tests/functional/cache_test.c	/^      } rand;$/;"	m	union:__anon47::__anon49	typeref:struct:__anon47::__anon49::__anon51	file:
rand_generator	other_filters/cqf/src/bm.c	/^typedef struct rand_generator {$/;"	s	file:
rand_generator	other_filters/cqf/src/bm.c	/^} rand_generator;$/;"	t	typeref:struct:rand_generator	file:
rand_generator	src/bm.c	/^typedef struct rand_generator {$/;"	s	file:
rand_generator	src/bm.c	/^} rand_generator;$/;"	t	typeref:struct:rand_generator	file:
rand_init	other_filters/cqf/src/bm.c	/^typedef void * (*rand_init)(uint64_t maxoutputs, __uint128_t maxvalue, void *params);$/;"	t	file:
rand_init	src/bm.c	/^typedef void * (*rand_init)(uint64_t maxoutputs, __uint128_t maxvalue, void *params);$/;"	t	file:
rand_normal	other_filters/cqf/src/test_micro_super.c	/^double rand_normal(double mean, double sd) {$/;"	f
rand_normal	other_filters/cqf/src/test_micro_throughput.c	/^double rand_normal(double mean, double sd) {$/;"	f
rand_normal	other_filters/cqf/src/test_parallel.c	/^double rand_normal(double mean, double sd) {$/;"	f
rand_normal	other_filters/cqf/src/test_splinter_adversarial.c	/^double rand_normal(double mean, double sd) {$/;"	f
rand_normal	other_filters/cqf/src/test_splinter_throughput.c	/^double rand_normal(double mean, double sd) {$/;"	f
rand_normal	other_filters/cqf/src/test_splinter_zipfian_histogram.c	/^double rand_normal(double mean, double sd) {$/;"	f
rand_normal	src/rand_util.c	/^double rand_normal(double mean, double sd) {$/;"	f
rand_normal	src/test_bulk.c	/^double rand_normal(double mean, double sd) {$/;"	f
rand_normal	src/test_deletions.c	/^double rand_normal(double mean, double sd) {$/;"	f
rand_normal	src/test_ext_churn.cc	/^double rand_normal(double mean, double sd) {$/;"	f
rand_normal	src/test_ext_inc_throughput.cc	/^double rand_normal(double mean, double sd) {$/;"	f
rand_normal	src/test_ext_throughput.cc	/^double rand_normal(double mean, double sd) {$/;"	f
rand_normal	src/test_fill_varied_throughput.c	/^double rand_normal(double mean, double sd) {$/;"	f
rand_normal	src/test_hash_accesses.c	/^double rand_normal(double mean, double sd) {$/;"	f
rand_normal	src/test_merge.c	/^double rand_normal(double mean, double sd) {$/;"	f
rand_normal	src/test_near_full.c	/^double rand_normal(double mean, double sd) {$/;"	f
rand_normal	src/test_progress.c	/^double rand_normal(double mean, double sd) {$/;"	f
rand_normal	src/test_splinter_adversarial.c	/^double rand_normal(double mean, double sd) {$/;"	f
rand_normal	src/test_splinter_replace_lltable_throughput.c	/^double rand_normal(double mean, double sd) {$/;"	f
rand_normal	src/test_splinter_throughput.c	/^double rand_normal(double mean, double sd) {$/;"	f
rand_normal	src/test_splinter_zipfian_histogram.c	/^double rand_normal(double mean, double sd) {$/;"	f
rand_normal	src/test_throughput_old.c	/^double rand_normal(double mean, double sd) {$/;"	f
rand_normal	src/test_unit_old.c	/^double rand_normal(double mean, double sd) {$/;"	f
rand_normal	src/test_whitelist.c	/^double rand_normal(double mean, double sd) {$/;"	f
rand_normal	src/test_zipf_throughput.cc	/^double rand_normal(double mean, double sd) {$/;"	f
rand_state	other_filters/cqf/src/bm.c	/^	struct random_data *rand_state;$/;"	m	struct:uniform_online_state	typeref:struct:uniform_online_state::random_data	file:
rand_state	src/bm.c	/^	struct random_data *rand_state;$/;"	m	struct:uniform_online_state	typeref:struct:uniform_online_state::random_data	file:
rand_uniform	other_filters/acf/example/test.cc	/^uint64_t rand_uniform() {$/;"	f
rand_uniform	other_filters/acf/example/test_acf_ops.cc	/^uint64_t rand_uniform(uint64_t max) {$/;"	f
rand_uniform	other_filters/acf/example/test_fill_varied_throughput.cc	/^uint64_t rand_uniform() {$/;"	f
rand_uniform	other_filters/acf/example/test_fp.cc	/^uint64_t rand_uniform() {$/;"	f
rand_uniform	other_filters/acf/example/test_micro.cc	/^uint64_t rand_uniform() {$/;"	f
rand_uniform	other_filters/acf/example/test_micro_throughput.cc	/^uint64_t rand_uniform(uint64_t max) {$/;"	f
rand_uniform	other_filters/acf/example/test_splinter_adversarial.cc	/^uint64_t rand_uniform(uint64_t max) {$/;"	f
rand_uniform	other_filters/acf/example/test_splinter_inc_throughput.cc	/^uint64_t rand_uniform(uint64_t max) {$/;"	f
rand_uniform	other_filters/acf/example/test_splinter_throughput.cc	/^uint64_t rand_uniform(uint64_t max) {$/;"	f
rand_uniform	other_filters/acf/example/test_splinter_zipfian_histogram.cc	/^uint64_t rand_uniform(uint64_t max) {$/;"	f
rand_uniform	other_filters/acfsim/example/test.cc	/^uint64_t rand_uniform() {$/;"	f
rand_uniform	other_filters/acfsim/example/test_acf_ops.cc	/^uint64_t rand_uniform(uint64_t max) {$/;"	f
rand_uniform	other_filters/acfsim/example/test_fill_varied_throughput.cc	/^uint64_t rand_uniform() {$/;"	f
rand_uniform	other_filters/acfsim/example/test_fp.cc	/^uint64_t rand_uniform() {$/;"	f
rand_uniform	other_filters/acfsim/example/test_micro.cc	/^uint64_t rand_uniform() {$/;"	f
rand_uniform	other_filters/acfsim/example/test_micro_throughput.cc	/^uint64_t rand_uniform(uint64_t max) {$/;"	f
rand_uniform	other_filters/acfsim/example/test_micro_write.cc	/^uint64_t rand_uniform(uint64_t max) {$/;"	f
rand_uniform	other_filters/acfsim/example/test_splinter_adversarial.cc	/^uint64_t rand_uniform(uint64_t max) {$/;"	f
rand_uniform	other_filters/acfsim/example/test_splinter_inc_throughput.cc	/^uint64_t rand_uniform(uint64_t max) {$/;"	f
rand_uniform	other_filters/acfsim/example/test_splinter_throughput.cc	/^uint64_t rand_uniform(uint64_t max) {$/;"	f
rand_uniform	other_filters/acfsim/example/test_splinter_zipfian_histogram.cc	/^uint64_t rand_uniform(uint64_t max) {$/;"	f
rand_uniform	other_filters/cf/example/test.cc	/^uint64_t rand_uniform() {$/;"	f
rand_uniform	other_filters/cf/example/test_micro_super.cc	/^uint64_t rand_uniform(uint64_t max) {$/;"	f
rand_uniform	other_filters/cf/example/test_micro_throughput.cc	/^uint64_t rand_uniform(uint64_t max) {$/;"	f
rand_uniform	other_filters/cf/example/test_splinter_adversarial.cc	/^uint64_t rand_uniform(uint64_t max) {$/;"	f
rand_uniform	other_filters/cf/example/test_splinter_throughput.cc	/^uint64_t rand_uniform(uint64_t max) {$/;"	f
rand_uniform	other_filters/cf/example/test_splinter_zipfian_histogram.cc	/^uint64_t rand_uniform(uint64_t max) {$/;"	f
rand_uniform	other_filters/cqf/src/test_hash_accesses.c	/^uint64_t rand_uniform() {$/;"	f
rand_uniform	other_filters/cqf/src/test_micro_super.c	/^uint64_t rand_uniform(uint64_t max) {$/;"	f
rand_uniform	other_filters/cqf/src/test_micro_throughput.c	/^uint64_t rand_uniform(uint64_t max) {$/;"	f
rand_uniform	other_filters/cqf/src/test_parallel.c	/^uint64_t rand_uniform(uint64_t max) {$/;"	f
rand_uniform	other_filters/cqf/src/test_splinter_adversarial.c	/^uint64_t rand_uniform(uint64_t max) {$/;"	f
rand_uniform	other_filters/cqf/src/test_splinter_throughput.c	/^uint64_t rand_uniform(uint64_t max) {$/;"	f
rand_uniform	other_filters/cqf/src/test_splinter_zipfian_histogram.c	/^uint64_t rand_uniform(uint64_t max) {$/;"	f
rand_uniform	src/rand_util.c	/^uint64_t rand_uniform(uint64_t max) {$/;"	f
rand_uniform	src/test_bulk.c	/^uint64_t rand_uniform(uint64_t max) {$/;"	f
rand_uniform	src/test_deletions.c	/^uint64_t rand_uniform(uint64_t max) {$/;"	f
rand_uniform	src/test_ext_churn.cc	/^uint64_t rand_uniform(uint64_t max) {$/;"	f
rand_uniform	src/test_ext_inc_throughput.cc	/^uint64_t rand_uniform(uint64_t max) {$/;"	f
rand_uniform	src/test_ext_throughput.cc	/^uint64_t rand_uniform(uint64_t max) {$/;"	f
rand_uniform	src/test_fill_varied_throughput.c	/^uint64_t rand_uniform(uint64_t max) {$/;"	f
rand_uniform	src/test_hash_accesses.c	/^uint64_t rand_uniform(uint64_t max) {$/;"	f
rand_uniform	src/test_lltable_throughput.c	/^uint64_t rand_uniform() {$/;"	f
rand_uniform	src/test_merge.c	/^uint64_t rand_uniform(uint64_t max) {$/;"	f
rand_uniform	src/test_micro_write.c	/^uint64_t rand_uniform(uint64_t max) {$/;"	f
rand_uniform	src/test_near_full.c	/^uint64_t rand_uniform(uint64_t max) {$/;"	f
rand_uniform	src/test_progress.c	/^uint64_t rand_uniform(uint64_t max) {$/;"	f
rand_uniform	src/test_splinter_adversarial.c	/^uint64_t rand_uniform(uint64_t max) {$/;"	f
rand_uniform	src/test_splinter_replace_lltable_throughput.c	/^uint64_t rand_uniform(uint64_t max) {$/;"	f
rand_uniform	src/test_splinter_throughput.c	/^uint64_t rand_uniform(uint64_t max) {$/;"	f
rand_uniform	src/test_splinter_zipfian_histogram.c	/^uint64_t rand_uniform(uint64_t max) {$/;"	f
rand_uniform	src/test_throughput_old.c	/^uint64_t rand_uniform(uint64_t max) {$/;"	f
rand_uniform	src/test_unit_old.c	/^uint64_t rand_uniform(uint64_t max) {$/;"	f
rand_uniform	src/test_whitelist.c	/^uint64_t rand_uniform(uint64_t max) {$/;"	f
rand_uniform	src/test_zipf_throughput.cc	/^uint64_t rand_uniform(uint64_t max) {$/;"	f
rand_zipfian	other_filters/acf/example/test.cc	/^double rand_zipfian(double s, double max) {$/;"	f
rand_zipfian	other_filters/acf/example/test_acf_ops.cc	/^double rand_zipfian(double s, double max, uint64_t source) {$/;"	f
rand_zipfian	other_filters/acf/example/test_bits.cc	/^double rand_zipfian(double s, double max) {$/;"	f
rand_zipfian	other_filters/acf/example/test_fill_varied_throughput.cc	/^double rand_zipfian(double s, double max) {$/;"	f
rand_zipfian	other_filters/acf/example/test_fp.cc	/^double rand_zipfian(double s, double max) {$/;"	f
rand_zipfian	other_filters/acf/example/test_micro.cc	/^double rand_zipfian(double s, double max) {$/;"	f
rand_zipfian	other_filters/acf/example/test_micro_throughput.cc	/^double rand_zipfian(double s, double max, uint64_t source, uint64_t rand_max) {$/;"	f
rand_zipfian	other_filters/acf/example/test_splinter_adversarial.cc	/^double rand_zipfian(double s, double max, uint64_t source, uint64_t rand_max) {$/;"	f
rand_zipfian	other_filters/acf/example/test_splinter_throughput.cc	/^double rand_zipfian(double s, double max, uint64_t source, uint64_t rand_max) {$/;"	f
rand_zipfian	other_filters/acf/example/test_splinter_zipfian_histogram.cc	/^double rand_zipfian(double s, double max, uint64_t source, uint64_t rand_max) {$/;"	f
rand_zipfian	other_filters/acf/example/test_zipf_throughput.cc	/^double rand_zipfian(double s, double max, uint64_t rnd) {$/;"	f
rand_zipfian	other_filters/acfsim/example/test.cc	/^double rand_zipfian(double s, double max) {$/;"	f
rand_zipfian	other_filters/acfsim/example/test_acf_ops.cc	/^double rand_zipfian(double s, double max, uint64_t source) {$/;"	f
rand_zipfian	other_filters/acfsim/example/test_bits.cc	/^double rand_zipfian(double s, double max) {$/;"	f
rand_zipfian	other_filters/acfsim/example/test_fill_varied_throughput.cc	/^double rand_zipfian(double s, double max) {$/;"	f
rand_zipfian	other_filters/acfsim/example/test_fp.cc	/^double rand_zipfian(double s, double max) {$/;"	f
rand_zipfian	other_filters/acfsim/example/test_micro.cc	/^double rand_zipfian(double s, double max) {$/;"	f
rand_zipfian	other_filters/acfsim/example/test_micro_throughput.cc	/^double rand_zipfian(double s, double max, uint64_t source, uint64_t rand_max) {$/;"	f
rand_zipfian	other_filters/acfsim/example/test_micro_write.cc	/^double rand_zipfian(double s, double max, uint64_t source, uint64_t rand_max) {$/;"	f
rand_zipfian	other_filters/acfsim/example/test_splinter_adversarial.cc	/^double rand_zipfian(double s, double max, uint64_t source, uint64_t rand_max) {$/;"	f
rand_zipfian	other_filters/acfsim/example/test_splinter_throughput.cc	/^double rand_zipfian(double s, double max, uint64_t source, uint64_t rand_max) {$/;"	f
rand_zipfian	other_filters/acfsim/example/test_splinter_zipfian_histogram.cc	/^double rand_zipfian(double s, double max, uint64_t source, uint64_t rand_max) {$/;"	f
rand_zipfian	other_filters/acfsim/example/test_zipf_throughput.cc	/^double rand_zipfian(double s, double max, uint64_t rnd) {$/;"	f
rand_zipfian	other_filters/cf/example/test.cc	/^double rand_zipfian(double s, double max) {$/;"	f
rand_zipfian	other_filters/cf/example/test_hash_accesses.cc	/^double rand_zipfian(double s, double max) {$/;"	f
rand_zipfian	other_filters/cf/example/test_micro_super.cc	/^double rand_zipfian(double s, double max, uint64_t source) {$/;"	f
rand_zipfian	other_filters/cf/example/test_micro_throughput.cc	/^double rand_zipfian(double s, double max, uint64_t source, uint64_t rand_max) {$/;"	f
rand_zipfian	other_filters/cf/example/test_splinter_adversarial.cc	/^double rand_zipfian(double s, double max, uint64_t source, uint64_t rand_max) {$/;"	f
rand_zipfian	other_filters/cf/example/test_splinter_throughput.cc	/^double rand_zipfian(double s, double max, uint64_t source, uint64_t rand_max) {$/;"	f
rand_zipfian	other_filters/cf/example/test_splinter_zipfian_histogram.cc	/^double rand_zipfian(double s, double max, uint64_t source, uint64_t rand_max) {$/;"	f
rand_zipfian	other_filters/cqf/src/test.c	/^double rand_zipfian(double s, double max) {$/;"	f
rand_zipfian	other_filters/cqf/src/test_adversarial.cc	/^double rand_zipfian(double s, double max) {$/;"	f
rand_zipfian	other_filters/cqf/src/test_ext_throughput.cc	/^double rand_zipfian(double s, double max, uint64_t rnd) {$/;"	f
rand_zipfian	other_filters/cqf/src/test_fill_varied_throughput.c	/^double rand_zipfian(double s, double max) {$/;"	f
rand_zipfian	other_filters/cqf/src/test_hash_accesses.c	/^double rand_zipfian(double s, double max) {$/;"	f
rand_zipfian	other_filters/cqf/src/test_micro_super.c	/^double rand_zipfian(double s, double max, uint64_t source) {$/;"	f
rand_zipfian	other_filters/cqf/src/test_micro_throughput.c	/^double rand_zipfian(double s, double max, uint64_t source) {$/;"	f
rand_zipfian	other_filters/cqf/src/test_parallel.c	/^double rand_zipfian(double s, double max, uint64_t source) {$/;"	f
rand_zipfian	other_filters/cqf/src/test_splinter_adversarial.c	/^double rand_zipfian(double s, double max, uint64_t source) {$/;"	f
rand_zipfian	other_filters/cqf/src/test_splinter_throughput.c	/^double rand_zipfian(double s, double max, uint64_t source) {$/;"	f
rand_zipfian	other_filters/cqf/src/test_splinter_zipfian_histogram.c	/^double rand_zipfian(double s, double max, uint64_t source) {$/;"	f
rand_zipfian	other_filters/taf/src/taf.c	/^double rand_zipfian(double s, double max, uint64_t source) {$/;"	f
rand_zipfian	other_filters/taf/src/taf.cc	/^double rand_zipfian(double s, double max) {$/;"	f
rand_zipfian	other_filters/taf/src/taf_sim.c	/^double rand_zipfian(double s, double max, uint64_t source) {$/;"	f
rand_zipfian	src/rand_util.c	/^double rand_zipfian(double s, double max, uint64_t source) {$/;"	f
rand_zipfian	src/taf.cc	/^double rand_zipfian(double s, double max) {$/;"	f
rand_zipfian	src/test_bulk.c	/^double rand_zipfian(double s, double max) {$/;"	f
rand_zipfian	src/test_deletions.c	/^double rand_zipfian(double s, double max) {$/;"	f
rand_zipfian	src/test_ext_churn.cc	/^double rand_zipfian(double s, double max) {$/;"	f
rand_zipfian	src/test_ext_inc_throughput.cc	/^double rand_zipfian(double s, double max) {$/;"	f
rand_zipfian	src/test_ext_throughput.cc	/^double rand_zipfian(double s, double max) {$/;"	f
rand_zipfian	src/test_fill_varied_throughput.c	/^double rand_zipfian(double s, double max) {$/;"	f
rand_zipfian	src/test_hash_accesses.c	/^double rand_zipfian(double s, double max) {$/;"	f
rand_zipfian	src/test_lltable_throughput.c	/^double rand_zipfian(double s, double max, uint64_t source) {$/;"	f
rand_zipfian	src/test_merge.c	/^double rand_zipfian(double s, double max) {$/;"	f
rand_zipfian	src/test_micro_throughput.c	/^double rand_zipfian(double s, double max, uint64_t source) {$/;"	f
rand_zipfian	src/test_micro_write.c	/^double rand_zipfian(double s, double max, uint64_t source) {$/;"	f
rand_zipfian	src/test_near_full.c	/^double rand_zipfian(double s, double max) {$/;"	f
rand_zipfian	src/test_progress.c	/^double rand_zipfian(double s, double max) {$/;"	f
rand_zipfian	src/test_splinter_adversarial.c	/^double rand_zipfian(double s, double max, uint64_t source) {$/;"	f
rand_zipfian	src/test_splinter_replace_lltable_throughput.c	/^double rand_zipfian(double s, double max, uint64_t source) {$/;"	f
rand_zipfian	src/test_splinter_throughput.c	/^double rand_zipfian(double s, double max, uint64_t source) {$/;"	f
rand_zipfian	src/test_splinter_zipfian_histogram.c	/^double rand_zipfian(double s, double max, uint64_t source) {$/;"	f
rand_zipfian	src/test_throughput_old.c	/^double rand_zipfian(double s, double max) {$/;"	f
rand_zipfian	src/test_unit_old.c	/^double rand_zipfian(double s, double max) {$/;"	f
rand_zipfian	src/test_whitelist.c	/^double rand_zipfian(double s, double max) {$/;"	f
rand_zipfian	src/test_zipf_throughput.cc	/^double rand_zipfian(double s, double max, uint64_t rnd) {$/;"	f
randint	external/splinterdb/scripts/list_test.py	/^from random import randint$/;"	i
random_bytes	external/splinterdb/tests/functional/random.h	/^random_bytes(random_state *rs, char *v, size_t n)$/;"	f
random_data	external/splinterdb/tests/unit/splinterdb_stress_test.c	/^   int         random_data;$/;"	m	struct:__anon66	file:
random_init	external/splinterdb/tests/functional/random.h	/^random_init(random_state *rs,   \/\/ OUT$/;"	f
random_key_fd	external/splinterdb/tests/unit/large_inserts_stress_test.c	/^   int            random_key_fd; \/\/ Options to choose the type of key inserted$/;"	m	struct:__anon62	file:
random_next_int16	external/splinterdb/tests/functional/random.h	/^random_next_int16(random_state *rs) \/\/ IN\/OUT$/;"	f
random_next_int32	external/splinterdb/tests/functional/random.h	/^random_next_int32(random_state *rs) \/\/ IN\/OUT$/;"	f
random_next_int64	external/splinterdb/tests/functional/random.h	/^random_next_int64(random_state *rs) \/\/ IN\/OUT$/;"	f
random_next_int8	external/splinterdb/tests/functional/random.h	/^random_next_int8(random_state *rs) \/\/ IN\/OUT$/;"	f
random_next_uint16	external/splinterdb/tests/functional/random.h	/^random_next_uint16(random_state *rs) \/\/ IN\/OUT$/;"	f
random_next_uint32	external/splinterdb/tests/functional/random.h	/^random_next_uint32(random_state *rs) \/\/ IN\/OUT$/;"	f
random_next_uint64	external/splinterdb/tests/functional/random.h	/^random_next_uint64(random_state *rs) \/\/ IN\/OUT$/;"	f
random_next_uint8	external/splinterdb/tests/functional/random.h	/^random_next_uint8(random_state *rs) \/\/ IN\/OUT$/;"	f
random_state	external/splinterdb/tests/functional/random.h	/^typedef struct random_state {$/;"	s
random_state	external/splinterdb/tests/functional/random.h	/^} random_state;$/;"	t	typeref:struct:random_state
random_val_fd	external/splinterdb/tests/unit/large_inserts_stress_test.c	/^   int            random_val_fd; \/\/ Options to choose the type of value inserted$/;"	m	struct:__anon62	file:
randomfun	other_filters/cqf/src/zipf.c	/^    long int (*randomfun)(void);$/;"	m	struct:zipfian	file:
randomfun	src/zipf.c	/^    long int (*randomfun)(void);$/;"	m	struct:zipfian	file:
range	include/gqf_int.h	/^		__uint128_t range;$/;"	m	struct:quotient_filter_metadata
range	other_filters/cqf/include/gqf_int.h	/^		__uint128_t range;$/;"	m	struct:quotient_filter_metadata
range	other_filters/cqf/src/bm.c	/^	get_range_op range;$/;"	m	struct:filter	file:
range	src/bm.c	/^	get_range_op range;$/;"	m	struct:filter	file:
range_len	external/splinterdb/tests/functional/ycsb_test.c	/^   uint64 range_len;$/;"	m	struct:ycsb_op	file:
range_lookups_done	external/splinterdb/tests/functional/splinter_test.c	/^   uint64             range_lookups_done;$/;"	m	struct:test_splinter_thread_params	file:
range_perf_descr	external/splinterdb/tests/functional/splinter_test.c	/^   const char *range_perf_descr;$/;"	m	struct:trunk_range_perf_params	file:
rank_select	other_filters/taf/src/exaf.c	/^static int rank_select(const ExAF* filter, size_t x) {$/;"	f	file:
rank_select	other_filters/taf/src/rsqf.c	/^static int rank_select(const RSQF* filter, size_t x) {$/;"	f	file:
rank_select	other_filters/taf/src/splinter_taf.c	/^static int rank_select(const TAF* filter, size_t x) {$/;"	f	file:
rank_select	other_filters/taf/src/taf.c	/^static int rank_select(const TAF* filter, size_t x) {$/;"	f	file:
rank_select	other_filters/taf/src/taf.cc	/^static int rank_select(const TAF* filter, size_t x) {$/;"	f	file:
rank_select	other_filters/taf/src/taf_sim.c	/^static int rank_select(const TAF* filter, size_t x) {$/;"	f	file:
rank_select	other_filters/taf/src/utaf.c	/^static int rank_select(const FullTAF* filter, size_t x) {$/;"	f	file:
rank_select	src/taf.cc	/^static int rank_select(const TAF* filter, size_t x) {$/;"	f	file:
raw	external/splinterdb/scripts/list_test.py	/^   def raw(self) -> str:$/;"	m	class:Test
raw_insert	other_filters/taf/src/exaf.c	/^static void raw_insert(ExAF* filter, elt_t elt, uint64_t hash) {$/;"	f	file:
raw_insert	other_filters/taf/src/rsqf.c	/^static void raw_insert(RSQF* filter, size_t quot, rem_t rem) {$/;"	f	file:
raw_insert	other_filters/taf/src/splinter_taf.c	/^static void raw_insert(TAF* filter, elt_t elt, uint64_t hash) {$/;"	f	file:
raw_insert	other_filters/taf/src/taf.c	/^static void raw_insert(TAF* filter, elt_t elt, uint64_t hash) {$/;"	f	file:
raw_insert	other_filters/taf/src/taf.cc	/^static void raw_insert(TAF* filter, elt_t elt, uint64_t hash) {$/;"	f	file:
raw_insert	other_filters/taf/src/taf_sim.c	/^static void raw_insert(TAF* filter, elt_t elt, uint64_t hash) {$/;"	f	file:
raw_insert	other_filters/taf/src/utaf.c	/^static void raw_insert(FullTAF* filter, elt_t elt, uint64_t hash) {$/;"	f	file:
raw_insert	src/taf.cc	/^static void raw_insert(TAF* filter, elt_t elt, uint64_t hash) {$/;"	f	file:
raw_lookup	other_filters/taf/src/exaf.c	/^static int raw_lookup(ExAF* filter, elt_t elt, uint64_t hash) {$/;"	f	file:
raw_lookup	other_filters/taf/src/rsqf.c	/^static int raw_lookup(const RSQF* filter, size_t quot, rem_t rem) {$/;"	f	file:
raw_lookup	other_filters/taf/src/splinter_taf.c	/^static int raw_lookup(TAF* filter, elt_t elt, uint64_t hash) {$/;"	f	file:
raw_lookup	other_filters/taf/src/taf.c	/^static int raw_lookup(TAF* filter, elt_t elt, uint64_t hash) {$/;"	f	file:
raw_lookup	other_filters/taf/src/taf.cc	/^static int raw_lookup(TAF* filter, elt_t elt, uint64_t hash) {$/;"	f	file:
raw_lookup	other_filters/taf/src/taf_sim.c	/^static int raw_lookup(TAF* filter, elt_t elt, uint64_t hash) {$/;"	f	file:
raw_lookup	other_filters/taf/src/utaf.c	/^static int raw_lookup(FullTAF* filter, elt_t elt, uint64_t hash) {$/;"	f	file:
raw_lookup	src/taf.cc	/^static int raw_lookup(TAF* filter, elt_t elt, uint64_t hash) {$/;"	f	file:
rc	external/splinterdb/tests/functional/btree_test.c	/^   platform_status        rc;$/;"	m	struct:test_btree_thread_params	file:
rc	external/splinterdb/tests/functional/splinter_test.c	/^   platform_status    rc;$/;"	m	struct:test_splinter_thread_params	file:
rc_allocator	external/splinterdb/src/rc_allocator.h	/^typedef struct rc_allocator {$/;"	s
rc_allocator	external/splinterdb/src/rc_allocator.h	/^} rc_allocator;$/;"	t	typeref:struct:rc_allocator
rc_allocator_alloc	external/splinterdb/src/rc_allocator.c	/^rc_allocator_alloc(rc_allocator *al,   \/\/ IN$/;"	f
rc_allocator_alloc_super_addr	external/splinterdb/src/rc_allocator.c	/^rc_allocator_alloc_super_addr(rc_allocator     *al,$/;"	f
rc_allocator_alloc_super_addr_virtual	external/splinterdb/src/rc_allocator.c	/^rc_allocator_alloc_super_addr_virtual(allocator        *a,$/;"	f
rc_allocator_alloc_virtual	external/splinterdb/src/rc_allocator.c	/^rc_allocator_alloc_virtual(allocator *a, uint64 *addr, page_type type)$/;"	f
rc_allocator_assert_noleaks	external/splinterdb/src/rc_allocator.c	/^rc_allocator_assert_noleaks(rc_allocator *al)$/;"	f
rc_allocator_assert_noleaks_virtual	external/splinterdb/src/rc_allocator.c	/^rc_allocator_assert_noleaks_virtual(allocator *a)$/;"	f
rc_allocator_dec_ref	external/splinterdb/src/rc_allocator.c	/^rc_allocator_dec_ref(rc_allocator *al, uint64 addr, page_type type)$/;"	f
rc_allocator_dec_ref_virtual	external/splinterdb/src/rc_allocator.c	/^rc_allocator_dec_ref_virtual(allocator *a, uint64 addr, page_type type)$/;"	f
rc_allocator_deinit	external/splinterdb/src/rc_allocator.c	/^rc_allocator_deinit(rc_allocator *al)$/;"	f
rc_allocator_extent_number	external/splinterdb/src/rc_allocator.c	/^rc_allocator_extent_number(rc_allocator *al, uint64 addr)$/;"	f	file:
rc_allocator_extent_size	external/splinterdb/src/rc_allocator.c	/^rc_allocator_extent_size(rc_allocator *al)$/;"	f
rc_allocator_get_capacity	external/splinterdb/src/rc_allocator.c	/^rc_allocator_get_capacity(rc_allocator *al)$/;"	f
rc_allocator_get_capacity_virtual	external/splinterdb/src/rc_allocator.c	/^rc_allocator_get_capacity_virtual(allocator *a)$/;"	f
rc_allocator_get_config	external/splinterdb/src/rc_allocator.c	/^rc_allocator_get_config(rc_allocator *al)$/;"	f
rc_allocator_get_config_virtual	external/splinterdb/src/rc_allocator.c	/^rc_allocator_get_config_virtual(allocator *a)$/;"	f
rc_allocator_get_ref	external/splinterdb/src/rc_allocator.c	/^rc_allocator_get_ref(rc_allocator *al, uint64 addr)$/;"	f
rc_allocator_get_ref_virtual	external/splinterdb/src/rc_allocator.c	/^rc_allocator_get_ref_virtual(allocator *a, uint64 addr)$/;"	f
rc_allocator_get_super_addr	external/splinterdb/src/rc_allocator.c	/^rc_allocator_get_super_addr(rc_allocator     *al,$/;"	f
rc_allocator_get_super_addr_virtual	external/splinterdb/src/rc_allocator.c	/^rc_allocator_get_super_addr_virtual(allocator        *a,$/;"	f
rc_allocator_in_use	external/splinterdb/src/rc_allocator.c	/^rc_allocator_in_use(rc_allocator *al)$/;"	f
rc_allocator_in_use_virtual	external/splinterdb/src/rc_allocator.c	/^rc_allocator_in_use_virtual(allocator *a)$/;"	f
rc_allocator_inc_ref	external/splinterdb/src/rc_allocator.c	/^rc_allocator_inc_ref(rc_allocator *al, uint64 addr)$/;"	f
rc_allocator_inc_ref_virtual	external/splinterdb/src/rc_allocator.c	/^rc_allocator_inc_ref_virtual(allocator *a, uint64 addr)$/;"	f
rc_allocator_init	external/splinterdb/src/rc_allocator.c	/^rc_allocator_init(rc_allocator      *al,$/;"	f
rc_allocator_init_meta_page	external/splinterdb/src/rc_allocator.c	/^rc_allocator_init_meta_page(rc_allocator *al)$/;"	f	file:
rc_allocator_meta_page	external/splinterdb/src/rc_allocator.h	/^typedef struct ONDISK rc_allocator_meta_page {$/;"	s
rc_allocator_meta_page	external/splinterdb/src/rc_allocator.h	/^} rc_allocator_meta_page;$/;"	t	typeref:struct:rc_allocator_meta_page
rc_allocator_mount	external/splinterdb/src/rc_allocator.c	/^rc_allocator_mount(rc_allocator      *al,$/;"	f
rc_allocator_ops	external/splinterdb/src/rc_allocator.c	/^const static allocator_ops rc_allocator_ops = {$/;"	v	file:
rc_allocator_page_size	external/splinterdb/src/rc_allocator.c	/^rc_allocator_page_size(rc_allocator *al)$/;"	f
rc_allocator_print_allocated	external/splinterdb/src/rc_allocator.c	/^rc_allocator_print_allocated(rc_allocator *al)$/;"	f
rc_allocator_print_allocated_virtual	external/splinterdb/src/rc_allocator.c	/^rc_allocator_print_allocated_virtual(allocator *a)$/;"	f
rc_allocator_print_stats	external/splinterdb/src/rc_allocator.c	/^rc_allocator_print_stats(rc_allocator *al)$/;"	f
rc_allocator_print_stats_virtual	external/splinterdb/src/rc_allocator.c	/^rc_allocator_print_stats_virtual(allocator *a)$/;"	f
rc_allocator_remove_super_addr	external/splinterdb/src/rc_allocator.c	/^rc_allocator_remove_super_addr(rc_allocator     *al,$/;"	f
rc_allocator_remove_super_addr_virtual	external/splinterdb/src/rc_allocator.c	/^rc_allocator_remove_super_addr_virtual(allocator *a, allocator_root_id spl_id)$/;"	f
rc_allocator_stats	external/splinterdb/src/rc_allocator.h	/^typedef struct rc_allocator_stats {$/;"	s
rc_allocator_stats	external/splinterdb/src/rc_allocator.h	/^} rc_allocator_stats;$/;"	t	typeref:struct:rc_allocator_stats
rc_allocator_unmount	external/splinterdb/src/rc_allocator.c	/^rc_allocator_unmount(rc_allocator *al)$/;"	f
rc_allocator_valid_config	external/splinterdb/src/rc_allocator.c	/^rc_allocator_valid_config(allocator_config *cfg)$/;"	f
rc_allocator_valid_extent_addr	external/splinterdb/src/rc_allocator.c	/^rc_allocator_valid_extent_addr(rc_allocator *al, uint64 base_addr)$/;"	f	file:
rc_bh	external/splinterdb/src/clockcache.h	/^   buffer_handle   rc_bh;$/;"	m	struct:clockcache
rdtsc	other_filters/cqf/src/gqf.c	/^static __inline__ unsigned long long rdtsc(void)$/;"	f	file:
rdtsc	src/gqf.c	/^static __inline__ unsigned long long rdtsc(void)$/;"	f	file:
rdtsc	src/gqf_backup.c	/^static __inline__ unsigned long long rdtsc(void)$/;"	f	file:
read	external/splinterdb/src/io.h	/^   io_read_fn                read;$/;"	m	struct:io_ops
read_amp	external/splinterdb/scripts/run_ycsb.py	/^                        read_amp = float(net_diskstats[1]) \/ logical_data_size$/;"	v
read_async	external/splinterdb/src/io.h	/^   io_read_async_fn          read_async;$/;"	m	struct:io_ops
read_async_callback	external/splinterdb/tests/functional/io_apis_test.c	/^read_async_callback(void           *metadata,$/;"	f	file:
read_counter	external/splinterdb/src/platform_linux/platform_types.h	/^   volatile uint8     read_counter[MAX_THREADS][PLATFORM_CACHELINE_SIZE \/ 2];$/;"	m	struct:__anon31
ready	external/splinterdb/tests/functional/btree_test.c	/^   bool32            ready;$/;"	m	struct:__anon55	file:
ready_q	external/splinterdb/tests/functional/test_async.h	/^   pcq             *ready_q;$/;"	m	struct:__anon57
ready_q	external/splinterdb/tests/functional/test_async.h	/^   pcq            *ready_q;$/;"	m	struct:__anon59
reclaim_threshold	external/splinterdb/include/splinterdb/splinterdb.h	/^   uint64 reclaim_threshold;$/;"	m	struct:splinterdb_config
reclaim_threshold	external/splinterdb/src/trunk.h	/^   uint64 reclaim_threshold;    \/\/ start reclaming space when$/;"	m	struct:trunk_config
reclaim_threshold	external/splinterdb/tests/config.h	/^   uint64 reclaim_threshold;$/;"	m	struct:master_config
record	src/gqf.c	/^int record(const QF *qf, char *operation, uint64_t hash, uint64_t recorded_block) {$/;"	f
record	src/gqf_backup.c	/^int record(const QF *qf, char *operation, uint64_t hash, uint64_t recorded_block) {$/;"	f
record_break	src/gqf.c	/^int record_break(const QF *qf, char *operation, uint64_t block, uint64_t intra) {$/;"	f
record_break	src/gqf_backup.c	/^int record_break(const QF *qf, char *operation, uint64_t block, uint64_t intra) {$/;"	f
record_elapsed_time	external/splinterdb/test.sh	/^function record_elapsed_time() {$/;"	f
record_latency	external/splinterdb/tests/functional/ycsb_test.c	/^record_latency(latency_table table, uint64_t latency)$/;"	f
recording	src/gqf.c	/^FILE *recording = NULL;$/;"	v
recording	src/gqf_backup.c	/^FILE *recording = NULL;$/;"	v
ref_count	external/splinterdb/src/rc_allocator.h	/^   uint8                  *ref_count;$/;"	m	struct:rc_allocator
ref_count	external/splinterdb/tests/test_data.h	/^   int8  ref_count;$/;"	m	struct:data_handle
ref_counts	external/splinterdb/tests/functional/test_splinter_shadow.h	/^   int8         *ref_counts;$/;"	m	struct:test_splinter_shadow_array
refcount	external/splinterdb/src/clockcache.h	/^   int    refcount;$/;"	m	struct:history_record
refcount	external/splinterdb/src/clockcache.h	/^   volatile uint8 *refcount;$/;"	m	struct:clockcache
refcount	external/splinterdb/tests/functional/test_async.h	/^      int8   refcount;   \/\/ Used by functionality test$/;"	m	union:__anon57::__anon58
register_standard_hooks	external/splinterdb/src/task.c	/^register_standard_hooks(task_system *ts)$/;"	f	file:
register_thread	external/splinterdb/src/io.h	/^   io_register_thread_fn     register_thread;$/;"	m	struct:io_ops
release	external/splinterdb/src/log.h	/^   log_release_fn release;$/;"	m	struct:log_ops
rem	src/test_bulk.c	/^	uint64_t rem; \/\/ the remainder representing the item in the filter including extensions and the quotient$/;"	m	struct:_ilist	file:
rem	src/test_deletions.c	/^	uint64_t rem; \/\/ the remainder representing the item in the filter including extensions and the quotient$/;"	m	struct:_ilist	file:
rem	src/test_ext_inc_throughput.cc	/^	uint64_t rem;$/;"	m	struct:_set_node	file:
rem	src/test_ext_throughput.cc	/^	uint64_t rem;$/;"	m	struct:_set_node	file:
rem	src/test_fill_varied_throughput.c	/^	uint64_t rem; \/\/ the remainder representing the item in the filter including extensions and the quotient$/;"	m	struct:_ilist	file:
rem	src/test_hash_accesses.c	/^	uint64_t rem; \/\/ the remainder representing the item in the filter including extensions and the quotient$/;"	m	struct:_ilist	file:
rem	src/test_merge.c	/^	uint64_t rem; \/\/ the remainder representing the item in the filter including extensions and the quotient$/;"	m	struct:_ilist	file:
rem	src/test_near_full.c	/^	uint64_t rem; \/\/ the remainder representing the item in the filter including extensions and the quotient$/;"	m	struct:_ilist	file:
rem	src/test_throughput_old.c	/^	uint64_t rem; \/\/ the remainder representing the item in the filter including extensions and the quotient$/;"	m	struct:_ilist	file:
rem	src/test_unit_old.c	/^	uint64_t rem; \/\/ the remainder representing the item in the filter including extensions and the quotient$/;"	m	struct:_ilist	file:
rem	src/test_whitelist.c	/^	uint64_t rem; \/\/ the remainder representing the item in the filter including extensions and the quotient$/;"	m	struct:_ilist	file:
rem_t	other_filters/taf/src/remainder.h	/^typedef uint16_t rem_t;$/;"	t
rem_t	other_filters/taf/src/remainder.h	/^typedef uint32_t rem_t;$/;"	t
rem_t	other_filters/taf/src/remainder.h	/^typedef uint64_t rem_t;$/;"	t
rem_t	other_filters/taf/src/remainder.h	/^typedef uint8_t rem_t;$/;"	t
rem_t	src/taf.cc	/^typedef uint16_t rem_t;$/;"	t	file:
rem_t	src/taf.cc	/^typedef uint32_t rem_t;$/;"	t	file:
rem_t	src/taf.cc	/^typedef uint64_t rem_t;$/;"	t	file:
rem_t	src/taf.cc	/^typedef uint8_t rem_t;$/;"	t	file:
remainder	external/splinterdb/src/routing_filter.h	/^   uint32              remainder;   \/\/ remainder$/;"	m	struct:routing_async_ctxt
remainder	other_filters/taf/src/macros.h	62;"	d
remainder	src/taf.cc	268;"	d	file:
remainder_size	external/splinterdb/src/routing_filter.h	/^   uint32              remainder_size;$/;"	m	struct:routing_async_ctxt
remainders	other_filters/taf/src/exaf.h	/^  rem_t remainders[64];$/;"	m	struct:exaf_block_t
remainders	other_filters/taf/src/rsqf.h	/^  rem_t remainders[64];$/;"	m	struct:rsqf_block_t
remainders	other_filters/taf/src/splinter_taf.h	/^  rem_t remainders[64];$/;"	m	struct:taf_block_t
remainders	other_filters/taf/src/taf.h	/^  rem_t remainders[64];$/;"	m	struct:taf_block_t
remainders	other_filters/taf/src/taf_sim.h	/^  rem_t remainders[64];$/;"	m	struct:taf_block_t
remainders	other_filters/taf/src/utaf.h	/^  rem_t remainders[64];$/;"	m	struct:utaf_block_t
remainders	src/taf.cc	/^  rem_t remainders[64];$/;"	m	struct:taf_block_t	file:
remote	other_filters/acf/src/cuckoofilter.h	/^				 TableType<64> *remote;$/;"	m	class:cuckoofilter::CuckooFilter
remote	other_filters/acfsim/src/cuckoofilter.h	/^				 TableType<64> *remote;$/;"	m	class:cuckoofilter::CuckooFilter
remote	other_filters/taf/src/exaf.h	/^  elt_t* remote;                \/* array of inserted elements (up to 64 bits) *\/$/;"	m	struct:exaf_t
remote	other_filters/taf/src/splinter_taf.h	/^  Remote_elt *remote;$/;"	m	struct:taf_t
remote	other_filters/taf/src/taf.h	/^  Remote_elt* remote;           \/* array of inserted elements (up to 64 bits) *\/$/;"	m	struct:taf_t
remote	other_filters/taf/src/taf_sim.h	/^  Remote_elt* remote;           \/* array of inserted elements (up to 64 bits) *\/$/;"	m	struct:taf_t
remote	other_filters/taf/src/utaf.h	/^  Remote_elt* remote;           \/* array of inserted elements (up to 64 bits) *\/$/;"	m	struct:utaf_t
remote	src/taf.cc	/^  Remote_elt* remote;           \/* array of inserted elements (up to 64 bits) *\/$/;"	m	struct:taf_t	file:
remote_elt_t	other_filters/taf/src/splinter_taf.h	/^typedef struct remote_elt_t {$/;"	s
remote_elt_t	other_filters/taf/src/taf.h	/^typedef struct remote_elt_t {$/;"	s
remote_elt_t	other_filters/taf/src/taf_sim.h	/^typedef struct remote_elt_t {$/;"	s
remote_elt_t	other_filters/taf/src/utaf.h	/^typedef struct remote_elt_t {$/;"	s
remote_elt_t	src/taf.cc	/^typedef struct remote_elt_t {$/;"	s	file:
remove_replace_slots_and_shift_remainders_and_runends_and_offsets	other_filters/cqf/src/gqf.c	/^static inline int remove_replace_slots_and_shift_remainders_and_runends_and_offsets(QF		        *qf,$/;"	f	file:
remove_replace_slots_and_shift_remainders_and_runends_and_offsets	src/gqf.c	/^static inline int remove_replace_slots_and_shift_remainders_and_runends_and_offsets(const QF *qf, int only_item_in_run, uint64_t bucket_index,$/;"	f	file:
remove_replace_slots_and_shift_remainders_and_runends_and_offsets	src/gqf_backup.c	/^static inline int remove_replace_slots_and_shift_remainders_and_runends_and_offsets(const QF *qf, int only_item_in_run, uint64_t bucket_index,$/;"	f	file:
remove_super_addr	external/splinterdb/src/allocator.h	/^   remove_super_addr_fn remove_super_addr;$/;"	m	struct:allocator_ops
remove_super_addr_fn	external/splinterdb/src/allocator.h	/^typedef void (*remove_super_addr_fn)(allocator *al, allocator_root_id spl_id);$/;"	t
req	external/splinterdb/src/platform_linux/laio.h	/^   io_async_req      *req; \/\/ Ptr to allocated array of async req structs$/;"	m	struct:laio_handle
req	external/splinterdb/src/trunk.h	/^   trunk_compact_bundle_req *req;$/;"	m	struct:trunk_compacted_memtable
req_hand	external/splinterdb/src/platform_linux/laio.h	/^   uint64             req_hand[MAX_THREADS];$/;"	m	struct:laio_handle
req_hand_base	external/splinterdb/src/platform_linux/laio.h	/^   uint64             req_hand_base;$/;"	m	struct:laio_handle
reserved	include/gqf_int.h	/^		uint32_t reserved;$/;"	m	struct:quotient_filter_metadata
reserved	other_filters/cqf/include/gqf_int.h	/^		uint32_t reserved;$/;"	m	struct:quotient_filter_metadata
reset_stats	external/splinterdb/src/cache.h	/^   cache_generic_fn     reset_stats;$/;"	m	struct:cache_ops
result	external/splinterdb/tests/functional/btree_test.c	/^   merge_accumulator result;$/;"	m	struct:__anon55	file:
results_dir	external/splinterdb/scripts/run_ycsb.py	/^                results_dir = "{}\/{}-{}".format(SAVE_DIR, workload_string, DATETIME_STRING)$/;"	v
right	external/splinterdb/tests/functional/avlTree.h	/^   struct AvlTreeLinks *right;$/;"	m	struct:AvlTreeLinks	typeref:struct:AvlTreeLinks::AvlTreeLinks
root	external/splinterdb/tests/functional/avlTree.h	/^   AvlTreeLinks         *root;$/;"	m	struct:AvlTree
root_addr	external/splinterdb/src/btree.h	/^   uint64     root_addr;$/;"	m	struct:btree_iterator
root_addr	external/splinterdb/src/btree.h	/^   uint64 root_addr;     \/\/ root address of the output tree$/;"	m	struct:btree_pack_req
root_addr	external/splinterdb/src/memtable.h	/^   uint64                  root_addr;$/;"	m	struct:memtable
root_addr	external/splinterdb/src/trunk.c	/^   uint64 root_addr; \/\/ Address of the root of the trunk for the instance$/;"	m	struct:trunk_super_block	file:
root_addr	external/splinterdb/src/trunk.h	/^   uint64 root_addr; \/\/ root address of point btree$/;"	m	struct:trunk_branch
root_addr	external/splinterdb/src/trunk.h	/^   volatile uint64       root_addr;$/;"	m	struct:trunk_handle
root_addr	external/splinterdb/tests/unit/btree_stress_test.c	/^   uint64           root_addr;$/;"	m	struct:insert_thread_params	file:
root_compaction_max_tuples	external/splinterdb/src/trunk.h	/^   uint64 root_compaction_max_tuples;$/;"	m	struct:trunk_stats
root_compaction_pack_time_ns	external/splinterdb/src/trunk.h	/^   uint64 root_compaction_pack_time_ns;$/;"	m	struct:trunk_stats
root_compaction_time_max_ns	external/splinterdb/src/trunk.h	/^   uint64 root_compaction_time_max_ns;$/;"	m	struct:trunk_stats
root_compaction_time_ns	external/splinterdb/src/trunk.h	/^   uint64 root_compaction_time_ns;$/;"	m	struct:trunk_stats
root_compaction_tuples	external/splinterdb/src/trunk.h	/^   uint64 root_compaction_tuples;$/;"	m	struct:trunk_stats
root_compactions	external/splinterdb/src/trunk.h	/^   uint64 root_compactions;$/;"	m	struct:trunk_stats
root_count_flushes	external/splinterdb/src/trunk.h	/^   uint64 root_count_flushes;$/;"	m	struct:trunk_stats
root_failed_flushes	external/splinterdb/src/trunk.h	/^   uint64 root_failed_flushes;$/;"	m	struct:trunk_stats
root_filter_time_ns	external/splinterdb/src/trunk.h	/^   uint64 root_filter_time_ns;$/;"	m	struct:trunk_stats
root_filter_tuples	external/splinterdb/src/trunk.h	/^   uint64 root_filter_tuples;$/;"	m	struct:trunk_stats
root_filters_built	external/splinterdb/src/trunk.h	/^   uint64 root_filters_built;$/;"	m	struct:trunk_stats
root_flush_time_max_ns	external/splinterdb/src/trunk.h	/^   uint64 root_flush_time_max_ns;$/;"	m	struct:trunk_stats
root_flush_time_ns	external/splinterdb/src/trunk.h	/^   uint64 root_flush_time_ns;$/;"	m	struct:trunk_stats
root_flush_wait_time_ns	external/splinterdb/src/trunk.h	/^   uint64 root_flush_wait_time_ns;$/;"	m	struct:trunk_stats
root_full_flushes	external/splinterdb/src/trunk.h	/^   uint64 root_full_flushes;$/;"	m	struct:trunk_stats
rot	other_filters/acf/src/hashutil.cc	4;"	d	file:
rot	other_filters/acfsim/src/hashutil.cc	4;"	d	file:
rot	other_filters/cf/src/hashutil.cc	4;"	d	file:
rotl32	other_filters/taf/src/murmur3.c	/^static FORCE_INLINE uint32_t rotl32 ( uint32_t x, int8_t r )$/;"	f	file:
rotl32	src/taf.cc	/^static FORCE_INLINE uint32_t rotl32 ( uint32_t x, int8_t r )$/;"	f	file:
rotl64	other_filters/taf/src/murmur3.c	/^static FORCE_INLINE uint64_t rotl64 ( uint64_t x, int8_t r )$/;"	f	file:
rotl64	src/taf.cc	/^static FORCE_INLINE uint64_t rotl64 ( uint64_t x, int8_t r )$/;"	f	file:
rough_itor	external/splinterdb/src/trunk.c	/^   iterator      *rough_itor[TRUNK_RANGE_ITOR_MAX_BRANCHES];$/;"	m	struct:__anon42	file:
routing_async_cb	external/splinterdb/src/routing_filter.h	/^typedef void (*routing_async_cb)(struct routing_async_ctxt *ctxt);$/;"	t
routing_async_ctxt	external/splinterdb/src/routing_filter.h	/^typedef struct routing_async_ctxt {$/;"	s
routing_async_ctxt	external/splinterdb/src/routing_filter.h	/^} routing_async_ctxt;$/;"	t	typeref:struct:routing_async_ctxt
routing_async_set_state	external/splinterdb/src/routing_filter.c	/^routing_async_set_state(routing_async_ctxt *ctxt, routing_async_state new_state)$/;"	f	file:
routing_async_state	external/splinterdb/src/routing_filter.h	/^} routing_async_state;$/;"	t	typeref:enum:__anon39
routing_async_state_get_filter	external/splinterdb/src/routing_filter.h	/^   routing_async_state_get_filter, \/\/ re-entrant state$/;"	e	enum:__anon39
routing_async_state_get_index	external/splinterdb/src/routing_filter.h	/^   routing_async_state_get_index,  \/\/ re-entrant state$/;"	e	enum:__anon39
routing_async_state_got_filter	external/splinterdb/src/routing_filter.h	/^   routing_async_state_got_filter,$/;"	e	enum:__anon39
routing_async_state_got_index	external/splinterdb/src/routing_filter.h	/^   routing_async_state_got_index,$/;"	e	enum:__anon39
routing_async_state_invalid	external/splinterdb/src/routing_filter.h	/^   routing_async_state_invalid = 0,$/;"	e	enum:__anon39
routing_async_state_start	external/splinterdb/src/routing_filter.h	/^   routing_async_state_start,$/;"	e	enum:__anon39
routing_config	external/splinterdb/src/routing_filter.h	/^typedef struct routing_config {$/;"	s
routing_config	external/splinterdb/src/routing_filter.h	/^} routing_config;$/;"	t	typeref:struct:routing_config
routing_filter	external/splinterdb/src/routing_filter.h	/^typedef struct ONDISK routing_filter {$/;"	s
routing_filter	external/splinterdb/src/routing_filter.h	/^} routing_filter;$/;"	t	typeref:struct:routing_filter
routing_filter_add	external/splinterdb/src/routing_filter.c	/^routing_filter_add(cache          *cc,$/;"	f
routing_filter_async_callback	external/splinterdb/src/routing_filter.c	/^routing_filter_async_callback(cache_async_ctxt *cache_ctxt)$/;"	f	file:
routing_filter_ctxt_init	external/splinterdb/src/routing_filter.h	/^routing_filter_ctxt_init(routing_async_ctxt *ctxt,       \/\/ OUT$/;"	f
routing_filter_estimate_unique_fp	external/splinterdb/src/routing_filter.c	/^routing_filter_estimate_unique_fp(cache           *cc,$/;"	f
routing_filter_estimate_unique_keys	external/splinterdb/src/routing_filter.c	/^routing_filter_estimate_unique_keys(routing_filter *filter, routing_config *cfg)$/;"	f
routing_filter_estimate_unique_keys_from_count	external/splinterdb/src/routing_filter.c	/^routing_filter_estimate_unique_keys_from_count(routing_config *cfg,$/;"	f
routing_filter_get_next_value	external/splinterdb/src/routing_filter.h	/^routing_filter_get_next_value(uint64 found_values, uint16 last_value)$/;"	f
routing_filter_get_remainder_and_value	external/splinterdb/src/routing_filter.c	/^routing_filter_get_remainder_and_value(routing_config *cfg,$/;"	f	file:
routing_filter_is_value_found	external/splinterdb/src/routing_filter.h	/^routing_filter_is_value_found(uint64 found_values, uint16 value)$/;"	f
routing_filter_lookup	external/splinterdb/src/routing_filter.c	/^routing_filter_lookup(cache          *cc,$/;"	f
routing_filter_lookup_async	external/splinterdb/src/routing_filter.c	/^routing_filter_lookup_async(cache              *cc,$/;"	f
routing_filter_prefetch	external/splinterdb/src/routing_filter.c	/^routing_filter_prefetch(cache          *cc,$/;"	f
routing_filter_print	external/splinterdb/src/routing_filter.c	/^routing_filter_print(cache *cc, routing_config *cfg, routing_filter *filter)$/;"	f
routing_filter_print_encoding	external/splinterdb/src/routing_filter.c	/^routing_filter_print_encoding(routing_config *cfg, routing_hdr *hdr)$/;"	f
routing_filter_print_index	external/splinterdb/src/routing_filter.c	/^routing_filter_print_index(cache          *cc,$/;"	f
routing_filter_print_remainders	external/splinterdb/src/routing_filter.c	/^routing_filter_print_remainders(routing_config *cfg,$/;"	f
routing_filter_verify	external/splinterdb/src/routing_filter.c	/^routing_filter_verify(cache          *cc,$/;"	f
routing_filter_zap	external/splinterdb/src/routing_filter.c	/^routing_filter_zap(cache *cc, routing_filter *filter)$/;"	f
routing_get_bucket	external/splinterdb/src/routing_filter.c	/^routing_get_bucket(uint32 fp, size_t remainder_and_value_size)$/;"	f	file:
routing_get_bucket_bounds	external/splinterdb/src/routing_filter.c	/^routing_get_bucket_bounds(char   *encoding,$/;"	f	file:
routing_get_bucket_counts	external/splinterdb/src/routing_filter.c	/^routing_get_bucket_counts(routing_config *cfg, routing_hdr *hdr, uint32 *count)$/;"	f
routing_get_header	external/splinterdb/src/routing_filter.c	/^routing_get_header(cache          *cc,$/;"	f	file:
routing_get_index	external/splinterdb/src/routing_filter.c	/^routing_get_index(uint32 fp, size_t index_remainder_and_value_size)$/;"	f	file:
routing_hdr	external/splinterdb/src/routing_filter.c	/^typedef struct ONDISK routing_hdr {$/;"	s	file:
routing_hdr	external/splinterdb/src/routing_filter.c	/^} routing_hdr;$/;"	t	typeref:struct:routing_hdr	file:
routing_header_length	external/splinterdb/src/routing_filter.c	/^routing_header_length(routing_config *cfg, routing_hdr *hdr)$/;"	f	file:
routing_set_bit	external/splinterdb/src/routing_filter.c	/^routing_set_bit(uint64 *data, uint64 bitnum)$/;"	f	file:
routing_unget_header	external/splinterdb/src/routing_filter.c	/^routing_unget_header(cache *cc, page_handle *header_page)$/;"	f	file:
routing_unlock_and_unget_page	external/splinterdb/src/routing_filter.c	/^routing_unlock_and_unget_page(cache *cc, page_handle *page)$/;"	f	file:
routing_unset_bit	external/splinterdb/src/routing_filter.c	/^routing_unset_bit(uint64 *data, uint64 bitnum)$/;"	f	file:
rs	external/splinterdb/tests/functional/cache_test.c	/^         random_state rs;$/;"	m	struct:__anon47::__anon49::__anon51	file:
rsqf_block_t	other_filters/taf/src/rsqf.h	/^typedef struct rsqf_block_t {$/;"	s
rsqf_clear	other_filters/taf/src/rsqf.c	/^void rsqf_clear(RSQF* filter) {$/;"	f
rsqf_destroy	other_filters/taf/src/rsqf.c	/^void rsqf_destroy(RSQF* filter) {$/;"	f
rsqf_hash	other_filters/taf/src/rsqf.c	/^static uint64_t rsqf_hash(const RSQF *filter, uint64_t elt) {$/;"	f	file:
rsqf_init	other_filters/taf/src/rsqf.c	/^void rsqf_init(RSQF *filter, size_t n, int seed) {$/;"	f
rsqf_insert	other_filters/taf/src/rsqf.c	/^void rsqf_insert(RSQF *filter, uint64_t elt) {$/;"	f
rsqf_load	other_filters/taf/src/rsqf.c	/^double rsqf_load(RSQF *filter) {$/;"	f
rsqf_lookup	other_filters/taf/src/rsqf.c	/^int rsqf_lookup(const RSQF *filter, uint64_t elt) {$/;"	f
rsqf_t	other_filters/taf/src/rsqf.h	/^typedef struct rsqf_t {$/;"	s
rtt_ms	external/splinterdb/examples/splinterdb_custom_ipv4_addr_sortcmp_example.c	/^   uint32     rtt_ms; \/\/ Round trip time$/;"	m	struct:www_ping_metrics	file:
run	external/splinterdb/tests/unit/ctest.h	/^   union ctest_run_func_union run;$/;"	m	struct:ctest	typeref:union:ctest::ctest_run_func_union
run	include/gqf_int.h	/^		uint64_t run;$/;"	m	struct:quotient_filter_iterator
run	other_filters/cqf/include/gqf_int.h	/^		uint64_t run;$/;"	m	struct:quotient_filter_iterator
run_adversarial_test	src/test_driver.c	/^test_results_t run_adversarial_test(size_t qbits, size_t rbits, uint64_t *insert_set, size_t insert_set_len, uint64_t *query_set, size_t query_set_len, uint64_t cache_size, uint64_t adv_freq, uint64_t adv_set_max_size, int verbose, char *queries_outfile) {$/;"	f
run_all_ycsb_phases	external/splinterdb/tests/functional/ycsb_test.c	/^run_all_ycsb_phases(trunk_handle    *spl,$/;"	f	file:
run_btree_tests	external/splinterdb/test.sh	/^function run_btree_tests() {$/;"	f
run_build_and_test	external/splinterdb/test.sh	/^function run_build_and_test() {$/;"	f
run_check_rc	external/splinterdb/test.sh	/^function run_check_rc() {$/;"	f
run_command	external/splinterdb/scripts/run_ycsb.py	/^                run_command = [".\/bin\/driver_test", "ycsb_test"]$/;"	v
run_end	other_filters/cqf/src/gqf.c	/^static inline uint64_t run_end(const QF *qf, uint64_t hash_bucket_index)$/;"	f	file:
run_end	src/gqf.c	/^static inline uint64_t run_end(const QF *qf, uint64_t hash_bucket_index)$/;"	f	file:
run_end	src/gqf_backup.c	/^static inline uint64_t run_end(const QF *qf, uint64_t hash_bucket_index)$/;"	f	file:
run_fast_unit_tests	external/splinterdb/test.sh	/^function run_fast_unit_tests() {$/;"	f
run_micro_test	src/test_driver.c	/^test_results_t run_micro_test(size_t qbits, size_t rbits, uint64_t *insert_set, size_t insert_set_len, uint64_t *query_set, size_t query_set_len, int verbose) {$/;"	f
run_nightly_perf_tests	external/splinterdb/test.sh	/^function run_nightly_perf_tests() {$/;"	f
run_nightly_stress_tests	external/splinterdb/test.sh	/^function run_nightly_stress_tests() {$/;"	f
run_other_driver_tests	external/splinterdb/test.sh	/^function run_other_driver_tests() {$/;"	f
run_parallel_splinter_test	src/test_driver.c	/^test_results_t run_parallel_splinter_test(size_t qbits, size_t rbits, uint64_t *insert_set, size_t insert_set_len, uint64_t *query_set, size_t query_set_len, size_t num_threads) {$/;"	f
run_parallel_test	src/test_driver.c	/^test_results_t run_parallel_test(size_t qbits, size_t rbits, uint64_t *insert_set, size_t insert_set_len, uint64_t *query_set, size_t query_set_len, size_t num_threads) {$/;"	f
run_set_tests	other_filters/taf/src/set.c	/^int run_set_tests() {$/;"	f
run_set_tests	src/taf.cc	/^int run_set_tests() {$/;"	f
run_slower_forked_process_tests	external/splinterdb/test.sh	/^function run_slower_forked_process_tests() {$/;"	f
run_slower_unit_tests	external/splinterdb/test.sh	/^function run_slower_unit_tests() {$/;"	f
run_splinter_functionality_tests	external/splinterdb/test.sh	/^function run_splinter_functionality_tests() {$/;"	f
run_splinter_perf_tests	external/splinterdb/test.sh	/^function run_splinter_perf_tests() {$/;"	f
run_split_throughput_test	src/test_driver.c	/^test_results_t run_split_throughput_test(size_t qbits, size_t rbits, uint64_t *insert_set, size_t insert_set_len, uint64_t *query_set, size_t query_set_len, int verbose, char *inserts_outfile, char *queries_outfile) {$/;"	f
run_tests_with_shared_memory	external/splinterdb/test.sh	/^function run_tests_with_shared_memory() {$/;"	f
run_throughput_test	src/test_driver.c	/^test_results_t run_throughput_test(size_t qbits, size_t rbits, uint64_t *insert_set, size_t insert_set_len, uint64_t *query_set, size_t query_set_len, int verbose, char *inserts_outfile, char *queries_outfile) {$/;"	f
run_with_timing	external/splinterdb/test.sh	/^function run_with_timing() {$/;"	f
run_ycsb_phase	external/splinterdb/tests/functional/ycsb_test.c	/^run_ycsb_phase(trunk_handle    *spl,$/;"	f	file:
runends	include/gqf_int.h	/^		uint64_t runends[QF_METADATA_WORDS_PER_BLOCK];$/;"	m	struct:qfblock
runends	other_filters/cqf/include/gqf_int.h	/^		uint64_t runends[QF_METADATA_WORDS_PER_BLOCK];$/;"	m	struct:qfblock
runends	other_filters/taf/src/exaf.h	/^  uint64_t runends;$/;"	m	struct:exaf_block_t
runends	other_filters/taf/src/rsqf.h	/^  uint64_t runends;$/;"	m	struct:rsqf_block_t
runends	other_filters/taf/src/splinter_taf.h	/^  uint64_t runends;$/;"	m	struct:taf_block_t
runends	other_filters/taf/src/taf.h	/^  uint64_t runends;$/;"	m	struct:taf_block_t
runends	other_filters/taf/src/taf_sim.h	/^  uint64_t runends;$/;"	m	struct:taf_block_t
runends	other_filters/taf/src/utaf.h	/^  uint64_t runends;$/;"	m	struct:utaf_block_t
runends	src/taf.cc	/^  uint64_t runends;$/;"	m	struct:taf_block_t	file:
running_times	external/splinterdb/tests/functional/ycsb_test.c	/^typedef struct running_times {$/;"	s	file:
running_times	external/splinterdb/tests/functional/ycsb_test.c	/^} running_times;$/;"	t	typeref:struct:running_times	file:
runtimedata	include/gqf_int.h	/^		qfruntime *runtimedata;$/;"	m	struct:quotient_filter
runtimedata	other_filters/cqf/include/gqf_int.h	/^		qfruntime *runtimedata;$/;"	m	struct:quotient_filter
rwildcard	external/splinterdb/Makefile	/^define rwildcard =$/;"	m
rwlock	external/splinterdb/src/memtable.h	/^   platform_batch_rwlock *rwlock;$/;"	m	struct:memtable_context
s	other_filters/cqf/src/zipf.c	/^    double s;                    \/\/ s, the characteristic exponent.$/;"	m	struct:zipfian	file:
s	src/zipf.c	/^    double s;                    \/\/ s, the characteristic exponent.$/;"	m	struct:zipfian	file:
safe_wait	external/splinterdb/tests/unit/large_inserts_stress_test.c	/^safe_wait()$/;"	f	file:
safe_wait	external/splinterdb/tests/unit/splinterdb_forked_child_test.c	/^safe_wait()$/;"	f	file:
sample	other_filters/cqf/src/bm.c	/^	long sample;$/;"	m	struct:zipf_params	file:
sample	src/bm.c	/^	long sample;$/;"	m	struct:zipf_params	file:
save_pivots_to_compact_bundle_scratch	external/splinterdb/src/trunk.c	/^save_pivots_to_compact_bundle_scratch(trunk_handle           *spl,     \/\/ IN$/;"	f	file:
saved_pivot_keys	external/splinterdb/src/trunk.c	/^   key_buffer             saved_pivot_keys[TRUNK_MAX_PIVOTS];$/;"	m	struct:__anon41	file:
sb	external/splinterdb/src/trunk.h	/^   struct trunk_subbundle  *sb;           \/\/ Subbundle$/;"	m	struct:trunk_async_ctxt	typeref:struct:trunk_async_ctxt::trunk_subbundle
sb_filter	external/splinterdb/src/trunk.c	/^   routing_filter  sb_filter[TRUNK_MAX_SUBBUNDLE_FILTERS];$/;"	m	struct:trunk_hdr	file:
sb_no	external/splinterdb/src/trunk.h	/^   uint16 sb_no;     \/\/ subbundle number (newest)$/;"	m	struct:trunk_async_ctxt
scans	external/splinterdb/tests/functional/ycsb_test.c	/^   latency_table scans;$/;"	m	struct:latency_tables	file:
scratch	external/splinterdb/src/memtable.h	/^   btree_scratch scratch[MAX_THREADS];$/;"	m	struct:memtable_context
scratch	external/splinterdb/tests/unit/btree_stress_test.c	/^   btree_scratch   *scratch;$/;"	m	struct:insert_thread_params	file:
scratch_btree_add_tuple	external/splinterdb/src/btree.h	/^} scratch_btree_add_tuple;$/;"	t	typeref:struct:__anon14
scratch_btree_defragment_node	external/splinterdb/src/btree.h	/^} scratch_btree_defragment_node;$/;"	t	typeref:struct:__anon15
scratch_node	external/splinterdb/src/btree.h	/^   char scratch_node[MAX_PAGE_SIZE];$/;"	m	struct:__anon15
scratch_size	external/splinterdb/src/task.h	/^   uint64 scratch_size;$/;"	m	struct:task_system_config
search_for_key_via_iterator	external/splinterdb/tests/functional/test_functionality.c	/^search_for_key_via_iterator(trunk_handle *spl, key target)$/;"	f	file:
seed	external/splinterdb/src/btree.h	/^   unsigned int  seed; \/\/ seed used for calculating filter_hash$/;"	m	struct:btree_pack_req
seed	external/splinterdb/src/routing_filter.h	/^   unsigned int seed;$/;"	m	struct:routing_config
seed	external/splinterdb/src/shard_log.h	/^   uint64        seed;$/;"	m	struct:shard_log_config
seed	external/splinterdb/tests/config.h	/^   uint64 seed;$/;"	m	struct:master_config
seed	external/splinterdb/tests/functional/random.h	/^   uint64 seed;$/;"	m	struct:random_state
seed	external/splinterdb/tests/functional/splinter_test.c	/^   uint64             seed;$/;"	m	struct:test_splinter_thread_params	file:
seed	external/splinterdb/tests/functional/test.h	/^   uint64 seed;$/;"	m	struct:test_exec_config
seed	include/gqf_int.h	/^		uint32_t seed;$/;"	m	struct:quotient_filter_metadata
seed	include/ll_table.h	/^	unsigned int seed;$/;"	m	struct:ll_table
seed	other_filters/acf/src/hashutil.h	/^	uint64_t seed;$/;"	m	class:cuckoofilter::Murmur64Hasher
seed	other_filters/acfsim/src/hashutil.h	/^	uint64_t seed;$/;"	m	class:cuckoofilter::Murmur64Hasher
seed	other_filters/cqf/include/gqf_int.h	/^		uint32_t seed;$/;"	m	struct:quotient_filter_metadata
seed	other_filters/cqf/src/bm.c	/^	unsigned int seed;$/;"	m	struct:uniform_online_state	file:
seed	other_filters/taf/src/exaf.h	/^  int seed;                     \/* seed for Murmurhash *\/$/;"	m	struct:exaf_t
seed	other_filters/taf/src/rsqf.h	/^  int seed;                     \/* seed for Murmurhash *\/$/;"	m	struct:rsqf_t
seed	other_filters/taf/src/splinter_taf.h	/^  int seed;                     \/* seed for Murmurhash *\/$/;"	m	struct:taf_t
seed	other_filters/taf/src/taf.h	/^  int seed;                     \/* seed for Murmurhash *\/$/;"	m	struct:taf_t
seed	other_filters/taf/src/taf_sim.h	/^  int seed;                     \/* seed for Murmurhash *\/$/;"	m	struct:taf_t
seed	other_filters/taf/src/utaf.h	/^  int seed;                     \/* seed for Murmurhash *\/$/;"	m	struct:utaf_t
seed	src/bm.c	/^	unsigned int seed;$/;"	m	struct:uniform_online_state	file:
seed	src/taf.cc	/^  int seed;                     \/* seed for Murmurhash *\/$/;"	m	struct:taf_t	file:
seek	external/splinterdb/src/iterator.h	/^   iterator_seek_fn  seek;$/;"	m	struct:iterator_ops
sel_code	other_filters/taf/src/splinter_taf.h	/^  uint8_t sel_code[SEL_CODE_BYTES];$/;"	m	struct:taf_block_t
sel_code	other_filters/taf/src/taf.h	/^  uint8_t sel_code[SEL_CODE_BYTES];$/;"	m	struct:taf_block_t
sel_code	other_filters/taf/src/taf_sim.h	/^  uint8_t sel_code[SEL_CODE_BYTES];$/;"	m	struct:taf_block_t
sel_code	src/taf.cc	/^  uint8_t sel_code[SEL_CODE_BYTES];$/;"	m	struct:taf_block_t	file:
sel_setup	other_filters/taf/src/splinter_taf.c	/^TAF* sel_setup() {$/;"	f
sel_setup	other_filters/taf/src/taf.c	/^TAF* sel_setup() {$/;"	f
sel_setup	other_filters/taf/src/taf.cc	/^TAF* sel_setup() {$/;"	f
sel_setup	other_filters/taf/src/utaf.c	/^FullTAF* sel_setup() {$/;"	f
sel_setup	src/taf.cc	/^TAF* sel_setup() {$/;"	f
select64	other_filters/taf/src/bit_util.c	/^static inline uint64_t select64(uint64_t x, int k) {$/;"	f	file:
select64	src/taf.cc	/^static inline uint64_t select64(uint64_t x, int k) {$/;"	f	file:
select_runend	other_filters/taf/src/exaf.c	/^static int select_runend(const ExAF* filter, size_t block_index, size_t rank) {$/;"	f	file:
select_runend	other_filters/taf/src/rsqf.c	/^static int select_runend(const RSQF* filter, size_t block_index, size_t rank) {$/;"	f	file:
select_runend	other_filters/taf/src/splinter_taf.c	/^static int select_runend(const TAF* filter, size_t block_index, size_t rank) {$/;"	f	file:
select_runend	other_filters/taf/src/taf.c	/^static int select_runend(const TAF* filter, size_t block_index, size_t rank) {$/;"	f	file:
select_runend	other_filters/taf/src/taf.cc	/^static int select_runend(const TAF* filter, size_t block_index, size_t rank) {$/;"	f	file:
select_runend	other_filters/taf/src/taf_sim.c	/^static int select_runend(const TAF* filter, size_t block_index, size_t rank) {$/;"	f	file:
select_runend	other_filters/taf/src/utaf.c	/^static int select_runend(const FullTAF* filter, size_t block_index, size_t rank) {$/;"	f	file:
select_runend	src/taf.cc	/^static int select_runend(const TAF* filter, size_t block_index, size_t rank) {$/;"	f	file:
selector	other_filters/taf/src/utaf.h	47;"	d
selectors	other_filters/taf/src/utaf.h	/^  uint8_t selectors[64];$/;"	m	struct:utaf_block_t
sema	external/splinterdb/tests/functional/cache_test.c	/^   platform_semaphore *sema;$/;"	m	struct:__anon53	file:
semiseq_freq	external/splinterdb/tests/functional/btree_test.c	/^   uint64                  semiseq_freq;$/;"	m	struct:test_btree_config	file:
semiseq_freq	external/splinterdb/tests/functional/splinter_test.h	/^   uint64        semiseq_freq; \/\/ random key every this many keys$/;"	m	struct:test_config
semiseq_perf	external/splinterdb/tests/functional/splinter_test.h	/^   semiseq_perf,$/;"	e	enum:test_type
seq	external/splinterdb/src/merge.h	/^   int       seq;$/;"	m	struct:ordered_iterator
seq	external/splinterdb/tests/functional/random.h	/^   uint64 seq;$/;"	m	struct:random_state
seq_perf	external/splinterdb/tests/functional/splinter_test.h	/^   seq_perf,$/;"	e	enum:test_type
set_curr_ordered_iterator	external/splinterdb/src/merge.c	/^set_curr_ordered_iterator(const data_config *cfg, ordered_iterator *itor)$/;"	f	file:
set_deallocate	other_filters/taf/src/set.c	/^void set_deallocate(Setnode* set, int set_size) {$/;"	f
set_deallocate	src/taf.cc	/^void set_deallocate(Setnode* set, int set_size) {$/;"	f
set_delete	other_filters/acf/src/cuckoofilter.h	/^int set_delete(set_node *set, int set_len, uint64_t key) {$/;"	f
set_delete	other_filters/acfsim/src/cuckoofilter.h	/^int set_delete(set_node *set, int set_len, uint64_t key) {$/;"	f
set_delete	other_filters/cf/example/test_micro_throughput.cc	/^int set_delete(set_node *set, int set_len, uint64_t key) {$/;"	f
set_delete	other_filters/cqf/src/test_micro_super.c	/^int set_delete(set_node *set, int set_len, uint64_t key) {$/;"	f
set_delete	other_filters/cqf/src/test_micro_throughput.c	/^int set_delete(set_node *set, int set_len, uint64_t key) {$/;"	f
set_delete	other_filters/cqf/src/test_parallel.c	/^int set_delete(set_node *set, int set_len, uint64_t key) {$/;"	f
set_delete	src/test_lltable_throughput.c	/^int set_delete(set_node *set, int set_len, uint64_t key) {$/;"	f
set_delete	src/test_micro_throughput.c	/^int set_delete(set_node *set, int set_len, uint64_t key) {$/;"	f
set_delete	src/test_micro_write.c	/^int set_delete(set_node *set, int set_len, uint64_t key) {$/;"	f
set_ext_code	other_filters/taf/src/exaf.c	/^static void set_ext_code(ExAF* filter, size_t block_i, uint64_t code) {$/;"	f	file:
set_get	src/test_ext_inc_throughput.cc	/^set_node *set_get(set_node *set, int set_len, set_node *node) {$/;"	f
set_get	src/test_ext_throughput.cc	/^set_node *set_get(set_node *set, int set_len, set_node *node) {$/;"	f
set_insert	other_filters/acf/example/test.cc	/^int set_insert(set_node *set, int set_len, uint64_t key) {$/;"	f
set_insert	other_filters/acf/example/test_fill_varied_throughput.cc	/^int set_insert(set_node *set, int set_len, uint64_t key) {$/;"	f
set_insert	other_filters/acf/example/test_fp.cc	/^int set_insert(set_node *set, int set_len, uint64_t key) {$/;"	f
set_insert	other_filters/acf/example/test_micro.cc	/^int set_insert(set_node *set, int set_len, uint64_t key) {$/;"	f
set_insert	other_filters/acf/src/cuckoofilter.h	/^int set_insert(set_node *set, int set_len, uint64_t key, uint64_t value) {$/;"	f
set_insert	other_filters/acfsim/example/test.cc	/^int set_insert(set_node *set, int set_len, uint64_t key) {$/;"	f
set_insert	other_filters/acfsim/example/test_fill_varied_throughput.cc	/^int set_insert(set_node *set, int set_len, uint64_t key) {$/;"	f
set_insert	other_filters/acfsim/example/test_fp.cc	/^int set_insert(set_node *set, int set_len, uint64_t key) {$/;"	f
set_insert	other_filters/acfsim/example/test_micro.cc	/^int set_insert(set_node *set, int set_len, uint64_t key) {$/;"	f
set_insert	other_filters/acfsim/src/cuckoofilter.h	/^int set_insert(set_node *set, int set_len, uint64_t key, uint64_t value) {$/;"	f
set_insert	other_filters/cf/example/test.cc	/^int set_insert(set_node *set, int set_len, uint64_t key) {$/;"	f
set_insert	other_filters/cf/example/test_micro_throughput.cc	/^int set_insert(set_node *set, int set_len, uint64_t key, uint64_t value) {$/;"	f
set_insert	other_filters/cqf/src/test_micro_super.c	/^int set_insert(set_node *set, int set_len, uint64_t key, uint64_t value) {$/;"	f
set_insert	other_filters/cqf/src/test_micro_throughput.c	/^int set_insert(set_node *set, int set_len, uint64_t key, uint64_t value) {$/;"	f
set_insert	other_filters/cqf/src/test_parallel.c	/^int set_insert(set_node *set, int set_len, uint64_t key, uint64_t value) {$/;"	f
set_insert	other_filters/taf/src/set.c	/^int set_insert(char* word, int length, int source, Setnode* set, int set_size) {$/;"	f
set_insert	src/taf.cc	/^int set_insert(char* word, int length, int source, Setnode* set, int set_size) {$/;"	f
set_insert	src/test_ext_inc_throughput.cc	/^int set_insert(set_node *set, int set_len, set_node *new_node) {$/;"	f
set_insert	src/test_ext_throughput.cc	/^int set_insert(set_node *set, int set_len, set_node *new_node) {$/;"	f
set_insert	src/test_lltable_throughput.c	/^int set_insert(set_node *set, int set_len, uint64_t key, uint64_t value) {$/;"	f
set_insert	src/test_micro_throughput.c	/^int set_insert(set_node *set, int set_len, uint64_t key, uint64_t value) {$/;"	f
set_insert	src/test_micro_write.c	/^int set_insert(set_node *set, int set_len, uint64_t key, uint64_t value) {$/;"	f
set_insert	src/test_progress.c	/^int set_insert(set_node *set, int set_len, uint64_t key) {$/;"	f
set_log_streams_for_tests	external/splinterdb/tests/unit/unit_tests_common.c	/^set_log_streams_for_tests(msg_level exp_msg_level)$/;"	f
set_lookup	other_filters/taf/src/set.c	/^int set_lookup(char* word, int length, Setnode* set, int set_size) {$/;"	f
set_lookup	src/taf.cc	/^int set_lookup(char* word, int length, Setnode* set, int set_size) {$/;"	f
set_node	other_filters/acf/example/test.cc	/^} typedef set_node;$/;"	t	file:
set_node	other_filters/acf/example/test_fill_varied_throughput.cc	/^} typedef set_node;$/;"	t	file:
set_node	other_filters/acf/example/test_fp.cc	/^} typedef set_node;$/;"	t	file:
set_node	other_filters/acf/example/test_micro.cc	/^} typedef set_node;$/;"	t	file:
set_node	other_filters/acf/src/cuckoofilter.h	/^} typedef set_node;$/;"	t
set_node	other_filters/acfsim/example/test.cc	/^} typedef set_node;$/;"	t	file:
set_node	other_filters/acfsim/example/test_fill_varied_throughput.cc	/^} typedef set_node;$/;"	t	file:
set_node	other_filters/acfsim/example/test_fp.cc	/^} typedef set_node;$/;"	t	file:
set_node	other_filters/acfsim/example/test_micro.cc	/^} typedef set_node;$/;"	t	file:
set_node	other_filters/acfsim/src/cuckoofilter.h	/^} typedef set_node;$/;"	t
set_node	other_filters/cf/example/test.cc	/^} typedef set_node;$/;"	t	file:
set_node	other_filters/cf/example/test_micro_throughput.cc	/^} typedef set_node;$/;"	t	file:
set_node	other_filters/cqf/src/test_micro_super.c	/^} typedef set_node;$/;"	t	file:
set_node	other_filters/cqf/src/test_micro_throughput.c	/^} typedef set_node;$/;"	t	file:
set_node	other_filters/cqf/src/test_parallel.c	/^} typedef set_node;$/;"	t	file:
set_node	src/test_ext_inc_throughput.cc	/^} typedef set_node;$/;"	t	file:
set_node	src/test_ext_throughput.cc	/^} typedef set_node;$/;"	t	file:
set_node	src/test_lltable_throughput.c	/^} typedef set_node;$/;"	t	file:
set_node	src/test_micro_throughput.c	/^} typedef set_node;$/;"	t	file:
set_node	src/test_micro_write.c	/^} typedef set_node;$/;"	t	file:
set_node	src/test_progress.c	/^} typedef set_node;$/;"	t	file:
set_occupied	other_filters/taf/src/macros.h	47;"	d
set_occupied	src/taf.cc	253;"	d	file:
set_occupied_to	other_filters/taf/src/macros.h	43;"	d
set_occupied_to	src/taf.cc	249;"	d	file:
set_query	other_filters/acf/example/test.cc	/^int set_query(set_node *set, int set_len, uint64_t key) {$/;"	f
set_query	other_filters/acf/example/test_fill_varied_throughput.cc	/^int set_query(set_node *set, int set_len, uint64_t key) {$/;"	f
set_query	other_filters/acf/example/test_fp.cc	/^int set_query(set_node *set, int set_len, uint64_t key) {$/;"	f
set_query	other_filters/acf/example/test_micro.cc	/^int set_query(set_node *set, int set_len, uint64_t key) {$/;"	f
set_query	other_filters/acf/src/cuckoofilter.h	/^int set_query(set_node *set, int set_len, uint64_t key, uint64_t *value) {$/;"	f
set_query	other_filters/acfsim/example/test.cc	/^int set_query(set_node *set, int set_len, uint64_t key) {$/;"	f
set_query	other_filters/acfsim/example/test_fill_varied_throughput.cc	/^int set_query(set_node *set, int set_len, uint64_t key) {$/;"	f
set_query	other_filters/acfsim/example/test_fp.cc	/^int set_query(set_node *set, int set_len, uint64_t key) {$/;"	f
set_query	other_filters/acfsim/example/test_micro.cc	/^int set_query(set_node *set, int set_len, uint64_t key) {$/;"	f
set_query	other_filters/acfsim/src/cuckoofilter.h	/^int set_query(set_node *set, int set_len, uint64_t key, uint64_t *value) {$/;"	f
set_query	other_filters/cf/example/test.cc	/^int set_query(set_node *set, int set_len, uint64_t key) {$/;"	f
set_query	other_filters/cf/example/test_micro_throughput.cc	/^int set_query(set_node *set, int set_len, uint64_t key, uint64_t *value) {$/;"	f
set_query	other_filters/cqf/src/test_micro_super.c	/^int set_query(set_node *set, int set_len, uint64_t key, uint64_t *value) {$/;"	f
set_query	other_filters/cqf/src/test_micro_throughput.c	/^int set_query(set_node *set, int set_len, uint64_t key, uint64_t *value) {$/;"	f
set_query	other_filters/cqf/src/test_parallel.c	/^int set_query(set_node *set, int set_len, uint64_t key, uint64_t *value) {$/;"	f
set_query	src/test_ext_inc_throughput.cc	/^int set_query(set_node *set, int set_len, uint64_t key) {$/;"	f
set_query	src/test_ext_throughput.cc	/^int set_query(set_node *set, int set_len, uint64_t key) {$/;"	f
set_query	src/test_lltable_throughput.c	/^int set_query(set_node *set, int set_len, uint64_t key, uint64_t *value) {$/;"	f
set_query	src/test_micro_throughput.c	/^int set_query(set_node *set, int set_len, uint64_t key, uint64_t *value) {$/;"	f
set_query	src/test_micro_write.c	/^int set_query(set_node *set, int set_len, uint64_t key, uint64_t *value) {$/;"	f
set_query	src/test_progress.c	/^int set_query(set_node *set, int set_len, uint64_t key) {$/;"	f
set_runend	other_filters/taf/src/macros.h	57;"	d
set_runend	src/taf.cc	263;"	d	file:
set_runend_to	other_filters/taf/src/macros.h	53;"	d
set_runend_to	src/taf.cc	259;"	d	file:
set_sel_code	other_filters/taf/src/splinter_taf.c	/^static void set_sel_code(TAF* filter, size_t block_i, uint64_t code) {$/;"	f	file:
set_sel_code	other_filters/taf/src/taf.c	/^static void set_sel_code(TAF* filter, size_t block_i, uint64_t code) {$/;"	f	file:
set_sel_code	other_filters/taf/src/taf.cc	/^static void set_sel_code(TAF* filter, size_t block_i, uint64_t code) {$/;"	f	file:
set_sel_code	other_filters/taf/src/taf_sim.c	/^static void set_sel_code(TAF* filter, size_t block_i, uint64_t code) {$/;"	f	file:
set_sel_code	src/taf.cc	/^static void set_sel_code(TAF* filter, size_t block_i, uint64_t code) {$/;"	f	file:
set_slot	other_filters/cqf/src/gqf.c	/^static inline void set_slot(const QF *qf, uint64_t index, uint64_t value)$/;"	f	file:
set_slot	src/gqf.c	/^static inline void set_slot(const QF *qf, uint64_t index, uint64_t value)$/;"	f	file:
set_slot	src/gqf_backup.c	/^static inline void set_slot(const QF *qf, uint64_t index, uint64_t value)$/;"	f	file:
setnode_t	other_filters/taf/src/set.h	/^typedef struct setnode_t {$/;"	s
setnode_t	src/taf.cc	/^typedef struct setnode_t {$/;"	s	file:
setup	external/splinterdb/tests/unit/ctest.h	/^   ctest_setup_func    *setup;$/;"	m	struct:ctest
setup_cfg_for_test	external/splinterdb/tests/unit/splinter_shmem_test.c	/^setup_cfg_for_test(splinterdb_config *out_cfg, data_config *default_data_cfg)$/;"	f	file:
setup_ordered_iterators	external/splinterdb/src/merge.c	/^setup_ordered_iterators(merge_iterator *merge_itor)$/;"	f	file:
shadow	external/splinterdb/tests/unit/splinter_test.c	/^   trunk_shadow *shadow;$/;"	m	struct:shadow_check_tuple_arg	file:
shadow_check_tuple_arg	external/splinterdb/tests/unit/splinter_test.c	/^typedef struct shadow_check_tuple_arg {$/;"	s	file:
shadow_check_tuple_arg	external/splinterdb/tests/unit/splinter_test.c	/^} shadow_check_tuple_arg;$/;"	t	typeref:struct:shadow_check_tuple_arg	file:
shadow_check_tuple_func	external/splinterdb/tests/unit/splinter_test.c	/^shadow_check_tuple_func(key returned_key, message value, void *varg)$/;"	f	file:
shadow_entry	external/splinterdb/tests/unit/splinter_test.c	/^typedef struct shadow_entry {$/;"	s	file:
shadow_entry	external/splinterdb/tests/unit/splinter_test.c	/^} shadow_entry;$/;"	t	typeref:struct:shadow_entry	file:
shadow_entry_key	external/splinterdb/tests/unit/splinter_test.c	/^shadow_entry_key(const shadow_entry *entry, char *data)$/;"	f	file:
shadow_entry_value	external/splinterdb/tests/unit/splinter_test.c	/^shadow_entry_value(const shadow_entry *entry, char *data)$/;"	f	file:
shard_log	external/splinterdb/src/shard_log.h	/^typedef struct shard_log {$/;"	s
shard_log	external/splinterdb/src/shard_log.h	/^} shard_log;$/;"	t	typeref:struct:shard_log
shard_log_addr	external/splinterdb/src/shard_log.c	/^shard_log_addr(log_handle *logh)$/;"	f
shard_log_alloc	external/splinterdb/src/shard_log.c	/^shard_log_alloc(shard_log *log, uint64 *next_extent)$/;"	f
shard_log_checksum	external/splinterdb/src/shard_log.c	/^shard_log_checksum(shard_log_config *cfg, page_handle *page)$/;"	f	file:
shard_log_compare	external/splinterdb/src/shard_log.c	/^shard_log_compare(const void *p1, const void *p2, void *unused)$/;"	f
shard_log_config	external/splinterdb/src/shard_log.h	/^typedef struct shard_log_config {$/;"	s
shard_log_config	external/splinterdb/src/shard_log.h	/^} shard_log_config;$/;"	t	typeref:struct:shard_log_config
shard_log_config_init	external/splinterdb/src/shard_log.c	/^shard_log_config_init(shard_log_config *log_cfg,$/;"	f
shard_log_get_thread_data	external/splinterdb/src/shard_log.c	/^shard_log_get_thread_data(shard_log *log, threadid thr_id)$/;"	f	file:
shard_log_hdr	external/splinterdb/src/shard_log.h	/^typedef struct ONDISK shard_log_hdr {$/;"	s
shard_log_hdr	external/splinterdb/src/shard_log.h	/^} shard_log_hdr;$/;"	t	typeref:struct:shard_log_hdr
shard_log_init	external/splinterdb/src/shard_log.c	/^shard_log_init(shard_log *log, cache *cc, shard_log_config *cfg)$/;"	f
shard_log_iterator	external/splinterdb/src/shard_log.h	/^typedef struct shard_log_iterator {$/;"	s
shard_log_iterator	external/splinterdb/src/shard_log.h	/^} shard_log_iterator;$/;"	t	typeref:struct:shard_log_iterator
shard_log_iterator_can_next	external/splinterdb/src/shard_log.c	/^shard_log_iterator_can_next(iterator *itorh)$/;"	f
shard_log_iterator_can_prev	external/splinterdb/src/shard_log.c	/^shard_log_iterator_can_prev(iterator *itorh)$/;"	f
shard_log_iterator_curr	external/splinterdb/src/shard_log.c	/^shard_log_iterator_curr(iterator *itorh, key *curr_key, message *msg)$/;"	f
shard_log_iterator_deinit	external/splinterdb/src/shard_log.c	/^shard_log_iterator_deinit(platform_heap_id hid, shard_log_iterator *itor)$/;"	f
shard_log_iterator_init	external/splinterdb/src/shard_log.c	/^shard_log_iterator_init(cache              *cc,$/;"	f
shard_log_iterator_next	external/splinterdb/src/shard_log.c	/^shard_log_iterator_next(iterator *itorh)$/;"	f
shard_log_iterator_ops	external/splinterdb/src/shard_log.c	/^const static iterator_ops shard_log_iterator_ops = {$/;"	v	file:
shard_log_magic	external/splinterdb/src/shard_log.c	/^shard_log_magic(log_handle *logh)$/;"	f
shard_log_magic_idx	external/splinterdb/src/shard_log.c	/^static uint64 shard_log_magic_idx = 0;$/;"	v	file:
shard_log_meta_addr	external/splinterdb/src/shard_log.c	/^shard_log_meta_addr(log_handle *logh)$/;"	f
shard_log_next_extent_addr	external/splinterdb/src/shard_log.c	/^shard_log_next_extent_addr(shard_log_config *cfg, page_handle *page)$/;"	f
shard_log_ops	external/splinterdb/src/shard_log.c	/^static log_ops shard_log_ops = {$/;"	v	file:
shard_log_page_size	external/splinterdb/src/shard_log.c	/^shard_log_page_size(shard_log_config *cfg)$/;"	f	file:
shard_log_pages_per_extent	external/splinterdb/src/shard_log.c	/^shard_log_pages_per_extent(shard_log_config *cfg)$/;"	f	file:
shard_log_print	external/splinterdb/src/shard_log.c	/^shard_log_print(shard_log *log)$/;"	f
shard_log_thread_data	external/splinterdb/src/shard_log.h	/^typedef struct shard_log_thread_data {$/;"	s
shard_log_thread_data	external/splinterdb/src/shard_log.h	/^} PLATFORM_CACHELINE_ALIGNED shard_log_thread_data;$/;"	t	typeref:struct:shard_log_thread_data
shard_log_valid	external/splinterdb/src/shard_log.c	/^shard_log_valid(shard_log_config *cfg, page_handle *page, uint64 magic)$/;"	f
shard_log_write	external/splinterdb/src/shard_log.c	/^shard_log_write(log_handle *logh, key tuple_key, message msg, uint64 generation)$/;"	f
shard_log_zap	external/splinterdb/src/shard_log.c	/^shard_log_zap(shard_log *log)$/;"	f
shift_block_exts	other_filters/taf/src/exaf.c	/^static void shift_block_exts(ExAF *filter, int block_i, Ext exts[64], const Ext prev_exts[64], int b) {$/;"	f	file:
shift_block_sels	other_filters/taf/src/splinter_taf.c	/^static void shift_block_sels(TAF *filter, int block_i, int sels[64], const int prev_sels[64], int b) {$/;"	f	file:
shift_block_sels	other_filters/taf/src/taf.c	/^static void shift_block_sels(TAF *filter, int block_i, int sels[64], const int prev_sels[64], int b) {$/;"	f	file:
shift_block_sels	other_filters/taf/src/taf.cc	/^static void shift_block_sels(TAF *filter, int block_i, int sels[64], const int prev_sels[64], int b) {$/;"	f	file:
shift_block_sels	other_filters/taf/src/taf_sim.c	/^static void shift_block_sels(TAF *filter, int block_i, int sels[64], const int prev_sels[64], int b) {$/;"	f	file:
shift_block_sels	src/taf.cc	/^static void shift_block_sels(TAF *filter, int block_i, int sels[64], const int prev_sels[64], int b) {$/;"	f	file:
shift_exts	other_filters/taf/src/exaf.c	/^static void shift_exts(ExAF* filter, int a, int b) {$/;"	f	file:
shift_into_b	other_filters/cqf/src/gqf.c	/^static inline uint64_t shift_into_b(const uint64_t a, const uint64_t b,$/;"	f	file:
shift_into_b	src/gqf.c	/^static inline uint64_t shift_into_b(const uint64_t a, const uint64_t b, const int bstart, const int bend, const int amount)$/;"	f	file:
shift_into_b	src/gqf_backup.c	/^static inline uint64_t shift_into_b(const uint64_t a, const uint64_t b, const int bstart, const int bend, const int amount)$/;"	f	file:
shift_remainders	other_filters/cqf/src/gqf.c	/^static inline void shift_remainders(QF *qf, const uint64_t start_index, const$/;"	f	file:
shift_remainders	other_filters/cqf/src/gqf.c	/^static inline void shift_remainders(QF *qf, uint64_t start_index, uint64_t$/;"	f	file:
shift_remainders	src/gqf.c	/^static inline void shift_remainders(QF *qf, const uint64_t start_index, const uint64_t empty_index)$/;"	f	file:
shift_remainders	src/gqf.c	/^static inline void shift_remainders(QF *qf, uint64_t start_index, uint64_t empty_index)$/;"	f	file:
shift_remainders	src/gqf_backup.c	/^static inline void shift_remainders(QF *qf, const uint64_t start_index, const uint64_t empty_index)$/;"	f	file:
shift_remainders	src/gqf_backup.c	/^static inline void shift_remainders(QF *qf, uint64_t start_index, uint64_t empty_index)$/;"	f	file:
shift_remote_elts	other_filters/taf/src/exaf.c	/^static void shift_remote_elts(ExAF* filter, int a, int b) {$/;"	f	file:
shift_remote_elts	other_filters/taf/src/splinter_taf.c	/^static void shift_remote_elts(TAF* filter, int a, int b) {$/;"	f	file:
shift_remote_elts	other_filters/taf/src/taf.c	/^static void shift_remote_elts(TAF* filter, int a, int b) {$/;"	f	file:
shift_remote_elts	other_filters/taf/src/taf.cc	/^static void shift_remote_elts(TAF* filter, int a, int b) {$/;"	f	file:
shift_remote_elts	other_filters/taf/src/taf_sim.c	/^static void shift_remote_elts(TAF* filter, int a, int b) {$/;"	f	file:
shift_remote_elts	other_filters/taf/src/utaf.c	/^static void shift_remote_elts(FullTAF* filter, int a, int b) {$/;"	f	file:
shift_remote_elts	src/taf.cc	/^static void shift_remote_elts(TAF* filter, int a, int b) {$/;"	f	file:
shift_rems_and_runends	other_filters/taf/src/exaf.c	/^static void shift_rems_and_runends(ExAF* filter, int a, int b) {$/;"	f	file:
shift_rems_and_runends	other_filters/taf/src/rsqf.c	/^static void shift_rems_and_runends(RSQF* filter, int a, int b) {$/;"	f	file:
shift_rems_and_runends	other_filters/taf/src/splinter_taf.c	/^static void shift_rems_and_runends(TAF* filter, int a, int b) {$/;"	f	file:
shift_rems_and_runends	other_filters/taf/src/taf.c	/^static void shift_rems_and_runends(TAF* filter, int a, int b) {$/;"	f	file:
shift_rems_and_runends	other_filters/taf/src/taf.cc	/^static void shift_rems_and_runends(TAF* filter, int a, int b) {$/;"	f	file:
shift_rems_and_runends	other_filters/taf/src/taf_sim.c	/^static void shift_rems_and_runends(TAF* filter, int a, int b) {$/;"	f	file:
shift_rems_and_runends	other_filters/taf/src/utaf.c	/^static void shift_rems_and_runends(FullTAF* filter, int a, int b) {$/;"	f	file:
shift_rems_and_runends	src/taf.cc	/^static void shift_rems_and_runends(TAF* filter, int a, int b) {$/;"	f	file:
shift_runends	other_filters/cqf/src/gqf.c	/^static inline void shift_runends(QF *qf, int64_t first, uint64_t last,$/;"	f	file:
shift_runends	src/gqf.c	/^static inline void shift_runends(QF *qf, int64_t first, uint64_t last, uint64_t distance)$/;"	f	file:
shift_runends	src/gqf_backup.c	/^static inline void shift_runends(QF *qf, int64_t first, uint64_t last, uint64_t distance)$/;"	f	file:
shift_sels	other_filters/taf/src/splinter_taf.c	/^static void shift_sels(TAF* filter, int a, int b) {$/;"	f	file:
shift_sels	other_filters/taf/src/taf.c	/^static void shift_sels(TAF* filter, int a, int b) {$/;"	f	file:
shift_sels	other_filters/taf/src/taf.cc	/^static void shift_sels(TAF* filter, int a, int b) {$/;"	f	file:
shift_sels	other_filters/taf/src/taf_sim.c	/^static void shift_sels(TAF* filter, int a, int b) {$/;"	f	file:
shift_sels	other_filters/taf/src/utaf.c	/^static void shift_sels(FullTAF* filter, int a, int b) {$/;"	f	file:
shift_sels	src/taf.cc	/^static void shift_sels(TAF* filter, int a, int b) {$/;"	f	file:
shift_slots	other_filters/cqf/src/gqf.c	/^static inline void shift_slots(QF *qf, int64_t first, uint64_t last, uint64_t$/;"	f	file:
shift_slots	src/gqf.c	/^static inline void shift_slots(QF *qf, int64_t first, uint64_t last, uint64_t distance)$/;"	f	file:
shift_slots	src/gqf_backup.c	/^static inline void shift_slots(QF *qf, int64_t first, uint64_t last, uint64_t distance)$/;"	f	file:
shlex	external/splinterdb/scripts/config_reader.py	/^import shlex$/;"	i
shlex	external/splinterdb/scripts/run_ycsb.py	/^import shlex$/;"	i
shm_end	external/splinterdb/src/platform_linux/shmem.c	/^   void *shm_end;        \/\/ Points to end address; one past end of sh segment$/;"	m	struct:shmem_heap	file:
shm_id	external/splinterdb/src/platform_linux/shmem.c	/^   int                 shm_id;    \/\/ Shared memory ID returned by shmget()$/;"	m	struct:shmem_heap	file:
shm_large_frag_hip	external/splinterdb/src/platform_linux/shmem.c	/^   void *shm_large_frag_hip; \/\/ Highest addr of large-fragments tracked$/;"	m	struct:shmem_heap	file:
shm_large_frag_info	external/splinterdb/src/platform_linux/shmem.c	/^typedef struct shm_large_frag_info {$/;"	s	file:
shm_large_frag_info	external/splinterdb/src/platform_linux/shmem.c	/^} shm_large_frag_info;$/;"	t	typeref:struct:shm_large_frag_info	file:
shm_large_frags	external/splinterdb/src/platform_linux/shmem.c	/^   shm_large_frag_info shm_large_frags[SHM_NUM_LARGE_FRAGS];$/;"	m	struct:shmem_heap	file:
shm_last_alloc	external/splinterdb/src/platform_linux/shmem.c	/^   void *shm_last_alloc; \/\/ Points to address most-recently allocated$/;"	m	struct:shmem_heap	file:
shm_lock_mem	external/splinterdb/src/platform_linux/shmem.c	/^shm_lock_mem(shmem_heap *shm)$/;"	f	file:
shm_lock_mem_frags	external/splinterdb/src/platform_linux/shmem.c	/^shm_lock_mem_frags(shmem_heap *shm)$/;"	f	file:
shm_magic	external/splinterdb/src/platform_linux/shmem.c	/^   uint64              shm_magic; \/\/ Magic identifier for shared memory segment$/;"	m	struct:shmem_heap	file:
shm_mem_frags_lock	external/splinterdb/src/platform_linux/shmem.c	/^   platform_spinlock shm_mem_frags_lock;$/;"	m	struct:shmem_heap	file:
shm_mem_lock	external/splinterdb/src/platform_linux/shmem.c	/^   platform_spinlock shm_mem_lock; \/\/ To sync alloc \/ free$/;"	m	struct:shmem_heap	file:
shm_memfrag	external/splinterdb/tests/unit/splinter_shmem_test.c	/^typedef struct shm_memfrag {$/;"	s	file:
shm_memfrag	external/splinterdb/tests/unit/splinter_shmem_test.c	/^} shm_memfrag;$/;"	t	typeref:struct:shm_memfrag	file:
shm_next	external/splinterdb/src/platform_linux/shmem.c	/^   void *shm_next;       \/\/ Points to next 'free' address to allocate from.$/;"	m	struct:shmem_heap	file:
shm_splinterdb_handle	external/splinterdb/src/platform_linux/shmem.c	/^   void *shm_splinterdb_handle;$/;"	m	struct:shmem_heap	file:
shm_start	external/splinterdb/src/platform_linux/shmem.c	/^   void *shm_start;      \/\/ Points to start address of shared segment.$/;"	m	struct:shmem_heap	file:
shm_unlock_mem	external/splinterdb/src/platform_linux/shmem.c	/^shm_unlock_mem(shmem_heap *shm)$/;"	f	file:
shm_unlock_mem_frags	external/splinterdb/src/platform_linux/shmem.c	/^shm_unlock_mem_frags(shmem_heap *shm)$/;"	f	file:
shmem_heap	external/splinterdb/src/platform_linux/platform.h	/^typedef struct shmem_heap shmem_heap;$/;"	t	typeref:struct:shmem_heap
shmem_heap	external/splinterdb/src/platform_linux/shmem.c	/^typedef struct shmem_heap {$/;"	s	file:
shmem_heap	external/splinterdb/src/platform_linux/shmem.c	/^} PLATFORM_CACHELINE_ALIGNED shmem_heap;$/;"	t	typeref:struct:shmem_heap	file:
shmem_size	external/splinterdb/include/splinterdb/splinterdb.h	/^   uint64 shmem_size;$/;"	m	struct:splinterdb_config
shmem_size	external/splinterdb/tests/config.h	/^   uint64 shmem_size;$/;"	m	struct:master_config
shmid	external/splinterdb/src/platform_linux/shmem.c	/^   int    shmid;$/;"	m	struct:shminfo_usage_stats	file:
shminfo_usage_stats	external/splinterdb/src/platform_linux/shmem.c	/^typedef struct shminfo_usage_stats {$/;"	s	file:
shminfo_usage_stats	external/splinterdb/src/platform_linux/shmem.c	/^} shminfo_usage_stats;$/;"	t	typeref:struct:shminfo_usage_stats	file:
shortest_diff_ext	other_filters/taf/src/exaf.c	/^static int shortest_diff_ext(ExAF* filter, uint64_t member_hash, uint64_t non_member_hash, Ext* out) {$/;"	f	file:
should_build	external/splinterdb/src/trunk.c	/^   bool32         should_build[TRUNK_MAX_PIVOTS];$/;"	m	struct:trunk_filter_scratch	file:
sighandler	external/splinterdb/tests/unit/main.c	/^sighandler(int signum)$/;"	f	file:
single_leaf_max_tuples	external/splinterdb/src/trunk.h	/^   uint64 single_leaf_max_tuples;$/;"	m	struct:trunk_stats
single_leaf_splits	external/splinterdb/src/trunk.h	/^   uint64 single_leaf_splits;$/;"	m	struct:trunk_stats
single_leaf_tuples	external/splinterdb/src/trunk.h	/^   uint64 single_leaf_tuples;$/;"	m	struct:trunk_stats
size	external/splinterdb/src/platform_linux/platform_types.h	/^   size_t size;$/;"	m	struct:__anon28
size	include/ll_table.h	/^	uint64_t size;$/;"	m	struct:ll_table
size_fmtstr	external/splinterdb/src/util.h	412;"	d
size_str	external/splinterdb/src/util.h	401;"	d
size_to_fmtstr	external/splinterdb/src/util.c	/^size_to_fmtstr(char *outbuf, size_t outbuflen, const char *fmtstr, size_t size)$/;"	f
size_to_str	external/splinterdb/src/util.c	/^size_to_str(char *outbuf, size_t outbuflen, size_t size)$/;"	f
sizeof_index_entry	external/splinterdb/src/btree_private.h	/^sizeof_index_entry(const index_entry *entry)$/;"	f
sizeof_keyed_meta_entry	external/splinterdb/src/mini_allocator.c	/^sizeof_keyed_meta_entry(const keyed_meta_entry *entry)$/;"	f	file:
sizeof_leaf_entry	external/splinterdb/src/btree_private.h	/^sizeof_leaf_entry(const leaf_entry *entry)$/;"	f
sizeof_log_entry	external/splinterdb/src/shard_log.c	/^sizeof_log_entry(log_entry *le)$/;"	f	file:
sizeof_ondisk_key_data	external/splinterdb/src/data_internal.h	/^sizeof_ondisk_key_data(const ondisk_key *odk)$/;"	f
skip	external/splinterdb/tests/unit/ctest.h	/^   int skip;$/;"	m	struct:ctest
skip_itor	external/splinterdb/src/trunk.c	/^   trunk_btree_skiperator skip_itor[TRUNK_RANGE_ITOR_MAX_BRANCHES];$/;"	m	struct:__anon41	file:
slice	external/splinterdb/include/splinterdb/public_util.h	/^typedef struct slice {$/;"	s
slice	external/splinterdb/include/splinterdb/public_util.h	/^} slice;$/;"	t	typeref:struct:slice
slice_copy_contents	external/splinterdb/src/util.h	/^slice_copy_contents(void *dst, const slice src)$/;"	f
slice_create	external/splinterdb/include/splinterdb/public_util.h	/^slice_create(uint64 len, const void *data)$/;"	f
slice_data	external/splinterdb/include/splinterdb/public_util.h	/^slice_data(const slice b)$/;"	f
slice_equals	external/splinterdb/src/util.h	/^slice_equals(const slice a, const slice b)$/;"	f
slice_is_null	external/splinterdb/include/splinterdb/public_util.h	/^slice_is_null(const slice b)$/;"	f
slice_length	external/splinterdb/include/splinterdb/public_util.h	/^slice_length(const slice b)$/;"	f
slice_lex_cmp	external/splinterdb/src/util.h	/^slice_lex_cmp(const slice a, const slice b)$/;"	f
slots	include/gqf_int.h	/^		uint16_t  slots[QF_SLOTS_PER_BLOCK];$/;"	m	struct:qfblock
slots	include/gqf_int.h	/^		uint32_t  slots[QF_SLOTS_PER_BLOCK];$/;"	m	struct:qfblock
slots	include/gqf_int.h	/^		uint64_t  slots[QF_SLOTS_PER_BLOCK];$/;"	m	struct:qfblock
slots	include/gqf_int.h	/^		uint8_t   slots[QF_SLOTS_PER_BLOCK * QF_BITS_PER_SLOT \/ 8];$/;"	m	struct:qfblock
slots	include/gqf_int.h	/^		uint8_t   slots[];$/;"	m	struct:qfblock
slots	include/gqf_int.h	/^		uint8_t  slots[QF_SLOTS_PER_BLOCK];$/;"	m	struct:qfblock
slots	other_filters/cqf/include/gqf_int.h	/^		uint16_t  slots[QF_SLOTS_PER_BLOCK];$/;"	m	struct:qfblock
slots	other_filters/cqf/include/gqf_int.h	/^		uint32_t  slots[QF_SLOTS_PER_BLOCK];$/;"	m	struct:qfblock
slots	other_filters/cqf/include/gqf_int.h	/^		uint64_t  slots[QF_SLOTS_PER_BLOCK];$/;"	m	struct:qfblock
slots	other_filters/cqf/include/gqf_int.h	/^		uint8_t   slots[QF_SLOTS_PER_BLOCK * QF_BITS_PER_SLOT \/ 8];$/;"	m	struct:qfblock
slots	other_filters/cqf/include/gqf_int.h	/^		uint8_t   slots[];$/;"	m	struct:qfblock
slots	other_filters/cqf/include/gqf_int.h	/^		uint8_t  slots[QF_SLOTS_PER_BLOCK];$/;"	m	struct:qfblock
snapshot	src/gqf.c	/^int snapshot(const QF *qf) {$/;"	f
snapshot	src/gqf_backup.c	/^int snapshot(const QF *qf) {$/;"	f
sorted	external/splinterdb/tests/unit/splinter_test.c	/^   bool32          sorted;$/;"	m	struct:trunk_shadow	file:
sources	other_filters/taf/src/set.h	/^  int sources;$/;"	m	struct:setnode_t
sources	src/taf.cc	/^  int sources;$/;"	m	struct:setnode_t	file:
space	other_filters/acf/benchmarks/conext-table3.cc	/^  double space;      \/\/ bits per item$/;"	m	struct:Metrics	file:
space	other_filters/cf/benchmarks/conext-table3.cc	/^  double space;      \/\/ bits per item$/;"	m	struct:Metrics	file:
space_rec_time_ns	external/splinterdb/src/trunk.h	/^   uint64 space_rec_time_ns[TRUNK_MAX_HEIGHT];$/;"	m	struct:trunk_stats
space_rec_tuples_reclaimed	external/splinterdb/src/trunk.h	/^   uint64 space_rec_tuples_reclaimed[TRUNK_MAX_HEIGHT];$/;"	m	struct:trunk_stats
space_recs	external/splinterdb/src/trunk.h	/^   uint64 space_recs[TRUNK_MAX_HEIGHT];$/;"	m	struct:trunk_stats
spec_message	external/splinterdb/src/btree.c	/^spec_message(const leaf_incorporate_spec *spec)$/;"	f	file:
speed	other_filters/acf/benchmarks/conext-table3.cc	/^  double speed;      \/\/ const. speed (million keys\/sec)$/;"	m	struct:Metrics	file:
speed	other_filters/cf/benchmarks/conext-table3.cc	/^  double speed;      \/\/ const. speed (million keys\/sec)$/;"	m	struct:Metrics	file:
spl	external/splinterdb/src/splinterdb.c	/^   trunk_handle      *spl;$/;"	m	struct:splinterdb	file:
spl	external/splinterdb/src/trunk.c	/^   trunk_handle         *spl;$/;"	m	struct:trunk_compact_bundle_req	file:
spl	external/splinterdb/src/trunk.h	/^   trunk_handle   *spl;$/;"	m	struct:trunk_range_iterator
spl	external/splinterdb/src/trunk.h	/^   trunk_handle *spl;$/;"	m	struct:trunk_memtable_args
spl	external/splinterdb/tests/functional/splinter_test.c	/^   trunk_handle     **spl;$/;"	m	struct:test_splinter_thread_params	file:
spl	external/splinterdb/tests/functional/ycsb_test.c	/^   trunk_handle *spl;$/;"	m	struct:ycsb_log_params	file:
spl	external/splinterdb/tests/unit/splinter_test.c	/^   trunk_handle *spl;$/;"	m	struct:shadow_check_tuple_arg	file:
splinter	external/splinterdb/tests/unit/splinter_shmem_test.c	/^   splinterdb     *splinter;$/;"	m	struct:__anon67	file:
splinter_do_inserts	external/splinterdb/tests/unit/splinter_test.c	/^splinter_do_inserts(void         *datap,$/;"	f	file:
splinter_io_apis_test	external/splinterdb/tests/functional/io_apis_test.c	/^splinter_io_apis_test(int argc, char *argv[])$/;"	f
splinter_perf_inserts	external/splinterdb/tests/functional/splinter_test.c	/^splinter_perf_inserts(platform_heap_id             hid,$/;"	f	file:
splinter_perf_lookups	external/splinterdb/tests/functional/splinter_test.c	/^splinter_perf_lookups(platform_heap_id             hid,$/;"	f	file:
splinter_perf_range_lookups	external/splinterdb/tests/functional/splinter_test.c	/^splinter_perf_range_lookups(platform_heap_id             hid,$/;"	f	file:
splinter_test	external/splinterdb/tests/functional/splinter_test.c	/^splinter_test(int argc, char *argv[])$/;"	f
splinter_test_parse_perf_args	external/splinterdb/tests/functional/splinter_test.c	/^splinter_test_parse_perf_args(char ***argv,$/;"	f	file:
splinterdb	external/splinterdb/include/splinterdb/splinterdb.h	/^typedef struct splinterdb splinterdb;$/;"	t	typeref:struct:splinterdb
splinterdb	external/splinterdb/src/splinterdb.c	/^typedef struct splinterdb {$/;"	s	file:
splinterdb	external/splinterdb/src/splinterdb.c	/^} splinterdb;$/;"	t	typeref:struct:splinterdb	file:
splinterdb_cache_flush	external/splinterdb/src/splinterdb.c	/^splinterdb_cache_flush(const splinterdb *kvs)$/;"	f
splinterdb_cfg	other_filters/taf/src/splinter_taf.h	/^  splinterdb_config splinterdb_cfg;$/;"	m	struct:taf_t
splinterdb_close	external/splinterdb/src/splinterdb.c	/^splinterdb_close(splinterdb **kvs_in) \/\/ IN$/;"	f
splinterdb_close_print_stats	external/splinterdb/src/splinterdb.c	/^splinterdb_close_print_stats(splinterdb *kvs)$/;"	f	file:
splinterdb_config	external/splinterdb/include/splinterdb/splinterdb.h	/^typedef struct splinterdb_config {$/;"	s
splinterdb_config	external/splinterdb/include/splinterdb/splinterdb.h	/^} splinterdb_config;$/;"	t	typeref:struct:splinterdb_config
splinterdb_config_set_defaults	external/splinterdb/src/splinterdb.c	/^splinterdb_config_set_defaults(splinterdb_config *cfg)$/;"	f	file:
splinterdb_create	external/splinterdb/src/splinterdb.c	/^splinterdb_create(const splinterdb_config *cfg, \/\/ IN$/;"	f
splinterdb_create_or_open	external/splinterdb/src/splinterdb.c	/^splinterdb_create_or_open(const splinterdb_config *kvs_cfg,      \/\/ IN$/;"	f
splinterdb_delete	external/splinterdb/src/splinterdb.c	/^splinterdb_delete(const splinterdb *kvsb, slice user_key)$/;"	f
splinterdb_deregister_thread	external/splinterdb/src/splinterdb.c	/^splinterdb_deregister_thread(splinterdb *kvs)$/;"	f
splinterdb_get_allocator_handle	external/splinterdb/src/splinterdb.c	/^splinterdb_get_allocator_handle(const splinterdb *kvs)$/;"	f
splinterdb_get_cache_handle	external/splinterdb/src/splinterdb.c	/^splinterdb_get_cache_handle(const splinterdb *kvs)$/;"	f
splinterdb_get_heap_id	external/splinterdb/src/splinterdb.c	/^splinterdb_get_heap_id(const splinterdb *kvs)$/;"	f
splinterdb_get_io_handle	external/splinterdb/src/splinterdb.c	/^splinterdb_get_io_handle(const splinterdb *kvs)$/;"	f
splinterdb_get_memtable_context_handle	external/splinterdb/src/splinterdb.c	/^splinterdb_get_memtable_context_handle(const splinterdb *kvs)$/;"	f
splinterdb_get_task_system_handle	external/splinterdb/src/splinterdb.c	/^splinterdb_get_task_system_handle(const splinterdb *kvs)$/;"	f
splinterdb_get_trunk_handle	external/splinterdb/src/splinterdb.c	/^splinterdb_get_trunk_handle(const splinterdb *kvs)$/;"	f
splinterdb_get_version	external/splinterdb/src/splinterdb.c	/^splinterdb_get_version()$/;"	f
splinterdb_init_config	external/splinterdb/src/splinterdb.c	/^splinterdb_init_config(const splinterdb_config *kvs_cfg, \/\/ IN$/;"	f	file:
splinterdb_insert	external/splinterdb/src/splinterdb.c	/^splinterdb_insert(const splinterdb *kvsb, slice user_key, slice value)$/;"	f
splinterdb_insert_message	external/splinterdb/src/splinterdb.c	/^splinterdb_insert_message(const splinterdb *kvs,      \/\/ IN$/;"	f	file:
splinterdb_iterator	external/splinterdb/include/splinterdb/splinterdb.h	/^typedef struct splinterdb_iterator splinterdb_iterator;$/;"	t	typeref:struct:splinterdb_iterator
splinterdb_iterator	external/splinterdb/src/splinterdb.c	/^struct splinterdb_iterator {$/;"	s	file:
splinterdb_iterator_can_next	external/splinterdb/src/splinterdb.c	/^splinterdb_iterator_can_next(splinterdb_iterator *kvi)$/;"	f
splinterdb_iterator_can_prev	external/splinterdb/src/splinterdb.c	/^splinterdb_iterator_can_prev(splinterdb_iterator *kvi)$/;"	f
splinterdb_iterator_deinit	external/splinterdb/src/splinterdb.c	/^splinterdb_iterator_deinit(splinterdb_iterator *iter)$/;"	f
splinterdb_iterator_get_current	external/splinterdb/src/splinterdb.c	/^splinterdb_iterator_get_current(splinterdb_iterator *iter,   \/\/ IN$/;"	f
splinterdb_iterator_init	external/splinterdb/src/splinterdb.c	/^splinterdb_iterator_init(const splinterdb     *kvs,           \/\/ IN$/;"	f
splinterdb_iterator_next	external/splinterdb/src/splinterdb.c	/^splinterdb_iterator_next(splinterdb_iterator *kvi)$/;"	f
splinterdb_iterator_prev	external/splinterdb/src/splinterdb.c	/^splinterdb_iterator_prev(splinterdb_iterator *kvi)$/;"	f
splinterdb_iterator_status	external/splinterdb/src/splinterdb.c	/^splinterdb_iterator_status(const splinterdb_iterator *iter)$/;"	f
splinterdb_iterator_valid	external/splinterdb/src/splinterdb.c	/^splinterdb_iterator_valid(splinterdb_iterator *kvi)$/;"	f
splinterdb_lookup	external/splinterdb/src/splinterdb.c	/^splinterdb_lookup(const splinterdb         *kvs, \/\/ IN$/;"	f
splinterdb_lookup_found	external/splinterdb/src/splinterdb.c	/^splinterdb_lookup_found(const splinterdb_lookup_result *result) \/\/ IN$/;"	f
splinterdb_lookup_result	external/splinterdb/include/splinterdb/splinterdb.h	/^} __attribute__((__aligned__(8))) splinterdb_lookup_result;$/;"	t	typeref:struct:__anon46
splinterdb_lookup_result_deinit	external/splinterdb/src/splinterdb.c	/^splinterdb_lookup_result_deinit(splinterdb_lookup_result *result) \/\/ IN$/;"	f
splinterdb_lookup_result_init	external/splinterdb/src/splinterdb.c	/^splinterdb_lookup_result_init(const splinterdb         *kvs,        \/\/ IN$/;"	f
splinterdb_lookup_result_value	external/splinterdb/src/splinterdb.c	/^splinterdb_lookup_result_value(const splinterdb_lookup_result *result, \/\/ IN$/;"	f
splinterdb_open	external/splinterdb/src/splinterdb.c	/^splinterdb_open(const splinterdb_config *cfg, \/\/ IN$/;"	f
splinterdb_register_thread	external/splinterdb/src/splinterdb.c	/^splinterdb_register_thread(splinterdb *kvs) \/\/ IN$/;"	f
splinterdb_stats_print_insertion	external/splinterdb/src/splinterdb.c	/^splinterdb_stats_print_insertion(const splinterdb *kvs)$/;"	f
splinterdb_stats_print_lookup	external/splinterdb/src/splinterdb.c	/^splinterdb_stats_print_lookup(const splinterdb *kvs)$/;"	f
splinterdb_stats_reset	external/splinterdb/src/splinterdb.c	/^splinterdb_stats_reset(splinterdb *kvs)$/;"	f
splinterdb_update	external/splinterdb/src/splinterdb.c	/^splinterdb_update(const splinterdb *kvsb, slice user_key, slice update)$/;"	f
splinterdb_validate_app_data_config	external/splinterdb/src/splinterdb.c	/^splinterdb_validate_app_data_config(const data_config *cfg)$/;"	f	file:
splinters	external/splinterdb/src/rc_allocator.h	/^   allocator_root_id splinters[RC_ALLOCATOR_MAX_ROOT_IDS];$/;"	m	struct:rc_allocator_meta_page
split_idx	external/splinterdb/src/btree_private.h	/^   uint64 split_idx; \/\/ keys with idx < split_idx go left$/;"	m	struct:leaf_splitting_plan
split_leaf	external/splinterdb/src/trunk.c	/^   split_leaf_scratch     split_leaf;$/;"	m	union:__anon43	file:
split_leaf_scratch	external/splinterdb/src/trunk.c	/^} split_leaf_scratch;$/;"	t	typeref:struct:__anon42	file:
sri	external/splinterdb/src/splinterdb.c	/^   trunk_range_iterator sri;$/;"	m	struct:splinterdb_iterator	file:
srq	external/splinterdb/src/srq.h	/^typedef struct srq {$/;"	s
srq	external/splinterdb/src/srq.h	/^} srq;$/;"	t	typeref:struct:srq
srq	external/splinterdb/src/trunk.h	/^   srq srq;$/;"	m	struct:trunk_handle
srq_data	external/splinterdb/src/srq.h	/^typedef struct srq_data {$/;"	s
srq_data	external/splinterdb/src/srq.h	/^} srq_data;$/;"	t	typeref:struct:srq_data
srq_data_found	external/splinterdb/src/srq.h	/^srq_data_found(srq_data *data)$/;"	f
srq_deinit	external/splinterdb/src/srq.h	/^srq_deinit(srq *queue)$/;"	f
srq_delete	external/splinterdb/src/srq.h	/^srq_delete(srq *queue, int64 idx)$/;"	f
srq_extract_max	external/splinterdb/src/srq.h	/^srq_extract_max(srq *queue)$/;"	f
srq_get_new_index	external/splinterdb/src/srq.h	/^srq_get_new_index(srq *queue)$/;"	f
srq_has_priority	external/splinterdb/src/srq.h	/^srq_has_priority(srq *queue, int64 lpos, int64 rpos)$/;"	f
srq_idx	external/splinterdb/src/trunk.c	/^   int64          srq_idx;     \/\/ index in the space rec queue$/;"	m	struct:trunk_pivot_data	file:
srq_init	external/splinterdb/src/srq.h	/^srq_init(srq               *queue,$/;"	f
srq_insert	external/splinterdb/src/srq.h	/^srq_insert(srq *queue, srq_data new_data)$/;"	f
srq_lchild	external/splinterdb/src/srq.h	/^srq_lchild(int64 pos)$/;"	f
srq_move_tail_to_pos	external/splinterdb/src/srq.h	/^srq_move_tail_to_pos(srq *queue, int64 pos)$/;"	f
srq_parent	external/splinterdb/src/srq.h	/^srq_parent(int64 pos)$/;"	f
srq_print	external/splinterdb/src/srq.h	/^srq_print(srq *queue)$/;"	f
srq_rchild	external/splinterdb/src/srq.h	/^srq_rchild(int64 pos)$/;"	f
srq_rebalance_down	external/splinterdb/src/srq.h	/^srq_rebalance_down(srq *queue, uint64 pos)$/;"	f
srq_rebalance_up	external/splinterdb/src/srq.h	/^srq_rebalance_up(srq *queue, int64 pos)$/;"	f
srq_swap	external/splinterdb/src/srq.h	/^srq_swap(srq *queue, int64 lpos, int64 rpos)$/;"	f
srq_update	external/splinterdb/src/srq.h	/^srq_update(srq *queue, int64 idx, uint32 new_priority)$/;"	f
srq_update_index	external/splinterdb/src/srq.h	/^srq_update_index(srq *queue, int64 pos)$/;"	f
srq_verify	external/splinterdb/src/srq.h	/^srq_verify(srq *queue)$/;"	f
ssname	external/splinterdb/tests/unit/ctest.h	/^   const char                *ssname; \/\/ test suite name$/;"	m	struct:ctest
stack	external/splinterdb/tests/functional/avlTree.h	/^   AvlTreeLinks *stack[0];$/;"	m	struct:__anon60
stamp_char	external/splinterdb/tests/functional/io_apis_test.c	/^   char                stamp_char;$/;"	m	struct:io_test_fn_args	file:
start	external/splinterdb/tests/functional/cache_test.c	/^         uint32 start;$/;"	m	struct:__anon47::__anon49::__anon52	file:
start	external/splinterdb/tests/unit/btree_stress_test.c	/^   int              start;$/;"	m	struct:insert_thread_params	file:
start	external/splinterdb/tests/unit/splinter_shmem_test.c	/^   shm_memfrag    *start;          \/\/ Start of chain of allocated memfrags$/;"	m	struct:__anon67	file:
start	other_filters/cqf/src/test_threadsafe.c	/^	uint64_t start;$/;"	m	struct:insert_args	file:
start	src/test_threadsafe.c	/^	uint64_t start;$/;"	m	struct:insert_args	file:
start_addr	external/splinterdb/tests/functional/io_apis_test.c	/^   uint64              start_addr;$/;"	m	struct:io_test_fn_args	file:
start_branch	external/splinterdb/src/trunk.c	/^   uint16                  start_branch;$/;"	m	struct:trunk_subbundle	file:
start_branch	external/splinterdb/src/trunk.c	/^   uint16 start_branch;        \/\/ first branch live (not used in leaves)$/;"	m	struct:trunk_pivot_data	file:
start_branch	external/splinterdb/src/trunk.c	/^   uint16 start_branch;      \/\/ first live branch$/;"	m	struct:trunk_hdr	file:
start_bundle	external/splinterdb/src/trunk.c	/^   uint16 start_bundle;        \/\/ first bundle live (not used in leaves)$/;"	m	struct:trunk_pivot_data	file:
start_bundle	external/splinterdb/src/trunk.c	/^   uint16 start_bundle;      \/\/ first live bundle$/;"	m	struct:trunk_hdr	file:
start_diskstats	external/splinterdb/scripts/run_ycsb.py	/^                    start_diskstats = get_io_stats(DEVICE)$/;"	v
start_filter	external/splinterdb/src/trunk.c	/^   uint16                  start_filter;$/;"	m	struct:trunk_subbundle	file:
start_frac_branch	external/splinterdb/src/trunk.c	/^   uint16 start_frac_branch; \/\/ first fractional branch (branch in a bundle)$/;"	m	struct:trunk_hdr	file:
start_index	include/gqf_int.h	/^		uint64_t start_index;$/;"	m	struct:__anon69
start_index	other_filters/cqf/include/gqf_int.h	/^		uint64_t start_index;$/;"	m	struct:__anon4
start_key	external/splinterdb/src/mini_allocator.c	/^   ondisk_key start_key;$/;"	m	struct:keyed_meta_entry	file:
start_key	external/splinterdb/src/trunk.c	/^   key_buffer            start_key;$/;"	m	struct:trunk_compact_bundle_req	file:
start_key	external/splinterdb/src/trunk.c	/^   key_buffer     start_key;$/;"	m	struct:trunk_filter_scratch	file:
start_line	external/splinterdb/tests/functional/ycsb_test.c	/^   uint64    start_line;$/;"	m	struct:parse_ycsb_log_req	file:
start_recording	src/gqf.c	/^void start_recording() {$/;"	f
start_recording	src/gqf_backup.c	/^void start_recording() {$/;"	f
start_sb_filter	external/splinterdb/src/trunk.c	/^   uint16 start_sb_filter;   \/\/ first subbundle filter$/;"	m	struct:trunk_hdr	file:
start_subbundle	external/splinterdb/src/trunk.c	/^   uint16 start_subbundle;   \/\/ first live subbundle$/;"	m	struct:trunk_hdr	file:
start_subbundle	external/splinterdb/src/trunk.c	/^   uint16 start_subbundle;$/;"	m	struct:trunk_bundle	file:
start_time	external/splinterdb/tests/functional/ycsb_test.c	/^   uint64 start_time;$/;"	m	struct:ycsb_op	file:
start_value	external/splinterdb/tests/unit/large_inserts_stress_test.c	/^   uint64         start_value;$/;"	m	struct:__anon62	file:
starts_with_bang_line	external/splinterdb/scripts/copywriter.sh	/^function starts_with_bang_line() {$/;"	f
state	external/splinterdb/src/btree.h	/^   btree_async_state state;      \/\/ Current state$/;"	m	struct:btree_async_ctxt
state	external/splinterdb/src/memtable.h	/^   volatile memtable_state state;$/;"	m	struct:memtable
state	external/splinterdb/src/mini_allocator.c	/^state(data_config *cfg, key start_key, key end_key, key entry_start_key)$/;"	f	file:
state	external/splinterdb/src/routing_filter.h	/^   routing_async_state state;      \/\/ Current state$/;"	m	struct:routing_async_ctxt
state	external/splinterdb/src/trunk.c	/^   trunk_subbundle_state_t state;$/;"	m	struct:trunk_subbundle	file:
state	external/splinterdb/src/trunk.h	/^   trunk_async_state state;      \/\/ state machine's current state$/;"	m	struct:trunk_async_ctxt
stats	external/splinterdb/src/btree.h	/^   btree_pivot_stats stats;$/;"	m	struct:btree_pivot_data
stats	external/splinterdb/src/cache.h	/^   } stats;$/;"	m	struct:cache_async_ctxt	typeref:struct:cache_async_ctxt::__anon23
stats	external/splinterdb/src/clockcache.h	/^   cache_stats stats[MAX_THREADS];$/;"	m	struct:clockcache
stats	external/splinterdb/src/rc_allocator.h	/^   rc_allocator_stats stats;$/;"	m	struct:rc_allocator
stats	external/splinterdb/src/task.h	/^   task_stats stats[MAX_THREADS];$/;"	m	struct:task_group
stats	external/splinterdb/src/trunk.h	/^   trunk_stats *stats;$/;"	m	struct:trunk_handle
stats	external/splinterdb/tests/test_common.h	/^   stats_lookup *stats;$/;"	m	struct:__anon61
stats_filename	external/splinterdb/scripts/run_ycsb.py	/^                stats_filename = data_prefix + ".statistics"$/;"	v
stats_insert	external/splinterdb/tests/functional/splinter_test.c	/^typedef struct stats_insert {$/;"	s	file:
stats_insert	external/splinterdb/tests/functional/splinter_test.c	/^} stats_insert;$/;"	t	typeref:struct:stats_insert	file:
stats_lines	external/splinterdb/scripts/run_ycsb.py	/^                    stats_lines = stats_file.readlines()$/;"	v
stats_lookup	external/splinterdb/tests/test_common.h	/^typedef struct stats_lookup {$/;"	s
stats_lookup	external/splinterdb/tests/test_common.h	/^} stats_lookup;$/;"	t	typeref:struct:stats_lookup
stats_only	external/splinterdb/tests/test_common.h	/^   bool32        stats_only; \/\/ update statistic only$/;"	m	struct:__anon61
status	external/splinterdb/src/cache.h	/^   platform_status status; \/\/ IN status of async IO$/;"	m	struct:cache_async_ctxt
status	external/splinterdb/src/clockcache.h	/^   uint32 status;$/;"	m	struct:history_record
status	external/splinterdb/src/clockcache.h	/^   volatile entry_status status;$/;"	m	struct:clockcache_entry
step_sample	src/test_progress.c	/^uint64_t step_sample = 1000000;$/;"	v
step_size	src/test_progress.c	/^uint64_t step_size = 20000;$/;"	v
stop	external/splinterdb/src/task.h	/^   bool32          stop;$/;"	m	struct:task_bg_thread_group
stop	src/gqf_backup.c	/^void stop() {$/;"	f
stop_recording	src/gqf.c	/^void stop_recording() {$/;"	f
stop_recording	src/gqf_backup.c	/^void stop_recording() {$/;"	f
stop_thread	external/splinterdb/tests/unit/task_system_test.c	/^   bool32       stop_thread;$/;"	m	struct:__anon65	file:
str	external/splinterdb/src/platform_linux/platform_types.h	/^   char  *str;$/;"	m	struct:__anon28
str_to_ext	other_filters/taf/src/arcd.c	/^void str_to_ext(char* str, Ext* ext) {$/;"	f
str_to_ext	src/taf.cc	/^void str_to_ext(char* str, Ext* ext) {$/;"	f
stream	external/splinterdb/src/platform_linux/platform_types.h	/^   FILE  *stream;$/;"	m	struct:__anon28
strs_to_exts	other_filters/taf/src/arcd.c	/^void strs_to_exts(char* strs[64], Ext exts[64]) {$/;"	f
strs_to_exts	src/taf.cc	/^void strs_to_exts(char* strs[64], Ext exts[64]) {$/;"	f
subbundle	external/splinterdb/src/trunk.c	/^   trunk_subbundle subbundle[TRUNK_MAX_SUBBUNDLES];$/;"	m	struct:trunk_hdr	file:
subprocess	external/splinterdb/scripts/run_ycsb.py	/^import subprocess$/;"	i
suite_all	external/splinterdb/tests/unit/main.c	/^suite_all(struct ctest *t)$/;"	f	file:
suite_filter	external/splinterdb/tests/unit/main.c	/^suite_filter(struct ctest *t)$/;"	f	file:
suite_name	external/splinterdb/tests/unit/main.c	/^static const char *suite_name    = NULL;$/;"	v	file:
sum_latency_tables	external/splinterdb/tests/functional/ycsb_test.c	/^sum_latency_tables(latency_table dest,$/;"	f
sum_of_cpu_times	external/splinterdb/tests/functional/ycsb_test.c	/^   uint64_t sum_of_cpu_times;$/;"	m	struct:running_times	file:
sum_of_wall_clock_times	external/splinterdb/tests/functional/ycsb_test.c	/^   uint64_t sum_of_wall_clock_times;$/;"	m	struct:running_times	file:
summary_filename	external/splinterdb/scripts/run_ycsb.py	/^                summary_filename = results_dir + "\/summary"$/;"	v
super	external/splinterdb/src/btree.h	/^   iterator      super;$/;"	m	struct:btree_iterator
super	external/splinterdb/src/clockcache.h	/^   cache              super;$/;"	m	struct:clockcache
super	external/splinterdb/src/clockcache.h	/^   cache_config super;$/;"	m	struct:clockcache_config
super	external/splinterdb/src/merge.h	/^   iterator     super;     \/\/ handle for iterator.h API$/;"	m	struct:merge_iterator
super	external/splinterdb/src/platform_linux/laio.h	/^   io_handle          super;$/;"	m	struct:laio_handle
super	external/splinterdb/src/rc_allocator.h	/^   allocator               super;$/;"	m	struct:rc_allocator
super	external/splinterdb/src/shard_log.h	/^   iterator          super;$/;"	m	struct:shard_log_iterator
super	external/splinterdb/src/shard_log.h	/^   log_handle            super; \/\/ handle to log I\/O ops abstraction.$/;"	m	struct:shard_log
super	external/splinterdb/src/trunk.c	/^   iterator       super;$/;"	m	struct:trunk_btree_skiperator	file:
super	external/splinterdb/src/trunk.h	/^   iterator        super;$/;"	m	struct:trunk_range_iterator
super	external/splinterdb/tests/test_data.c	/^   data_config super;$/;"	m	struct:data_test_config	file:
super	external/splinterdb/tests/unit/splinterdb_quick_test.c	/^   data_config super;$/;"	m	struct:__anon63	file:
super_block_idx	external/splinterdb/src/trunk.h	/^   uint64                super_block_idx;$/;"	m	struct:trunk_handle
swap_ptrs	other_filters/taf/src/exaf.c	/^static void inline swap_ptrs(Ext **a, Ext **b) {$/;"	f	file:
swap_ptrs	other_filters/taf/src/splinter_taf.c	/^static void inline swap_ptrs(int **a, int **b) {$/;"	f	file:
swap_ptrs	other_filters/taf/src/taf.c	/^static void inline swap_ptrs(int **a, int **b) {$/;"	f	file:
swap_ptrs	other_filters/taf/src/taf.cc	/^static void inline swap_ptrs(int **a, int **b) {$/;"	f	file:
swap_ptrs	other_filters/taf/src/taf_sim.c	/^static void inline swap_ptrs(int **a, int **b) {$/;"	f	file:
swap_ptrs	src/taf.cc	/^static void inline swap_ptrs(int **a, int **b) {$/;"	f	file:
sync_probability	external/splinterdb/tests/functional/cache_test.c	/^   uint32             sync_probability;        \/\/ IN probability of sync get$/;"	m	struct:__anon54	file:
syncs_issued	external/splinterdb/src/cache.h	/^   uint64 syncs_issued;$/;"	m	struct:cache_stats
sys	external/splinterdb/scripts/config_reader.py	/^import sys$/;"	i
sys	external/splinterdb/scripts/list_test.py	/^import sys$/;"	i
sys	external/splinterdb/scripts/run_ycsb.py	/^import sys$/;"	i
table	external/splinterdb/src/util.c	/^static const char table[16] = {'0',$/;"	v	file:
table_	other_filters/acf/src/cuckoofilter.h	/^				 TableType<bits_per_item> *table_;$/;"	m	class:cuckoofilter::CuckooFilter
table_	other_filters/acfsim/src/cuckoofilter.h	/^				 TableType<bits_per_item> *table_;$/;"	m	class:cuckoofilter::CuckooFilter
table_	other_filters/cf/src/cuckoofilter.h	/^  TableType<bits_per_item> *table_;$/;"	m	class:cuckoofilter::CuckooFilter
table_entry	external/splinterdb/src/btree_private.h	/^typedef node_offset table_entry;$/;"	t
table_index	external/splinterdb/src/btree_private.h	/^typedef uint16 table_index; \/\/  So we can make this bigger for bigger nodes.$/;"	t
tables	external/splinterdb/tests/functional/ycsb_test.c	/^   latency_tables   tables;$/;"	m	struct:ycsb_phase	file:
tables	external/splinterdb/tests/functional/ycsb_test.c	/^   latency_tables tables;$/;"	m	struct:ycsb_log_params	file:
tables_	other_filters/acf/src/hashutil.h	/^  uint64_t tables_[sizeof(uint64_t)][1 << CHAR_BIT];$/;"	m	class:cuckoofilter::SimpleTabulation
tables_	other_filters/acfsim/src/hashutil.h	/^  uint64_t tables_[sizeof(uint64_t)][1 << CHAR_BIT];$/;"	m	class:cuckoofilter::SimpleTabulation
tables_	other_filters/cf/src/hashutil.h	/^  uint64_t tables_[sizeof(uint64_t)][1 << CHAR_BIT];$/;"	m	class:cuckoofilter::SimpleTabulation
taf_block_t	other_filters/taf/src/splinter_taf.h	/^typedef struct taf_block_t {$/;"	s
taf_block_t	other_filters/taf/src/taf.h	/^typedef struct taf_block_t {$/;"	s
taf_block_t	other_filters/taf/src/taf_sim.h	/^typedef struct taf_block_t {$/;"	s
taf_block_t	src/taf.cc	/^typedef struct taf_block_t {$/;"	s	file:
taf_clear	other_filters/taf/src/splinter_taf.c	/^void taf_clear(TAF* filter) {$/;"	f
taf_clear	other_filters/taf/src/taf.c	/^void taf_clear(TAF* filter) {$/;"	f
taf_clear	other_filters/taf/src/taf.cc	/^void taf_clear(TAF* filter) {$/;"	f
taf_clear	other_filters/taf/src/taf_sim.c	/^void taf_clear(TAF* filter) {$/;"	f
taf_clear	src/taf.cc	/^void taf_clear(TAF* filter) {$/;"	f
taf_destroy	other_filters/taf/src/splinter_taf.c	/^void taf_destroy(TAF* filter) {$/;"	f
taf_destroy	other_filters/taf/src/taf.c	/^void taf_destroy(TAF* filter) {$/;"	f
taf_destroy	other_filters/taf/src/taf.cc	/^void taf_destroy(TAF* filter) {$/;"	f
taf_destroy	other_filters/taf/src/taf_sim.c	/^void taf_destroy(TAF* filter) {$/;"	f
taf_destroy	src/taf.cc	/^void taf_destroy(TAF* filter) {$/;"	f
taf_hash	other_filters/taf/src/splinter_taf.c	/^static uint64_t taf_hash(const TAF *filter, elt_t elt) {$/;"	f	file:
taf_hash	other_filters/taf/src/taf.c	/^static uint64_t taf_hash(const TAF *filter, elt_t elt) {$/;"	f	file:
taf_hash	other_filters/taf/src/taf.cc	/^static uint64_t taf_hash(const TAF *filter, elt_t elt) {$/;"	f	file:
taf_hash	other_filters/taf/src/taf_sim.c	/^static uint64_t taf_hash(const TAF *filter, elt_t elt) {$/;"	f	file:
taf_hash	src/taf.cc	/^static uint64_t taf_hash(const TAF *filter, elt_t elt) {$/;"	f	file:
taf_init	other_filters/taf/src/splinter_taf.c	/^void taf_init(TAF *filter, size_t n, int seed) {$/;"	f
taf_init	other_filters/taf/src/taf.c	/^void taf_init(TAF *filter, size_t n, int seed) {$/;"	f
taf_init	other_filters/taf/src/taf.cc	/^void taf_init(TAF *filter, size_t n, int seed) {$/;"	f
taf_init	other_filters/taf/src/taf_sim.c	/^void taf_init(TAF *filter, size_t n, int seed) {$/;"	f
taf_init	src/taf.cc	/^void taf_init(TAF *filter, size_t n, int seed) {$/;"	f
taf_insert	other_filters/taf/src/splinter_taf.c	/^void taf_insert(TAF *filter, elt_t elt) {$/;"	f
taf_insert	other_filters/taf/src/taf.c	/^void taf_insert(TAF *filter, elt_t elt) {$/;"	f
taf_insert	other_filters/taf/src/taf.cc	/^void taf_insert(TAF *filter, elt_t elt) {$/;"	f
taf_insert	other_filters/taf/src/taf_sim.c	/^void taf_insert(TAF *filter, elt_t elt) {$/;"	f
taf_insert	src/taf.cc	/^void taf_insert(TAF *filter, elt_t elt) {$/;"	f
taf_load	other_filters/taf/src/splinter_taf.c	/^double taf_load(TAF *filter) {$/;"	f
taf_load	other_filters/taf/src/taf.c	/^double taf_load(TAF *filter) {$/;"	f
taf_load	other_filters/taf/src/taf.cc	/^double taf_load(TAF *filter) {$/;"	f
taf_load	other_filters/taf/src/taf_sim.c	/^double taf_load(TAF *filter) {$/;"	f
taf_load	src/taf.cc	/^double taf_load(TAF *filter) {$/;"	f
taf_lookup	other_filters/taf/src/splinter_taf.c	/^int taf_lookup(TAF *filter, elt_t elt) {$/;"	f
taf_lookup	other_filters/taf/src/taf.c	/^int taf_lookup(TAF *filter, elt_t elt) {$/;"	f
taf_lookup	other_filters/taf/src/taf.cc	/^int taf_lookup(TAF *filter, elt_t elt) {$/;"	f
taf_lookup	other_filters/taf/src/taf_sim.c	/^int taf_lookup(TAF *filter, elt_t elt) {$/;"	f
taf_lookup	src/taf.cc	/^int taf_lookup(TAF *filter, elt_t elt) {$/;"	f
taf_t	other_filters/taf/src/splinter_taf.h	/^typedef struct taf_t {$/;"	s
taf_t	other_filters/taf/src/taf.h	/^typedef struct taf_t {$/;"	s
taf_t	other_filters/taf/src/taf_sim.h	/^typedef struct taf_t {$/;"	s
taf_t	src/taf.cc	/^typedef struct taf_t {$/;"	s	file:
tag	other_filters/acf/src/cuckoofilter.h	/^					 uint32_t tag;$/;"	m	struct:cuckoofilter::CuckooFilter::__anon5
tag	other_filters/acfsim/src/cuckoofilter.h	/^					 uint32_t tag;$/;"	m	struct:cuckoofilter::CuckooFilter::__anon7
tag	other_filters/cf/src/cuckoofilter.h	/^    uint32_t tag;$/;"	m	struct:cuckoofilter::CuckooFilter::__anon6
tag	src/test_unit.c	/^	uint64_t tag;$/;"	m	struct:_ht_node	file:
tag	src/test_unit_old.c	/^	uint64_t tag;$/;"	m	struct:_ht_node	file:
tail	external/splinterdb/src/pcq.h	/^   cache_aligned_uint32 tail; \/\/ Producers enqueue to here$/;"	m	struct:__anon34
tail	external/splinterdb/src/task.h	/^   task *tail;$/;"	m	struct:task_queue
target_leaf_kv_bytes	external/splinterdb/src/trunk.h	/^   uint64 target_leaf_kv_bytes; \/\/ make leaves this big when splitting$/;"	m	struct:trunk_config
task	external/splinterdb/src/task.h	/^typedef struct task {$/;"	s
task	external/splinterdb/src/task.h	/^} task;$/;"	t	typeref:struct:task
task_active_tasks_mask	external/splinterdb/src/task.c	/^task_active_tasks_mask(task_system *ts)$/;"	f
task_allocate_threadid	external/splinterdb/src/task.c	/^task_allocate_threadid(task_system *ts)$/;"	f	file:
task_bg_thread_group	external/splinterdb/src/task.h	/^typedef struct task_bg_thread_group {$/;"	s
task_bg_thread_group	external/splinterdb/src/task.h	/^} task_bg_thread_group;$/;"	t	typeref:struct:task_bg_thread_group
task_cfg	external/splinterdb/src/splinterdb.c	/^   task_system_config task_cfg;$/;"	m	struct:splinterdb	file:
task_config_valid	external/splinterdb/src/task.c	/^task_config_valid(const uint64 num_background_threads[NUM_TASK_TYPES])$/;"	f	file:
task_countup	external/splinterdb/src/trunk.h	/^   } PLATFORM_CACHELINE_ALIGNED task_countup[MAX_THREADS];$/;"	m	struct:trunk_handle	typeref:struct:trunk_handle::__anon18
task_create_thread_with_hooks	external/splinterdb/src/task.c	/^task_create_thread_with_hooks(platform_thread       *thread,$/;"	f	file:
task_deallocate_threadid	external/splinterdb/src/task.c	/^task_deallocate_threadid(task_system *ts, threadid tid)$/;"	f	file:
task_deregister_this_thread	external/splinterdb/src/task.h	159;"	d
task_deregister_thread	external/splinterdb/src/task.c	/^task_deregister_thread(task_system *ts,$/;"	f
task_enqueue	external/splinterdb/src/task.c	/^task_enqueue(task_system *ts,$/;"	f
task_fn	external/splinterdb/src/task.h	/^typedef void (*task_fn)(void *arg, void *scratch);$/;"	t
task_get_max_tid	external/splinterdb/src/task.c	/^task_get_max_tid(task_system *ts)$/;"	f
task_group	external/splinterdb/src/task.h	/^typedef struct task_group {$/;"	s
task_group	external/splinterdb/src/task.h	/^} task_group;$/;"	t	typeref:struct:task_group
task_group_deinit	external/splinterdb/src/task.c	/^task_group_deinit(task_group *group)$/;"	f	file:
task_group_get_next_task	external/splinterdb/src/task.c	/^task_group_get_next_task(task_group *group)$/;"	f	file:
task_group_init	external/splinterdb/src/task.c	/^task_group_init(task_group  *group,$/;"	f	file:
task_group_lock	external/splinterdb/src/task.c	/^task_group_lock(task_group *group)$/;"	f	file:
task_group_perform_one	external/splinterdb/src/task.c	/^task_group_perform_one(task_group *group, uint64 queue_scale_percent)$/;"	f	file:
task_group_print_stats	external/splinterdb/src/task.c	/^task_group_print_stats(task_group *group, task_type type)$/;"	f	file:
task_group_run_task	external/splinterdb/src/task.c	/^task_group_run_task(task_group *group, task *assigned_task)$/;"	f	file:
task_group_stop_and_wait_for_threads	external/splinterdb/src/task.c	/^task_group_stop_and_wait_for_threads(task_group *group)$/;"	f	file:
task_group_unlock	external/splinterdb/src/task.c	/^task_group_unlock(task_group *group)$/;"	f	file:
task_hook	external/splinterdb/src/task.h	/^typedef void (*task_hook)(task_system *arg);$/;"	t
task_init_tid_bitmask	external/splinterdb/src/task.c	/^task_init_tid_bitmask(uint64 *tid_bitmask)$/;"	f	file:
task_invoke_with_hooks	external/splinterdb/src/task.c	/^task_invoke_with_hooks(void *func_and_args)$/;"	f	file:
task_perform_all	external/splinterdb/src/task.c	/^task_perform_all(task_system *ts)$/;"	f
task_perform_one	external/splinterdb/src/task.h	/^task_perform_one(task_system *ts)$/;"	f
task_perform_one_if_needed	external/splinterdb/src/task.c	/^task_perform_one_if_needed(task_system *ts, uint64 queue_scale_percent)$/;"	f
task_perform_until_quiescent	external/splinterdb/src/task.c	/^task_perform_until_quiescent(task_system *ts)$/;"	f
task_print_stats	external/splinterdb/src/task.c	/^task_print_stats(task_system *ts)$/;"	f
task_queue	external/splinterdb/src/task.h	/^typedef struct task_queue {$/;"	s
task_queue	external/splinterdb/src/task.h	/^} task_queue;$/;"	t	typeref:struct:task_queue
task_register_hook	external/splinterdb/src/task.c	/^task_register_hook(task_system *ts, task_hook newhook)$/;"	f	file:
task_register_this_thread	external/splinterdb/src/task.h	148;"	d
task_register_thread	external/splinterdb/src/task.c	/^task_register_thread(task_system *ts,$/;"	f
task_run_thread_hooks	external/splinterdb/src/task.c	/^task_run_thread_hooks(task_system *ts)$/;"	f	file:
task_stats	external/splinterdb/src/task.h	/^} PLATFORM_CACHELINE_ALIGNED task_stats;$/;"	t	typeref:struct:__anon40
task_sys	external/splinterdb/src/splinterdb.c	/^   task_system       *task_sys;$/;"	m	struct:splinterdb	file:
task_system	external/splinterdb/src/task.h	/^struct task_system {$/;"	s
task_system	external/splinterdb/src/task.h	/^typedef struct task_system task_system;$/;"	t	typeref:struct:task_system
task_system_config	external/splinterdb/src/task.h	/^typedef struct task_system_config {$/;"	s
task_system_config	external/splinterdb/src/task.h	/^} task_system_config;$/;"	t	typeref:struct:task_system_config
task_system_config_init	external/splinterdb/src/task.c	/^task_system_config_init(task_system_config *task_cfg,$/;"	f
task_system_create	external/splinterdb/src/task.c	/^task_system_create(platform_heap_id          hid,$/;"	f
task_system_destroy	external/splinterdb/src/task.c	/^task_system_destroy(platform_heap_id hid, task_system **ts_in)$/;"	f
task_system_get_max_tid	external/splinterdb/src/task.c	/^task_system_get_max_tid(task_system *ts)$/;"	f	file:
task_system_get_thread_scratch	external/splinterdb/src/task.c	/^task_system_get_thread_scratch(task_system *ts, const threadid tid)$/;"	f
task_system_get_tid_bitmask	external/splinterdb/src/task.c	/^task_system_get_tid_bitmask(task_system *ts)$/;"	f	file:
task_system_io_deregister_thread	external/splinterdb/src/task.c	/^task_system_io_deregister_thread(task_system *ts)$/;"	f	file:
task_system_io_register_thread	external/splinterdb/src/task.c	/^task_system_io_register_thread(task_system *ts)$/;"	f	file:
task_system_is_quiescent	external/splinterdb/src/task.c	/^task_system_is_quiescent(task_system *ts)$/;"	f
task_thread_create	external/splinterdb/src/task.c	/^task_thread_create(const char            *name,$/;"	f
task_type	external/splinterdb/src/task.h	/^typedef enum task_type {$/;"	g
task_type	external/splinterdb/src/task.h	/^} task_type;$/;"	t	typeref:enum:task_type
task_type_name	external/splinterdb/src/task.c	/^const char *task_type_name[] = {"TASK_TYPE_INVALID",$/;"	v
task_wait_for_completion	external/splinterdb/src/task.c	/^task_wait_for_completion(task_system *ts)$/;"	f
task_worker_thread	external/splinterdb/src/task.c	/^task_worker_thread(void *arg)$/;"	f	file:
tasks	external/splinterdb/tests/functional/io_apis_test.c	/^   task_system        *tasks;$/;"	m	struct:io_test_fn_args	file:
tasks	external/splinterdb/tests/unit/task_system_test.c	/^   task_system    *tasks;$/;"	m	struct:__anon64	file:
tasks	external/splinterdb/tests/unit/task_system_test.c	/^   task_system *tasks;$/;"	m	struct:__anon65	file:
tdiff	other_filters/cqf/src/bm.c	/^static float tdiff (struct timeval *start, struct timeval *end) {$/;"	f	file:
tdiff	src/bm.c	/^static float tdiff (struct timeval *start, struct timeval *end) {$/;"	f	file:
teardown	external/splinterdb/tests/unit/ctest.h	/^   ctest_teardown_func *teardown;$/;"	m	struct:ctest
terminal_log_entry	external/splinterdb/src/shard_log.c	/^terminal_log_entry(shard_log_config *cfg, char *page, log_entry *le)$/;"	f	file:
test_abandon_read_batch	external/splinterdb/tests/functional/cache_test.c	/^test_abandon_read_batch(test_params *params,$/;"	f	file:
test_adapt_1	other_filters/taf/src/exaf.c	/^void test_adapt_1() {$/;"	f
test_adapt_1	other_filters/taf/src/splinter_taf.c	/^void test_adapt_1() {$/;"	f
test_adapt_1	other_filters/taf/src/taf.c	/^void test_adapt_1() {$/;"	f
test_adapt_1	other_filters/taf/src/taf.cc	/^void test_adapt_1() {$/;"	f
test_adapt_1	src/taf.cc	/^void test_adapt_1() {$/;"	f
test_adapt_loc_1	other_filters/taf/src/exaf.c	/^void test_adapt_loc_1() {$/;"	f
test_adapt_loc_1	other_filters/taf/src/splinter_taf.c	/^void test_adapt_loc_1() {$/;"	f
test_adapt_loc_1	other_filters/taf/src/taf.c	/^void test_adapt_loc_1() {$/;"	f
test_adapt_loc_1	other_filters/taf/src/taf.cc	/^void test_adapt_loc_1() {$/;"	f
test_adapt_loc_1	other_filters/taf/src/utaf.c	/^void test_adapt_loc_1() {$/;"	f
test_adapt_loc_1	src/taf.cc	/^void test_adapt_loc_1() {$/;"	f
test_adapt_loc_2	other_filters/taf/src/exaf.c	/^void test_adapt_loc_2() {$/;"	f
test_adapt_loc_2	other_filters/taf/src/splinter_taf.c	/^void test_adapt_loc_2() {$/;"	f
test_adapt_loc_2	other_filters/taf/src/taf.c	/^void test_adapt_loc_2() {$/;"	f
test_adapt_loc_2	other_filters/taf/src/taf.cc	/^void test_adapt_loc_2() {$/;"	f
test_adapt_loc_2	other_filters/taf/src/utaf.c	/^void test_adapt_loc_2() {$/;"	f
test_adapt_loc_2	src/taf.cc	/^void test_adapt_loc_2() {$/;"	f
test_adapt_loc_3	other_filters/taf/src/splinter_taf.c	/^void test_adapt_loc_3() {$/;"	f
test_adapt_loc_3	other_filters/taf/src/taf.c	/^void test_adapt_loc_3() {$/;"	f
test_adapt_loc_3	other_filters/taf/src/taf.cc	/^void test_adapt_loc_3() {$/;"	f
test_adapt_loc_3	src/taf.cc	/^void test_adapt_loc_3() {$/;"	f
test_add_block	other_filters/taf/src/exaf.c	/^void test_add_block() {$/;"	f
test_add_block	other_filters/taf/src/rsqf.c	/^void test_add_block() {$/;"	f
test_add_block	other_filters/taf/src/splinter_taf.c	/^void test_add_block() {$/;"	f
test_add_block	other_filters/taf/src/taf.c	/^void test_add_block() {$/;"	f
test_add_block	other_filters/taf/src/taf.cc	/^void test_add_block() {$/;"	f
test_add_block	other_filters/taf/src/utaf.c	/^void test_add_block() {$/;"	f
test_add_block	src/taf.cc	/^void test_add_block() {$/;"	f
test_add_block_no_clobber	other_filters/taf/src/exaf.c	/^void test_add_block_no_clobber() {$/;"	f
test_add_block_no_clobber	other_filters/taf/src/splinter_taf.c	/^void test_add_block_no_clobber() {$/;"	f
test_add_block_no_clobber	other_filters/taf/src/taf.c	/^void test_add_block_no_clobber() {$/;"	f
test_add_block_no_clobber	other_filters/taf/src/taf.cc	/^void test_add_block_no_clobber() {$/;"	f
test_add_block_no_clobber	other_filters/taf/src/utaf.c	/^void test_add_block_no_clobber() {$/;"	f
test_add_block_no_clobber	src/taf.cc	/^void test_add_block_no_clobber() {$/;"	f
test_all_done	external/splinterdb/tests/functional/splinter_test.c	/^test_all_done(const uint8 done, const uint8 num_tables)$/;"	f	file:
test_assert_eq	other_filters/taf/src/arcd.c	227;"	d	file:
test_assert_eq	other_filters/taf/src/exaf.c	662;"	d	file:
test_assert_eq	other_filters/taf/src/rsqf.c	403;"	d	file:
test_assert_eq	other_filters/taf/src/splinter_taf.c	788;"	d	file:
test_assert_eq	other_filters/taf/src/taf.c	674;"	d	file:
test_assert_eq	other_filters/taf/src/taf.cc	706;"	d	file:
test_assert_eq	other_filters/taf/src/taf_sim.c	674;"	d	file:
test_assert_eq	other_filters/taf/src/utaf.c	549;"	d	file:
test_assert_eq	src/taf.cc	2116;"	d	file:
test_assert_eq	src/taf.cc	845;"	d	file:
test_assert_usermsg	external/splinterdb/tests/unit/misc_test.c	54;"	d	file:
test_async_callback	external/splinterdb/tests/functional/cache_test.c	/^test_async_callback(cache_async_ctxt *ctxt)$/;"	f
test_async_callback	external/splinterdb/tests/functional/test_async.c	/^test_async_callback(trunk_async_ctxt *spl_ctxt)$/;"	f	file:
test_async_ctxt	external/splinterdb/tests/functional/cache_test.c	/^} test_async_ctxt;$/;"	t	typeref:struct:__anon53	file:
test_async_ctxt	external/splinterdb/tests/functional/test_async.h	/^} test_async_ctxt;$/;"	t	typeref:struct:__anon57
test_async_ctxt_get	external/splinterdb/tests/test_common.c	/^test_async_ctxt_get(trunk_handle      *spl,$/;"	f
test_async_lookup	external/splinterdb/tests/functional/test_async.h	/^} test_async_lookup;$/;"	t	typeref:struct:__anon59
test_async_reads	external/splinterdb/tests/functional/io_apis_test.c	/^test_async_reads(platform_heap_id    hid,$/;"	f	file:
test_async_reads_by_threads	external/splinterdb/tests/functional/io_apis_test.c	/^test_async_reads_by_threads(io_test_fn_args *io_test_param,$/;"	f	file:
test_async_reads_worker	external/splinterdb/tests/functional/io_apis_test.c	/^test_async_reads_worker(void *arg)$/;"	f
test_btree_async_lookup	external/splinterdb/tests/functional/btree_test.c	/^test_btree_async_lookup(cache                   *cc,$/;"	f
test_btree_basic	external/splinterdb/tests/functional/btree_test.c	/^test_btree_basic(cache             *cc,$/;"	f	file:
test_btree_config	external/splinterdb/tests/functional/btree_test.c	/^typedef struct test_btree_config {$/;"	s	file:
test_btree_config	external/splinterdb/tests/functional/btree_test.c	/^} test_btree_config;$/;"	t	typeref:struct:test_btree_config	file:
test_btree_count_in_range	external/splinterdb/tests/functional/btree_test.c	/^test_btree_count_in_range(cache             *cc,$/;"	f	file:
test_btree_create_packed_trees	external/splinterdb/tests/functional/btree_test.c	/^test_btree_create_packed_trees(cache             *cc,$/;"	f
test_btree_insert	external/splinterdb/tests/functional/btree_test.c	/^test_btree_insert(test_memtable_context *ctxt, key tuple_key, message data)$/;"	f
test_btree_insert_thread	external/splinterdb/tests/functional/btree_test.c	/^test_btree_insert_thread(void *arg)$/;"	f
test_btree_lookup	external/splinterdb/tests/functional/btree_test.c	/^test_btree_lookup(cache           *cc,$/;"	f
test_btree_merge_basic	external/splinterdb/tests/functional/btree_test.c	/^test_btree_merge_basic(cache             *cc,$/;"	f	file:
test_btree_merge_perf	external/splinterdb/tests/functional/btree_test.c	/^test_btree_merge_perf(cache             *cc,$/;"	f	file:
test_btree_perf	external/splinterdb/tests/functional/btree_test.c	/^test_btree_perf(cache             *cc,$/;"	f	file:
test_btree_print_all_keys	external/splinterdb/tests/functional/btree_test.c	/^test_btree_print_all_keys(cache        *cc,$/;"	f	file:
test_btree_process_noop	external/splinterdb/tests/functional/btree_test.c	/^test_btree_process_noop(void *arg, uint64 generation)$/;"	f
test_btree_rough_iterator	external/splinterdb/tests/functional/btree_test.c	/^test_btree_rough_iterator(cache             *cc,$/;"	f	file:
test_btree_thread_params	external/splinterdb/tests/functional/btree_test.c	/^typedef struct test_btree_thread_params {$/;"	s	file:
test_btree_thread_params	external/splinterdb/tests/functional/btree_test.c	/^} test_btree_thread_params;$/;"	t	typeref:struct:test_btree_thread_params	file:
test_btree_tuple	external/splinterdb/tests/functional/btree_test.c	/^test_btree_tuple(test_memtable_context *ctxt,$/;"	f
test_cache_async	external/splinterdb/tests/functional/cache_test.c	/^test_cache_async(cache             *cc,$/;"	f
test_cache_basic	external/splinterdb/tests/functional/cache_test.c	/^test_cache_basic(cache *cc, clockcache_config *cfg, platform_heap_id hid)$/;"	f
test_cache_flush	external/splinterdb/tests/functional/cache_test.c	/^test_cache_flush(cache             *cc,$/;"	f
test_cache_page_pin	external/splinterdb/tests/functional/cache_test.c	/^test_cache_page_pin(cache *cc, page_handle **page_arr, uint64 page_capacity)$/;"	f
test_calc_ext	other_filters/taf/src/exaf.c	/^void test_calc_ext() {$/;"	f
test_calc_quot	other_filters/taf/src/rsqf.c	/^void test_calc_quot() {$/;"	f
test_calc_rem	other_filters/taf/src/rsqf.c	/^void test_calc_rem() {$/;"	f
test_calc_rem	other_filters/taf/src/splinter_taf.c	/^void test_calc_rem() {$/;"	f
test_calc_rem	other_filters/taf/src/taf.c	/^void test_calc_rem() {$/;"	f
test_calc_rem	other_filters/taf/src/taf.cc	/^void test_calc_rem() {$/;"	f
test_calc_rem	src/taf.cc	/^void test_calc_rem() {$/;"	f
test_cfg	external/splinterdb/tests/functional/splinter_test.c	/^   test_config       *test_cfg;$/;"	m	struct:test_splinter_thread_params	file:
test_config	external/splinterdb/tests/functional/splinter_test.h	/^typedef struct test_config {$/;"	s
test_config	external/splinterdb/tests/functional/splinter_test.h	/^} test_config;$/;"	t	typeref:struct:test_config
test_config_init	external/splinterdb/tests/functional/test.h	/^test_config_init(trunk_config           *splinter_cfg,  \/\/ OUT$/;"	f
test_config_parse	external/splinterdb/tests/functional/splinter_test.h	/^test_config_parse(test_config *cfg,$/;"	f
test_config_set_defaults	external/splinterdb/tests/functional/splinter_test.h	/^test_config_set_defaults(test_type test, test_config *cfg)$/;"	f
test_count_tuples_in_range	external/splinterdb/tests/functional/btree_test.c	/^test_count_tuples_in_range(cache        *cc,$/;"	f	file:
test_data_config	external/splinterdb/tests/test_data.c	/^data_config *test_data_config = &data_test_config_internal.super;$/;"	v
test_data_generate_message	external/splinterdb/tests/test_data.c	/^test_data_generate_message(const data_config *cfg,$/;"	f
test_data_key_cmp	external/splinterdb/tests/test_data.c	/^test_data_key_cmp(const data_config *cfg, slice key1, slice key2)$/;"	f	file:
test_data_key_to_string	external/splinterdb/tests/test_data.c	/^test_data_key_to_string(const data_config *cfg,$/;"	f	file:
test_data_merge_tuples	external/splinterdb/tests/test_data.c	/^test_data_merge_tuples(const data_config *cfg,$/;"	f	file:
test_data_merge_tuples_final	external/splinterdb/tests/test_data.c	/^test_data_merge_tuples_final(const data_config *cfg,$/;"	f	file:
test_data_message_to_string	external/splinterdb/tests/test_data.c	/^test_data_message_to_string(const data_config *cfg,$/;"	f	file:
test_data_print_key	external/splinterdb/tests/test_data.h	/^test_data_print_key(const void *key, platform_log_handle *log_handle)$/;"	f
test_dataset_evolution	other_filters/taf/src/taf.c	/^void test_dataset_evolution(char* input_file_name, char* output_file_name, int num_trials, int query_space_size, int num_queries, int step_size) {$/;"	f
test_dataset_evolution	other_filters/taf/src/taf.cc	/^void test_dataset_evolution(char* input_file_name, char* output_file_name, int num_trials, int query_space_size, int num_queries, int step_size) {$/;"	f
test_dataset_evolution	src/taf.cc	/^void test_dataset_evolution(char* input_file_name, char* output_file_name, int num_trials, int query_space_size, int num_queries, int step_size) {$/;"	f
test_deinit_task_system	external/splinterdb/tests/functional/test.h	/^test_deinit_task_system(platform_heap_id hid, task_system **ts)$/;"	f
test_deletions	src/test_unit.c	/^void test_deletions(int qbits, int rbits) {$/;"	f
test_deletions	src/test_unit_old.c	/^void test_deletions(int qbits, int rbits) {$/;"	f
test_dispatcher	external/splinterdb/tests/functional/test_dispatcher.c	/^test_dispatcher(int argc, char *argv[])$/;"	f
test_do_read_batch	external/splinterdb/tests/functional/cache_test.c	/^test_do_read_batch(threadid tid, test_params *params, uint64 batch_start)$/;"	f	file:
test_encode_decode_capacity	other_filters/taf/src/arcd.c	/^void test_encode_decode_capacity() {$/;"	f
test_encode_decode_capacity	src/taf.cc	/^void test_encode_decode_capacity() {$/;"	f
test_encode_decode_empty	other_filters/taf/src/arcd.c	/^void test_encode_decode_empty() {$/;"	f
test_encode_decode_empty	src/taf.cc	/^void test_encode_decode_empty() {$/;"	f
test_encode_decode_few	other_filters/taf/src/arcd.c	/^void test_encode_decode_few() {$/;"	f
test_encode_decode_few	src/taf.cc	/^void test_encode_decode_few() {$/;"	f
test_encode_decode_long	other_filters/taf/src/arcd.c	/^void test_encode_decode_long() {$/;"	f
test_encode_decode_long	src/taf.cc	/^void test_encode_decode_long() {$/;"	f
test_encode_decode_many	other_filters/taf/src/arcd.c	/^void test_encode_decode_many() {$/;"	f
test_encode_decode_many	src/taf.cc	/^void test_encode_decode_many() {$/;"	f
test_encode_decode_many_rev	other_filters/taf/src/arcd.c	/^void test_encode_decode_many_rev() {$/;"	f
test_encode_decode_many_rev	src/taf.cc	/^void test_encode_decode_many_rev() {$/;"	f
test_encode_decode_one	other_filters/taf/src/arcd.c	/^void test_encode_decode_one() {$/;"	f
test_encode_decode_one	src/taf.cc	/^void test_encode_decode_one() {$/;"	f
test_encode_decode_too_many	other_filters/taf/src/arcd.c	/^void test_encode_decode_too_many() {$/;"	f
test_encode_decode_too_many	src/taf.cc	/^void test_encode_decode_too_many() {$/;"	f
test_encode_decode_w_input	other_filters/taf/src/arcd.c	/^void test_encode_decode_w_input(Ext exts[64]) {$/;"	f
test_encode_decode_w_input	src/taf.cc	/^void test_encode_decode_w_input(Ext exts[64]) {$/;"	f
test_encode_decode_w_input_expect_fail	other_filters/taf/src/arcd.c	/^void test_encode_decode_w_input_expect_fail(Ext exts[64]) {$/;"	f
test_encode_decode_w_input_expect_fail	src/taf.cc	/^void test_encode_decode_w_input_expect_fail(Ext exts[64]) {$/;"	f
test_exec_cfg	external/splinterdb/tests/functional/splinter_test.h	/^   test_exec_config       *test_exec_cfg; \/\/ Describes test's exec parameters$/;"	m	struct:test_config
test_exec_config	external/splinterdb/tests/functional/test.h	/^typedef struct test_exec_config {$/;"	s
test_exec_config	external/splinterdb/tests/functional/test.h	/^} test_exec_config;$/;"	t	typeref:struct:test_exec_config
test_ext_matches_hash	other_filters/taf/src/exaf.c	/^void test_ext_matches_hash() {$/;"	f
test_filter_basic	external/splinterdb/tests/functional/filter_test.c	/^test_filter_basic(cache           *cc,$/;"	f	file:
test_filter_perf	external/splinterdb/tests/functional/filter_test.c	/^test_filter_perf(cache           *cc,$/;"	f	file:
test_first_unused_empty	other_filters/taf/src/rsqf.c	/^void test_first_unused_empty() {$/;"	f
test_first_unused_one_run	other_filters/taf/src/rsqf.c	/^void test_first_unused_one_run() {$/;"	f
test_first_unused_single	other_filters/taf/src/rsqf.c	/^void test_first_unused_single() {$/;"	f
test_first_unused_two_runs	other_filters/taf/src/rsqf.c	/^void test_first_unused_two_runs() {$/;"	f
test_functionality	external/splinterdb/tests/functional/test_functionality.c	/^test_functionality(allocator       *al,$/;"	f
test_generate_allocator_root_id	external/splinterdb/tests/functional/test.h	/^test_generate_allocator_root_id()$/;"	f
test_hash_accesses	other_filters/taf/src/taf.c	/^void test_hash_accesses(int qbits, int rbits, double load, uint64_t num_queries, uint64_t seed) {$/;"	f
test_hash_accesses	other_filters/taf/src/taf.cc	/^void test_hash_accesses(int qbits, int rbits, double load, uint64_t num_queries, uint64_t seed) {$/;"	f
test_hash_accesses	src/taf.cc	/^void test_hash_accesses(int qbits, int rbits, double load, uint64_t num_queries, uint64_t seed) {$/;"	f
test_inc_nonneg_offsets_full	other_filters/taf/src/rsqf.c	/^void test_inc_nonneg_offsets_full() {$/;"	f
test_inc_nonneg_offsets_targeted	other_filters/taf/src/rsqf.c	/^void test_inc_nonneg_offsets_targeted() {$/;"	f
test_inc_nonneg_offsets_untargeted	other_filters/taf/src/rsqf.c	/^void test_inc_nonneg_offsets_untargeted() {$/;"	f
test_inc_offsets_negative_target	other_filters/taf/src/rsqf.c	/^void test_inc_offsets_negative_target() {$/;"	f
test_inc_offsets_zero_offset	other_filters/taf/src/rsqf.c	/^void test_inc_offsets_zero_offset() {$/;"	f
test_init_task_system	external/splinterdb/tests/functional/test.h	/^test_init_task_system(platform_heap_id          hid,$/;"	f
test_insert_and_query	other_filters/taf/src/exaf.c	/^void test_insert_and_query() {$/;"	f
test_insert_and_query	other_filters/taf/src/rsqf.c	/^void test_insert_and_query() {$/;"	f
test_insert_and_query	other_filters/taf/src/splinter_taf.c	/^void test_insert_and_query() {$/;"	f
test_insert_and_query	other_filters/taf/src/taf.c	/^void test_insert_and_query() {$/;"	f
test_insert_and_query	other_filters/taf/src/taf.cc	/^void test_insert_and_query() {$/;"	f
test_insert_and_query	other_filters/taf/src/utaf.c	/^void test_insert_and_query() {$/;"	f
test_insert_and_query	src/taf.cc	/^void test_insert_and_query() {$/;"	f
test_insert_and_query_w_repeats	other_filters/taf/src/exaf.c	/^void test_insert_and_query_w_repeats() {$/;"	f
test_insert_and_query_w_repeats	other_filters/taf/src/splinter_taf.c	/^void test_insert_and_query_w_repeats() {$/;"	f
test_insert_and_query_w_repeats	other_filters/taf/src/taf.c	/^void test_insert_and_query_w_repeats(elt_t *query_set, int query_set_size, int n_queries, int step_size, double *fprates, int iter) {$/;"	f
test_insert_and_query_w_repeats	other_filters/taf/src/taf.cc	/^void test_insert_and_query_w_repeats(elt_t *query_set, int query_set_size, int n_queries, int step_size, double *fprates, int iter) {$/;"	f
test_insert_and_query_w_repeats	other_filters/taf/src/utaf.c	/^void test_insert_and_query_w_repeats() {$/;"	f
test_insert_and_query_w_repeats	src/taf.cc	/^void test_insert_and_query_w_repeats(elt_t *query_set, int query_set_size, int n_queries, int step_size, double *fprates, int iter) {$/;"	f
test_insert_repeated	other_filters/taf/src/rsqf.c	/^void test_insert_repeated() {$/;"	f
test_insertions	src/test_unit.c	/^void test_insertions(int qbits, int rbits) {$/;"	f
test_int_to_key	external/splinterdb/tests/functional/test.h	/^test_int_to_key(key_buffer *kb, uint64 idx, uint64 key_size)$/;"	f
test_io_thread_hdlr	external/splinterdb/tests/functional/io_apis_test.c	/^typedef void (*test_io_thread_hdlr)(void *arg);$/;"	t	file:
test_is_done	external/splinterdb/tests/functional/splinter_test.c	/^test_is_done(const uint8 done, const uint8 n)$/;"	f	file:
test_key	external/splinterdb/tests/functional/test.h	/^test_key(key_buffer   *keywb,$/;"	f
test_key_type	external/splinterdb/tests/functional/test.h	/^typedef enum test_key_type {$/;"	g
test_key_type	external/splinterdb/tests/functional/test.h	/^} test_key_type;$/;"	t	typeref:enum:test_key_type
test_log_crash	external/splinterdb/tests/functional/log_test.c	/^test_log_crash(clockcache             *cc,$/;"	f
test_log_perf	external/splinterdb/tests/functional/log_test.c	/^test_log_perf(cache                  *cc,$/;"	f
test_log_thread	external/splinterdb/tests/functional/log_test.c	/^test_log_thread(void *arg)$/;"	f
test_log_thread_params	external/splinterdb/tests/functional/log_test.c	/^typedef struct test_log_thread_params {$/;"	s	file:
test_log_thread_params	external/splinterdb/tests/functional/log_test.c	/^} test_log_thread_params;$/;"	t	typeref:struct:test_log_thread_params	file:
test_lookup_by_range	external/splinterdb/tests/unit/splinter_test.c	/^test_lookup_by_range(void         *datap,$/;"	f	file:
test_lookup_empty	other_filters/taf/src/rsqf.c	/^void test_lookup_empty() {$/;"	f
test_lookup_multi_singletons	other_filters/taf/src/rsqf.c	/^void test_lookup_multi_singletons() {$/;"	f
test_lookup_singleton	other_filters/taf/src/rsqf.c	/^void test_lookup_singleton() {$/;"	f
test_make_all_build_modes	external/splinterdb/test.sh	/^function test_make_all_build_modes() {$/;"	f
test_make_config_conflicts	external/splinterdb/test.sh	/^function test_make_config_conflicts() {$/;"	f
test_make_run_tests	external/splinterdb/test.sh	/^function test_make_run_tests() {$/;"	f
test_memtable_async_lookup	external/splinterdb/tests/functional/btree_test.c	/^test_memtable_async_lookup(test_memtable_context   *ctxt,$/;"	f
test_memtable_context	external/splinterdb/tests/functional/btree_test.c	/^typedef struct test_memtable_context {$/;"	s	file:
test_memtable_context	external/splinterdb/tests/functional/btree_test.c	/^} test_memtable_context;$/;"	t	typeref:struct:test_memtable_context	file:
test_memtable_context_btree_config	external/splinterdb/tests/functional/btree_test.c	/^test_memtable_context_btree_config(test_memtable_context *ctxt)$/;"	f
test_memtable_context_create	external/splinterdb/tests/functional/btree_test.c	/^test_memtable_context_create(cache             *cc,$/;"	f
test_memtable_context_destroy	external/splinterdb/tests/functional/btree_test.c	/^test_memtable_context_destroy(test_memtable_context *ctxt, platform_heap_id hid)$/;"	f
test_memtable_lookup	external/splinterdb/tests/functional/btree_test.c	/^test_memtable_lookup(test_memtable_context *ctxt,$/;"	f
test_merge	src/test_unit.c	/^void test_merge() {$/;"	f
test_merge	src/test_unit_old.c	/^void test_merge() {$/;"	f
test_merge_2	src/test_unit.c	/^void test_merge_2() {$/;"	f
test_merge_2	src/test_unit_old.c	/^void test_merge_2() {$/;"	f
test_message_generator	external/splinterdb/tests/functional/test.h	/^typedef struct test_message_generator {$/;"	s
test_message_generator	external/splinterdb/tests/functional/test.h	/^} test_message_generator;$/;"	t	typeref:struct:test_message_generator
test_micro	other_filters/taf/src/taf.c	/^void test_micro() {$/;"	f
test_mixed_insert_and_query_w_repeats	other_filters/taf/src/splinter_taf.c	/^void test_mixed_insert_and_query_w_repeats() {$/;"	f
test_mixed_insert_and_query_w_repeats	other_filters/taf/src/taf.c	/^void test_mixed_insert_and_query_w_repeats() {$/;"	f
test_mixed_insert_and_query_w_repeats	other_filters/taf/src/taf.cc	/^void test_mixed_insert_and_query_w_repeats() {$/;"	f
test_mixed_insert_and_query_w_repeats	other_filters/taf/src/utaf.c	/^void test_mixed_insert_and_query_w_repeats() {$/;"	f
test_mixed_insert_and_query_w_repeats	src/taf.cc	/^void test_mixed_insert_and_query_w_repeats() {$/;"	f
test_params	external/splinterdb/tests/functional/cache_test.c	/^} test_params;$/;"	t	typeref:struct:__anon54	file:
test_parse_args	external/splinterdb/tests/functional/test.h	/^test_parse_args(trunk_config           *splinter_cfg,$/;"	f
test_parse_args_n	external/splinterdb/tests/functional/test.h	/^test_parse_args_n(trunk_config           *splinter_cfg,  \/\/ OUT$/;"	f
test_period_complete	external/splinterdb/tests/functional/test.h	/^test_period_complete(uint64 idx, uint64 period)$/;"	f
test_platform_assert	external/splinterdb/tests/unit/misc_test.c	39;"	d	file:
test_platform_assert_msg	external/splinterdb/tests/unit/misc_test.c	/^test_platform_assert_msg(platform_log_handle *log_handle,$/;"	f	file:
test_range	external/splinterdb/tests/functional/test.h	/^test_range(uint64 idx, uint64 range_min, uint64 range_max)$/;"	f
test_rank_select_multi_block_1	other_filters/taf/src/rsqf.c	/^void test_rank_select_multi_block_1() {$/;"	f
test_rank_select_multi_block_2	other_filters/taf/src/rsqf.c	/^void test_rank_select_multi_block_2() {$/;"	f
test_rank_select_single_block_empty	other_filters/taf/src/rsqf.c	/^void test_rank_select_single_block_empty() {$/;"	f
test_rank_select_single_block_singleton	other_filters/taf/src/rsqf.c	/^void test_rank_select_single_block_singleton() {$/;"	f
test_rank_select_single_block_two_runs	other_filters/taf/src/rsqf.c	/^void test_rank_select_single_block_two_runs() {$/;"	f
test_raw_insert_1	other_filters/taf/src/exaf.c	/^void test_raw_insert_1() {$/;"	f
test_raw_insert_1	other_filters/taf/src/splinter_taf.c	/^void test_raw_insert_1() {$/;"	f
test_raw_insert_1	other_filters/taf/src/taf.c	/^void test_raw_insert_1() {$/;"	f
test_raw_insert_1	other_filters/taf/src/taf.cc	/^void test_raw_insert_1() {$/;"	f
test_raw_insert_1	src/taf.cc	/^void test_raw_insert_1() {$/;"	f
test_raw_insert_extend	other_filters/taf/src/rsqf.c	/^void test_raw_insert_extend() {$/;"	f
test_raw_insert_new_run	other_filters/taf/src/rsqf.c	/^void test_raw_insert_new_run() {$/;"	f
test_raw_insert_overlapping_run	other_filters/taf/src/rsqf.c	/^void test_raw_insert_overlapping_run() {$/;"	f
test_raw_insert_zero_offset	other_filters/taf/src/rsqf.c	/^void test_raw_insert_zero_offset() {$/;"	f
test_raw_lookup_1	other_filters/taf/src/exaf.c	/^void test_raw_lookup_1() {$/;"	f
test_raw_lookup_1	other_filters/taf/src/splinter_taf.c	/^void test_raw_lookup_1() {$/;"	f
test_raw_lookup_1	other_filters/taf/src/taf.c	/^void test_raw_lookup_1() {$/;"	f
test_raw_lookup_1	other_filters/taf/src/taf.cc	/^void test_raw_lookup_1() {$/;"	f
test_raw_lookup_1	src/taf.cc	/^void test_raw_lookup_1() {$/;"	f
test_reader_thread	external/splinterdb/tests/functional/cache_test.c	/^test_reader_thread(void *arg)$/;"	f
test_results_t	include/test_driver.h	/^} typedef test_results_t;$/;"	t
test_select_runend_empty_filter	other_filters/taf/src/rsqf.c	/^void test_select_runend_empty_filter() {$/;"	f
test_select_runend_mult_blocks_spanning_run	other_filters/taf/src/rsqf.c	/^void test_select_runend_mult_blocks_spanning_run() {$/;"	f
test_select_runend_mult_blocks_two_runs	other_filters/taf/src/rsqf.c	/^void test_select_runend_mult_blocks_two_runs() {$/;"	f
test_select_runend_mult_runs	other_filters/taf/src/rsqf.c	/^void test_select_runend_mult_runs() {$/;"	f
test_select_runend_one_run	other_filters/taf/src/rsqf.c	/^void test_select_runend_one_run() {$/;"	f
test_set_done	external/splinterdb/tests/functional/splinter_test.c	/^test_set_done(uint8 *done, const uint8 n)$/;"	f	file:
test_set_values	other_filters/taf/src/set.c	/^static int test_set_values() {$/;"	f	file:
test_set_values	src/taf.cc	/^static int test_set_values() {$/;"	f	file:
test_shift_exts_multi_block	other_filters/taf/src/exaf.c	/^void test_shift_exts_multi_block() {$/;"	f
test_shift_exts_single_block	other_filters/taf/src/exaf.c	/^void test_shift_exts_single_block() {$/;"	f
test_shift_remote_elts	other_filters/taf/src/exaf.c	/^void test_shift_remote_elts() {$/;"	f
test_shift_remote_elts	other_filters/taf/src/splinter_taf.c	/^void test_shift_remote_elts() {$/;"	f
test_shift_remote_elts	other_filters/taf/src/taf.c	/^void test_shift_remote_elts() {$/;"	f
test_shift_remote_elts	other_filters/taf/src/taf.cc	/^void test_shift_remote_elts() {$/;"	f
test_shift_remote_elts	other_filters/taf/src/utaf.c	/^void test_shift_remote_elts() {$/;"	f
test_shift_remote_elts	src/taf.cc	/^void test_shift_remote_elts() {$/;"	f
test_shift_rems_and_runends	other_filters/taf/src/rsqf.c	/^void test_shift_rems_and_runends() {$/;"	f
test_shift_sels_multi_block	other_filters/taf/src/splinter_taf.c	/^void test_shift_sels_multi_block() {$/;"	f
test_shift_sels_multi_block	other_filters/taf/src/taf.c	/^void test_shift_sels_multi_block() {$/;"	f
test_shift_sels_multi_block	other_filters/taf/src/taf.cc	/^void test_shift_sels_multi_block() {$/;"	f
test_shift_sels_multi_block	other_filters/taf/src/utaf.c	/^void test_shift_sels_multi_block() {$/;"	f
test_shift_sels_multi_block	src/taf.cc	/^void test_shift_sels_multi_block() {$/;"	f
test_shift_sels_single_block	other_filters/taf/src/splinter_taf.c	/^void test_shift_sels_single_block() {$/;"	f
test_shift_sels_single_block	other_filters/taf/src/taf.c	/^void test_shift_sels_single_block() {$/;"	f
test_shift_sels_single_block	other_filters/taf/src/taf.cc	/^void test_shift_sels_single_block() {$/;"	f
test_shift_sels_single_block	other_filters/taf/src/utaf.c	/^void test_shift_sels_single_block() {$/;"	f
test_shift_sels_single_block	src/taf.cc	/^void test_shift_sels_single_block() {$/;"	f
test_shortest_diff_ext	other_filters/taf/src/exaf.c	/^void test_shortest_diff_ext() {$/;"	f
test_show_verbose_progress	external/splinterdb/tests/test_common.h	/^test_show_verbose_progress(test_exec_config *test_exec_cfg)$/;"	f
test_splinter_adversarial	other_filters/taf/src/splinter_taf.c	/^void test_splinter_adversarial(int qbits, uint64_t num_queries, char **argv, int argc) {$/;"	f
test_splinter_bsearch	external/splinterdb/tests/unit/splinter_test.c	/^test_splinter_bsearch(trunk_shadow *shadow, key needle)$/;"	f	file:
test_splinter_build_shadow_array	external/splinterdb/tests/functional/test_splinter_shadow.c	/^test_splinter_build_shadow_array(test_splinter_shadow_tree  *tree,$/;"	f
test_splinter_delete	external/splinterdb/tests/functional/splinter_test.c	/^test_splinter_delete(trunk_config    *cfg,$/;"	f
test_splinter_ops	other_filters/taf/src/splinter_taf.c	/^void test_splinter_ops() {$/;"	f
test_splinter_parallel_perf	external/splinterdb/tests/functional/splinter_test.c	/^test_splinter_parallel_perf(trunk_config    *cfg,$/;"	f
test_splinter_perf	external/splinterdb/tests/functional/splinter_test.c	/^test_splinter_perf(trunk_config    *cfg,$/;"	f	file:
test_splinter_periodic	external/splinterdb/tests/functional/splinter_test.c	/^test_splinter_periodic(trunk_config    *cfg,$/;"	f
test_splinter_pthread_op_type	external/splinterdb/tests/functional/splinter_test.c	/^typedef enum test_splinter_pthread_op_type {$/;"	g	file:
test_splinter_pthread_op_type	external/splinterdb/tests/functional/splinter_test.c	/^} test_splinter_pthread_op_type;$/;"	t	typeref:enum:test_splinter_pthread_op_type	file:
test_splinter_shadow_add	external/splinterdb/tests/functional/test_splinter_shadow.c	/^test_splinter_shadow_add(test_splinter_shadow_tree *tree,$/;"	f
test_splinter_shadow_array	external/splinterdb/tests/functional/test_splinter_shadow.h	/^typedef struct test_splinter_shadow_array {$/;"	s
test_splinter_shadow_array	external/splinterdb/tests/functional/test_splinter_shadow.h	/^} test_splinter_shadow_array;$/;"	t	typeref:struct:test_splinter_shadow_array
test_splinter_shadow_cmp_keys	external/splinterdb/tests/functional/test_splinter_shadow.c	/^test_splinter_shadow_cmp_keys(const AvlTreeLinks *k1, const AvlTreeLinks *k2)$/;"	f	file:
test_splinter_shadow_cmp_node	external/splinterdb/tests/functional/test_splinter_shadow.c	/^test_splinter_shadow_cmp_node(const AvlTreeLinks *k1, AvlTreeKey key)$/;"	f	file:
test_splinter_shadow_count	external/splinterdb/tests/functional/test_splinter_shadow.h	/^test_splinter_shadow_count(test_splinter_shadow_tree *tree)$/;"	f
test_splinter_shadow_create	external/splinterdb/tests/functional/test_splinter_shadow.c	/^test_splinter_shadow_create(test_splinter_shadow_tree **tree,$/;"	f
test_splinter_shadow_destroy	external/splinterdb/tests/functional/test_splinter_shadow.c	/^test_splinter_shadow_destroy(platform_heap_id           hid,$/;"	f
test_splinter_shadow_get_node	external/splinterdb/tests/functional/test_splinter_shadow.c	/^test_splinter_shadow_get_node(test_splinter_shadow_tree *tree)$/;"	f	file:
test_splinter_shadow_iterate_tree	external/splinterdb/tests/functional/test_splinter_shadow.c	/^test_splinter_shadow_iterate_tree(AvlTreeLinks               *root,$/;"	f	file:
test_splinter_shadow_lookup	external/splinterdb/tests/functional/test_splinter_shadow.c	/^test_splinter_shadow_lookup(test_splinter_shadow_tree *tree,$/;"	f
test_splinter_shadow_node	external/splinterdb/tests/functional/test_splinter_shadow.h	/^typedef struct test_splinter_shadow_node {$/;"	s
test_splinter_shadow_node	external/splinterdb/tests/functional/test_splinter_shadow.h	/^} test_splinter_shadow_node;$/;"	t	typeref:struct:test_splinter_shadow_node
test_splinter_shadow_tree	external/splinterdb/tests/functional/test_splinter_shadow.h	/^typedef struct test_splinter_shadow_tree {$/;"	s
test_splinter_shadow_tree	external/splinterdb/tests/functional/test_splinter_shadow.h	/^} test_splinter_shadow_tree;$/;"	t	typeref:struct:test_splinter_shadow_tree
test_splinter_thread_params	external/splinterdb/tests/functional/splinter_test.c	/^typedef struct test_splinter_thread_params {$/;"	s	file:
test_splinter_thread_params	external/splinterdb/tests/functional/splinter_test.c	/^} test_splinter_thread_params;$/;"	t	typeref:struct:test_splinter_thread_params	file:
test_splinter_throughput	other_filters/taf/src/splinter_taf.c	/^void test_splinter_throughput(int qbits, uint64_t num_queries, uint64_t num_inc_queries) {$/;"	f
test_splinter_throughput	other_filters/taf/src/taf_sim.c	/^void test_splinter_throughput() {$/;"	f
test_splinter_veracity	other_filters/taf/src/splinter_taf.c	/^void test_splinter_veracity() {$/;"	f
test_streqn	external/splinterdb/tests/unit/misc_test.c	/^test_streqn(char *expstr, char *actstr, int caseno)$/;"	f	file:
test_strs_to_exts	other_filters/taf/src/arcd.c	/^void test_strs_to_exts() {$/;"	f
test_strs_to_exts	src/taf.cc	/^void test_strs_to_exts() {$/;"	f
test_struct	src/test_ext_inc_throughput.cc	/^typedef struct test_struct {$/;"	s	file:
test_struct	src/test_ext_inc_throughput.cc	/^} test_struct;$/;"	t	typeref:struct:test_struct	file:
test_struct	src/test_ext_throughput.cc	/^typedef struct test_struct {$/;"	s	file:
test_struct	src/test_ext_throughput.cc	/^} test_struct;$/;"	t	typeref:struct:test_struct	file:
test_struct	src/test_zipf_throughput.cc	/^typedef struct test_struct {$/;"	s	file:
test_struct	src/test_zipf_throughput.cc	/^} test_struct;$/;"	t	typeref:struct:test_struct	file:
test_swap_exts	other_filters/taf/src/exaf.c	/^void test_swap_exts() {$/;"	f
test_swap_sels	other_filters/taf/src/splinter_taf.c	/^void test_swap_sels() {$/;"	f
test_swap_sels	other_filters/taf/src/taf.c	/^void test_swap_sels() {$/;"	f
test_swap_sels	other_filters/taf/src/taf.cc	/^void test_swap_sels() {$/;"	f
test_swap_sels	src/taf.cc	/^void test_swap_sels() {$/;"	f
test_sync_reads	external/splinterdb/tests/functional/io_apis_test.c	/^test_sync_reads(platform_heap_id    hid,$/;"	f	file:
test_sync_reads_worker	external/splinterdb/tests/functional/io_apis_test.c	/^test_sync_reads_worker(void *arg)$/;"	f
test_sync_write_reads_by_threads	external/splinterdb/tests/functional/io_apis_test.c	/^test_sync_write_reads_by_threads(io_test_fn_args *io_test_param,$/;"	f	file:
test_sync_writes	external/splinterdb/tests/functional/io_apis_test.c	/^test_sync_writes(platform_heap_id    hid,$/;"	f	file:
test_sync_writes_worker	external/splinterdb/tests/functional/io_apis_test.c	/^test_sync_writes_worker(void *arg)$/;"	f
test_template	other_filters/taf/src/exaf.c	/^void test_template() {$/;"	f
test_template	other_filters/taf/src/rsqf.c	/^void test_template() {$/;"	f
test_template	other_filters/taf/src/splinter_taf.c	/^void test_template() {$/;"	f
test_template	other_filters/taf/src/taf.c	/^void test_template() {$/;"	f
test_template	other_filters/taf/src/taf.cc	/^void test_template() {$/;"	f
test_template	src/taf.cc	/^void test_template() {$/;"	f
test_trunk_create_tables	external/splinterdb/tests/functional/splinter_test.c	/^test_trunk_create_tables(trunk_handle  ***spl_handles,$/;"	f	file:
test_trunk_destroy_tables	external/splinterdb/tests/functional/splinter_test.c	/^test_trunk_destroy_tables(trunk_handle   **spl_tables,$/;"	f	file:
test_trunk_insert_lookup_thread	external/splinterdb/tests/functional/splinter_test.c	/^test_trunk_insert_lookup_thread(void *arg)$/;"	f
test_trunk_insert_thread	external/splinterdb/tests/functional/splinter_test.c	/^test_trunk_insert_thread(void *arg)$/;"	f
test_trunk_lookup_thread	external/splinterdb/tests/functional/splinter_test.c	/^test_trunk_lookup_thread(void *arg)$/;"	f
test_trunk_range_thread	external/splinterdb/tests/functional/splinter_test.c	/^test_trunk_range_thread(void *arg)$/;"	f
test_trunk_thread_hdlr	external/splinterdb/tests/functional/splinter_test.c	/^typedef void (*test_trunk_thread_hdlr)(void *arg);$/;"	t	file:
test_two_step_iterator	external/splinterdb/tests/unit/splinterdb_quick_test.c	/^test_two_step_iterator(splinterdb *kvsb,$/;"	f	file:
test_type	external/splinterdb/tests/functional/splinter_test.h	/^typedef enum test_type {$/;"	g
test_type	external/splinterdb/tests/functional/splinter_test.h	/^} test_type;$/;"	t	typeref:enum:test_type
test_vfprintf_usermsg	external/splinterdb/tests/unit/misc_test.c	/^test_vfprintf_usermsg(platform_log_handle *log_handle, const char *message, ...)$/;"	f	file:
test_wait_for_inflight	external/splinterdb/tests/test_common.c	/^test_wait_for_inflight(trunk_handle      *spl,$/;"	f
test_wait_inflight	external/splinterdb/tests/functional/cache_test.c	/^test_wait_inflight(test_params *params,$/;"	f	file:
test_writer_thread	external/splinterdb/tests/functional/cache_test.c	/^test_writer_thread(void *arg)$/;"	f
testcase_filter	external/splinterdb/tests/unit/main.c	/^testcase_filter(struct ctest *t)$/;"	f	file:
testcase_name	external/splinterdb/tests/unit/main.c	/^static const char *testcase_name = NULL;$/;"	v	file:
this_thread_id	external/splinterdb/tests/unit/splinter_shmem_test.c	/^   platform_thread this_thread_id; \/\/ OS-generated thread ID$/;"	m	struct:__anon67	file:
this_thread_id	external/splinterdb/tests/unit/task_system_test.c	/^   platform_thread this_thread_id; \/\/ OS-generated thread ID$/;"	m	struct:__anon64	file:
thread	external/splinterdb/tests/functional/btree_test.c	/^   platform_thread        thread;$/;"	m	struct:test_btree_thread_params	file:
thread	external/splinterdb/tests/functional/cache_test.c	/^   platform_thread    thread;                  \/\/ IN$/;"	m	struct:__anon54	file:
thread	external/splinterdb/tests/functional/io_apis_test.c	/^   platform_thread     thread;$/;"	m	struct:io_test_fn_args	file:
thread	external/splinterdb/tests/functional/log_test.c	/^   platform_thread         thread;$/;"	m	struct:test_log_thread_params	file:
thread	external/splinterdb/tests/functional/splinter_test.c	/^   platform_thread    thread;$/;"	m	struct:test_splinter_thread_params	file:
thread	external/splinterdb/tests/functional/ycsb_test.c	/^   platform_thread thread;$/;"	m	struct:ycsb_log_params	file:
thread_config	external/splinterdb/tests/unit/splinter_shmem_test.c	/^} thread_config;$/;"	t	typeref:struct:__anon67	file:
thread_config	external/splinterdb/tests/unit/task_system_test.c	/^} thread_config;$/;"	t	typeref:struct:__anon64	file:
thread_config_lockstep	external/splinterdb/tests/unit/task_system_test.c	/^} thread_config_lockstep;$/;"	t	typeref:struct:__anon65	file:
thread_count	external/splinterdb/src/platform_linux/laio.h	/^   uint64       thread_count;$/;"	m	struct:io_process_context
thread_data	external/splinterdb/src/shard_log.h	/^   shard_log_thread_data thread_data[MAX_THREADS];$/;"	m	struct:shard_log
thread_id	external/splinterdb/tests/functional/btree_test.c	/^   uint64                 thread_id;$/;"	m	struct:test_btree_thread_params	file:
thread_id	external/splinterdb/tests/functional/log_test.c	/^   int                     thread_id;$/;"	m	struct:test_log_thread_params	file:
thread_insert_args	other_filters/cqf/src/test_parallel.c	/^} thread_insert_args;$/;"	t	typeref:struct:__anon1	file:
thread_insert_args	src/test_driver.c	/^} thread_insert_args;$/;"	t	typeref:struct:__anon8	file:
thread_insert_keys	other_filters/cqf/src/test_parallel.c	/^void *thread_insert_keys(void *args) {$/;"	f
thread_insert_keys	src/test_driver.c	/^void *thread_insert_keys(void *args) {$/;"	f
thread_invoke	external/splinterdb/src/task.c	/^} thread_invoke;$/;"	t	typeref:struct:__anon10	file:
thread_number	external/splinterdb/tests/functional/splinter_test.c	/^   uint64             thread_number;$/;"	m	struct:test_splinter_thread_params	file:
thread_routine	other_filters/cqf/src/test_partitioned_counter.c	/^void *thread_routine(void *arg) {$/;"	f
thread_routine	src/test_partitioned_counter.c	/^void *thread_routine(void *arg) {$/;"	f
thread_scratch	external/splinterdb/src/task.h	/^   void    *thread_scratch[MAX_THREADS];$/;"	m	struct:task_system
thread_splinter_insert_keys	src/test_driver.c	/^void *thread_splinter_insert_keys(void *args) {$/;"	f
threadid	external/splinterdb/include/splinterdb/platform_linux/public_platform.h	/^typedef uint64        threadid;$/;"	t
threads	external/splinterdb/src/task.h	/^   platform_thread threads[MAX_THREADS];$/;"	m	struct:task_bg_thread_group
threads_complete	external/splinterdb/tests/functional/ycsb_test.c	/^   uint64 *threads_complete;$/;"	m	struct:ycsb_log_params	file:
threads_work_complete	external/splinterdb/tests/functional/ycsb_test.c	/^   uint64 *threads_work_complete;$/;"	m	struct:ycsb_log_params	file:
threshold	include/partitioned_counter.h	/^	int32_t threshold;$/;"	m	struct:partitioned_counter
threshold	other_filters/cqf/include/partitioned_counter.h	/^	int32_t threshold;$/;"	m	struct:partitioned_counter
throughput	external/splinterdb/scripts/run_ycsb.py	/^                    throughput = float(stats_lines[5].split()[1])$/;"	v
tid	external/splinterdb/src/task.c	/^   threadid         tid;$/;"	m	struct:__anon10	file:
tid_bitmask	external/splinterdb/src/task.h	/^   uint64 tid_bitmask;$/;"	m	struct:task_system
tight_inserts	src/gqf.c	/^int tight_inserts = 0;$/;"	v
tight_inserts	src/gqf_backup.c	/^int tight_inserts = 0;$/;"	v
time	external/splinterdb/scripts/run_ycsb.py	/^import time$/;"	i
time_elapsed	external/splinterdb/tests/functional/btree_test.c	/^   uint64                 time_elapsed;$/;"	m	struct:test_btree_thread_params	file:
times	external/splinterdb/tests/functional/ycsb_test.c	/^   running_times    times;$/;"	m	struct:ycsb_phase	file:
times	external/splinterdb/tests/functional/ycsb_test.c	/^   running_times  times;$/;"	m	struct:ycsb_log_params	file:
timestamp	external/splinterdb/include/splinterdb/platform_linux/public_platform.h	/^typedef uint64        timestamp;$/;"	t
timestamp	external/splinterdb/src/trunk.c	/^   uint64      timestamp;$/;"	m	struct:trunk_super_block	file:
toggleAccordion	external/splinterdb/docs/site/themes/template/assets/js/main.js	/^function toggleAccordion(el) {$/;"	f
toggleAriaAttribute	external/splinterdb/docs/site/themes/template/assets/js/main.js	/^function toggleAriaAttribute(el) {$/;"	f
token_str	external/splinterdb/src/platform_linux/platform.h	/^   char *token_str;$/;"	m	struct:__anon27
total	external/splinterdb/src/platform_linux/platform_types.h	/^   long          min, max, total;$/;"	m	struct:__anon33
total_bg_task_executions	external/splinterdb/src/task.h	/^   uint64    total_bg_task_executions;$/;"	m	struct:__anon40
total_bytes	external/splinterdb/src/platform_linux/shmem.c	/^   size_t total_bytes;      \/\/ Total size of shared segment allocated initially.$/;"	m	struct:shminfo_usage_stats	file:
total_fg_task_executions	external/splinterdb/src/task.h	/^   uint64    total_fg_task_executions;$/;"	m	struct:__anon40
total_latency	external/splinterdb/tests/functional/ycsb_test.c	/^total_latency(latency_table table)$/;"	f
total_ops	external/splinterdb/tests/functional/splinter_test.c	/^   uint64            *total_ops;$/;"	m	struct:test_splinter_thread_params	file:
total_ops	external/splinterdb/tests/functional/ycsb_test.c	/^   uint64   total_ops;$/;"	m	struct:ycsb_log_params	file:
total_ops	external/splinterdb/tests/functional/ycsb_test.c	/^   uint64_t         total_ops;$/;"	m	struct:ycsb_phase	file:
total_queue_wait_time_ns	external/splinterdb/src/task.h	/^   uint64    total_queue_wait_time_ns;$/;"	m	struct:__anon40
total_size_in_bytes	include/gqf_int.h	/^		uint64_t total_size_in_bytes;$/;"	m	struct:quotient_filter_metadata
total_size_in_bytes	other_filters/cqf/include/gqf_int.h	/^		uint64_t total_size_in_bytes;$/;"	m	struct:quotient_filter_metadata
total_tasks_enqueued	external/splinterdb/src/task.h	/^   uint64    total_tasks_enqueued;$/;"	m	struct:__anon40
total_threads	external/splinterdb/tests/functional/ycsb_test.c	/^   uint64  total_threads;$/;"	m	struct:ycsb_log_params	file:
total_time_single	include/gqf_int.h	/^		uint64_t total_time_single;$/;"	m	struct:__anon68
total_time_single	other_filters/cqf/include/gqf_int.h	/^		uint64_t total_time_single;$/;"	m	struct:__anon3
total_time_spinning	include/gqf_int.h	/^		uint64_t total_time_spinning;$/;"	m	struct:__anon68
total_time_spinning	other_filters/cqf/include/gqf_int.h	/^		uint64_t total_time_spinning;$/;"	m	struct:__anon3
tq	external/splinterdb/src/task.h	/^   task_queue   tq; \/\/ Queue of tasks in this group, of a task type$/;"	m	struct:task_group
trace_file	external/splinterdb/scripts/run_ycsb.py	/^                trace_file = pathlib.Path(trace_filename)$/;"	v
trace_filename	external/splinterdb/scripts/run_ycsb.py	/^                trace_filename = TRACE_DIR + "\/" + trace_filename$/;"	v
trace_key	external/splinterdb/src/btree.c	/^static char trace_key[24] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,$/;"	v	file:
trace_wait_for_gdb	external/splinterdb/tests/test_common.c	/^trace_wait_for_gdb(void)$/;"	f
trace_wait_for_gdb_hook	external/splinterdb/tests/test_common.c	/^trace_wait_for_gdb_hook(void)$/;"	f
tree	external/splinterdb/tests/functional/avlTree.h	/^   AvlTree      *tree;$/;"	m	struct:__anon60
tree	external/splinterdb/tests/functional/test_splinter_shadow.h	/^   AvlTree                    tree;$/;"	m	struct:test_splinter_shadow_tree
treeLink	external/splinterdb/tests/functional/test_splinter_shadow.h	/^   AvlTreeLinks treeLink;$/;"	m	struct:test_splinter_shadow_node
tree_size	external/splinterdb/tests/functional/splinter_test.h	/^   uint64        tree_size;$/;"	m	struct:test_config
trunk_add_branch_number	external/splinterdb/src/trunk.c	/^trunk_add_branch_number(trunk_handle *spl, uint16 branch_no, uint16 offset)$/;"	f	file:
trunk_add_bundle_number	external/splinterdb/src/trunk.c	/^trunk_add_bundle_number(trunk_handle *spl, uint16 start, uint16 end)$/;"	f	file:
trunk_add_pivot	external/splinterdb/src/trunk.c	/^trunk_add_pivot(trunk_handle *spl,$/;"	f
trunk_add_pivot_new_root	external/splinterdb/src/trunk.c	/^trunk_add_pivot_new_root(trunk_handle *spl,$/;"	f
trunk_add_subbundle_filter_number	external/splinterdb/src/trunk.c	/^trunk_add_subbundle_filter_number(trunk_handle *spl, uint16 start, uint16 end)$/;"	f	file:
trunk_add_subbundle_number	external/splinterdb/src/trunk.c	/^trunk_add_subbundle_number(trunk_handle *spl, uint16 start, uint16 end)$/;"	f	file:
trunk_alloc	external/splinterdb/src/trunk.c	/^trunk_alloc(cache *cc, mini_allocator *mini, uint64 height, trunk_node *node)$/;"	f	file:
trunk_async_callback	external/splinterdb/src/trunk.c	/^trunk_async_callback(cache_async_ctxt *cache_ctxt)$/;"	f	file:
trunk_async_cb	external/splinterdb/src/trunk.h	/^typedef void (*trunk_async_cb)(struct trunk_async_ctxt *ctxt);$/;"	t
trunk_async_ctxt	external/splinterdb/src/trunk.h	/^typedef struct trunk_async_ctxt {$/;"	s
trunk_async_ctxt	external/splinterdb/src/trunk.h	/^} trunk_async_ctxt;$/;"	t	typeref:struct:trunk_async_ctxt
trunk_async_ctxt_init	external/splinterdb/src/trunk.h	/^trunk_async_ctxt_init(trunk_async_ctxt *ctxt, trunk_async_cb cb)$/;"	f
trunk_async_lookup_state	external/splinterdb/src/trunk.h	/^} trunk_async_lookup_state;$/;"	t	typeref:enum:__anon20
trunk_async_set_state	external/splinterdb/src/trunk.c	/^trunk_async_set_state(trunk_async_ctxt *ctxt, trunk_async_state new_state)$/;"	f	file:
trunk_async_state	external/splinterdb/src/trunk.h	/^} trunk_async_state;$/;"	t	typeref:enum:__anon19
trunk_branch	external/splinterdb/src/trunk.h	/^typedef struct trunk_branch {$/;"	s
trunk_branch	external/splinterdb/src/trunk.h	/^} trunk_branch;$/;"	t	typeref:struct:trunk_branch
trunk_branch_count	external/splinterdb/src/trunk.c	/^trunk_branch_count(trunk_handle *spl, trunk_node *node)$/;"	f	file:
trunk_branch_count_num_tuples	external/splinterdb/src/trunk.c	/^trunk_branch_count_num_tuples(trunk_handle *spl,$/;"	f
trunk_branch_in_range	external/splinterdb/src/trunk.c	/^trunk_branch_in_range(trunk_handle *spl,$/;"	f	file:
trunk_branch_is_whole	external/splinterdb/src/trunk.c	/^trunk_branch_is_whole(trunk_handle *spl, trunk_node *node, uint64 branch_no)$/;"	f	file:
trunk_branch_iterator_deinit	external/splinterdb/src/trunk.c	/^trunk_branch_iterator_deinit(trunk_handle   *spl,$/;"	f
trunk_branch_iterator_init	external/splinterdb/src/trunk.c	/^trunk_branch_iterator_init(trunk_handle   *spl,$/;"	f
trunk_branch_live	external/splinterdb/src/trunk.c	/^trunk_branch_live(trunk_handle *spl, trunk_node *node, uint64 branch_no)$/;"	f	file:
trunk_branch_live_for_pivot	external/splinterdb/src/trunk.c	/^trunk_branch_live_for_pivot(trunk_handle *spl,$/;"	f	file:
trunk_branch_no	external/splinterdb/src/trunk.c	/^trunk_branch_no(trunk_handle *spl, trunk_node *node, trunk_branch *branch)$/;"	f	file:
trunk_branch_valid	external/splinterdb/src/trunk.c	/^trunk_branch_valid(trunk_handle *spl, trunk_node *node, uint64 branch_no)$/;"	f	file:
trunk_btree_async_callback	external/splinterdb/src/trunk.c	/^trunk_btree_async_callback(btree_async_ctxt *btree_ctxt)$/;"	f	file:
trunk_btree_config	external/splinterdb/src/trunk.c	/^trunk_btree_config(trunk_handle *spl)$/;"	f	file:
trunk_btree_lookup_and_merge	external/splinterdb/src/trunk.c	/^trunk_btree_lookup_and_merge(trunk_handle      *spl,$/;"	f	file:
trunk_btree_lookup_and_merge_async	external/splinterdb/src/trunk.c	/^trunk_btree_lookup_and_merge_async(trunk_handle      *spl,    \/\/ IN$/;"	f	file:
trunk_btree_pack_req_init	external/splinterdb/src/trunk.c	/^trunk_btree_pack_req_init(trunk_handle   *spl,$/;"	f	file:
trunk_btree_skiperator	external/splinterdb/src/trunk.c	/^typedef struct trunk_btree_skiperator {$/;"	s	file:
trunk_btree_skiperator	external/splinterdb/src/trunk.c	/^} trunk_btree_skiperator;$/;"	t	typeref:struct:trunk_btree_skiperator	file:
trunk_btree_skiperator_can_next	external/splinterdb/src/trunk.c	/^trunk_btree_skiperator_can_next(iterator *itor)$/;"	f
trunk_btree_skiperator_can_prev	external/splinterdb/src/trunk.c	/^trunk_btree_skiperator_can_prev(iterator *itor)$/;"	f
trunk_btree_skiperator_curr	external/splinterdb/src/trunk.c	/^trunk_btree_skiperator_curr(iterator *itor, key *curr_key, message *data)$/;"	f
trunk_btree_skiperator_deinit	external/splinterdb/src/trunk.c	/^trunk_btree_skiperator_deinit(trunk_handle           *spl,$/;"	f
trunk_btree_skiperator_init	external/splinterdb/src/trunk.c	/^trunk_btree_skiperator_init(trunk_handle           *spl,$/;"	f	file:
trunk_btree_skiperator_next	external/splinterdb/src/trunk.c	/^trunk_btree_skiperator_next(iterator *itor)$/;"	f
trunk_btree_skiperator_ops	external/splinterdb/src/trunk.c	/^const static iterator_ops trunk_btree_skiperator_ops = {$/;"	v	file:
trunk_btree_skiperator_print	external/splinterdb/src/trunk.c	/^trunk_btree_skiperator_print(iterator *itor)$/;"	f
trunk_build_filter_should_abort	external/splinterdb/src/trunk.c	/^trunk_build_filter_should_abort(trunk_compact_bundle_req *req, trunk_node *node)$/;"	f	file:
trunk_build_filter_should_reenqueue	external/splinterdb/src/trunk.c	/^trunk_build_filter_should_reenqueue(trunk_compact_bundle_req *req,$/;"	f	file:
trunk_build_filter_should_skip	external/splinterdb/src/trunk.c	/^trunk_build_filter_should_skip(trunk_compact_bundle_req *req, trunk_node *node)$/;"	f	file:
trunk_build_filters	external/splinterdb/src/trunk.c	/^trunk_build_filters(trunk_handle             *spl,$/;"	f	file:
trunk_bundle	external/splinterdb/src/trunk.c	/^typedef struct ONDISK trunk_bundle {$/;"	s	file:
trunk_bundle	external/splinterdb/src/trunk.c	/^} trunk_bundle;$/;"	t	typeref:struct:trunk_bundle	file:
trunk_bundle_branch_count	external/splinterdb/src/trunk.c	/^trunk_bundle_branch_count(trunk_handle *spl,$/;"	f	file:
trunk_bundle_build_filters	external/splinterdb/src/trunk.c	/^trunk_bundle_build_filters(void *arg, void *scratch)$/;"	f
trunk_bundle_clear_subbundles	external/splinterdb/src/trunk.c	/^trunk_bundle_clear_subbundles(trunk_handle *spl,$/;"	f	file:
trunk_bundle_count	external/splinterdb/src/trunk.c	/^trunk_bundle_count(trunk_handle *spl, trunk_node *node)$/;"	f	file:
trunk_bundle_end_branch	external/splinterdb/src/trunk.c	/^trunk_bundle_end_branch(trunk_handle *spl,$/;"	f	file:
trunk_bundle_end_filter	external/splinterdb/src/trunk.c	/^trunk_bundle_end_filter(trunk_handle *spl,$/;"	f	file:
trunk_bundle_filter_count	external/splinterdb/src/trunk.c	/^trunk_bundle_filter_count(trunk_handle *spl,$/;"	f	file:
trunk_bundle_in_range	external/splinterdb/src/trunk.c	/^trunk_bundle_in_range(trunk_handle *spl,$/;"	f	file:
trunk_bundle_inc_pivot_rc	external/splinterdb/src/trunk.c	/^trunk_bundle_inc_pivot_rc(trunk_handle *spl,$/;"	f	file:
trunk_bundle_live	external/splinterdb/src/trunk.c	/^trunk_bundle_live(trunk_handle *spl, trunk_node *node, uint16 bundle_no)$/;"	f	file:
trunk_bundle_live_for_pivot	external/splinterdb/src/trunk.c	/^trunk_bundle_live_for_pivot(trunk_handle *spl,$/;"	f	file:
trunk_bundle_lookup	external/splinterdb/src/trunk.c	/^trunk_bundle_lookup(trunk_handle      *spl,$/;"	f
trunk_bundle_start_branch	external/splinterdb/src/trunk.c	/^trunk_bundle_start_branch(trunk_handle *spl,$/;"	f	file:
trunk_bundle_start_filter	external/splinterdb/src/trunk.c	/^trunk_bundle_start_filter(trunk_handle *spl,$/;"	f	file:
trunk_bundle_subbundle_count	external/splinterdb/src/trunk.c	/^trunk_bundle_subbundle_count(trunk_handle *spl,$/;"	f	file:
trunk_bundle_valid	external/splinterdb/src/trunk.c	/^trunk_bundle_valid(trunk_handle *spl, trunk_node *node, uint16 bundle_no)$/;"	f	file:
trunk_cfg	external/splinterdb/src/splinterdb.c	/^   trunk_config       trunk_cfg;$/;"	m	struct:splinterdb	file:
trunk_claim_and_copy_root	external/splinterdb/src/trunk.c	/^trunk_claim_and_copy_root(trunk_handle *spl,      \/\/ IN$/;"	f
trunk_clear_bundle	external/splinterdb/src/trunk.c	/^trunk_clear_bundle(trunk_handle *spl, trunk_node *node, uint16 bundle_no)$/;"	f	file:
trunk_close_log_stream_if_enabled	external/splinterdb/src/trunk.c	/^trunk_close_log_stream_if_enabled(trunk_handle           *spl,$/;"	f	file:
trunk_compact_bundle	external/splinterdb/src/trunk.c	/^trunk_compact_bundle(void *arg, void *scratch_buf)$/;"	f
trunk_compact_bundle_cleanup_iterators	external/splinterdb/src/trunk.c	/^trunk_compact_bundle_cleanup_iterators(trunk_handle           *spl,$/;"	f	file:
trunk_compact_bundle_enqueue	external/splinterdb/src/trunk.c	/^trunk_compact_bundle_enqueue(trunk_handle             *spl,$/;"	f	file:
trunk_compact_bundle_node_copy_path	external/splinterdb/src/trunk.c	/^trunk_compact_bundle_node_copy_path(trunk_handle             *spl,$/;"	f	file:
trunk_compact_bundle_node_get	external/splinterdb/src/trunk.c	/^trunk_compact_bundle_node_get(trunk_handle             *spl,$/;"	f	file:
trunk_compact_bundle_node_has_split	external/splinterdb/src/trunk.c	/^trunk_compact_bundle_node_has_split(trunk_handle             *spl,$/;"	f	file:
trunk_compact_bundle_req	external/splinterdb/src/trunk.c	/^struct trunk_compact_bundle_req {$/;"	s	file:
trunk_compact_bundle_req	external/splinterdb/src/trunk.h	/^typedef struct trunk_compact_bundle_req trunk_compact_bundle_req;$/;"	t	typeref:struct:trunk_compact_bundle_req
trunk_compact_leaf	external/splinterdb/src/trunk.c	/^trunk_compact_leaf(trunk_handle *spl, trunk_node *leaf)$/;"	f
trunk_compacted_memtable	external/splinterdb/src/trunk.h	/^typedef struct trunk_compacted_memtable {$/;"	s
trunk_compacted_memtable	external/splinterdb/src/trunk.h	/^} trunk_compacted_memtable;$/;"	t	typeref:struct:trunk_compacted_memtable
trunk_compacted_subbundle_lookup	external/splinterdb/src/trunk.c	/^trunk_compacted_subbundle_lookup(trunk_handle      *spl,$/;"	f
trunk_compaction_type	external/splinterdb/src/trunk.c	/^typedef enum trunk_compaction_type {$/;"	g	file:
trunk_compaction_type	external/splinterdb/src/trunk.c	/^} trunk_compaction_type;$/;"	t	typeref:enum:trunk_compaction_type	file:
trunk_config	external/splinterdb/src/trunk.h	/^typedef struct trunk_config {$/;"	s
trunk_config	external/splinterdb/src/trunk.h	/^} trunk_config;$/;"	t	typeref:struct:trunk_config
trunk_config_init	external/splinterdb/src/trunk.c	/^trunk_config_init(trunk_config        *trunk_cfg,$/;"	f
trunk_copy_node_and_add_to_parent	external/splinterdb/src/trunk.c	/^trunk_copy_node_and_add_to_parent(trunk_handle     *spl,    \/\/ IN$/;"	f	file:
trunk_copy_path_by_key_and_height	external/splinterdb/src/trunk.c	/^trunk_copy_path_by_key_and_height(trunk_handle *spl,      \/\/ IN$/;"	f
trunk_create	external/splinterdb/src/trunk.c	/^trunk_create(trunk_config     *cfg,$/;"	f
trunk_data_config	external/splinterdb/src/trunk.c	/^trunk_data_config(trunk_handle *spl)$/;"	f	file:
trunk_dec_filter	external/splinterdb/src/trunk.c	/^trunk_dec_filter(trunk_handle *spl, routing_filter *filter)$/;"	f	file:
trunk_dec_ref	external/splinterdb/src/trunk.c	/^trunk_dec_ref(trunk_handle *spl, trunk_branch *branch, bool32 is_memtable)$/;"	f	file:
trunk_default_log_if_enabled	external/splinterdb/src/trunk.c	157;"	d	file:
trunk_destroy	external/splinterdb/src/trunk.c	/^trunk_destroy(trunk_handle *spl)$/;"	f
trunk_end_branch	external/splinterdb/src/trunk.c	/^trunk_end_branch(trunk_handle *spl, trunk_node *node)$/;"	f	file:
trunk_end_bundle	external/splinterdb/src/trunk.c	/^trunk_end_bundle(trunk_handle *spl, trunk_node *node)$/;"	f	file:
trunk_end_sb_filter	external/splinterdb/src/trunk.c	/^trunk_end_sb_filter(trunk_handle *spl, trunk_node *node)$/;"	f	file:
trunk_end_subbundle	external/splinterdb/src/trunk.c	/^trunk_end_subbundle(trunk_handle *spl, trunk_node *node)$/;"	f	file:
trunk_extent_size	external/splinterdb/src/trunk.c	/^trunk_extent_size(const trunk_config *cfg)$/;"	f	file:
trunk_filter_async_callback	external/splinterdb/src/trunk.c	/^trunk_filter_async_callback(routing_async_ctxt *filter_ctxt)$/;"	f	file:
trunk_filter_lookup	external/splinterdb/src/trunk.c	/^trunk_filter_lookup(trunk_handle      *spl,$/;"	f
trunk_filter_lookup_async	external/splinterdb/src/trunk.c	/^trunk_filter_lookup_async(trunk_handle       *spl,$/;"	f	file:
trunk_filter_scratch	external/splinterdb/src/trunk.c	/^typedef struct trunk_filter_scratch {$/;"	s	file:
trunk_filter_scratch	external/splinterdb/src/trunk.c	/^} trunk_filter_scratch;$/;"	t	typeref:struct:trunk_filter_scratch	file:
trunk_filter_scratch_init	external/splinterdb/src/trunk.c	/^trunk_filter_scratch_init(trunk_compact_bundle_req *compact_req,$/;"	f	file:
trunk_find_pivot	external/splinterdb/src/trunk.c	/^trunk_find_pivot(trunk_handle *spl,$/;"	f	file:
trunk_find_pivot_from_generation	external/splinterdb/src/trunk.c	/^trunk_find_pivot_from_generation(trunk_handle *spl,$/;"	f
trunk_flush	external/splinterdb/src/trunk.c	/^trunk_flush(trunk_handle     *spl,$/;"	f
trunk_flush_fullest	external/splinterdb/src/trunk.c	/^trunk_flush_fullest(trunk_handle *spl, trunk_node *node)$/;"	f
trunk_flush_into_bundle	external/splinterdb/src/trunk.c	/^trunk_flush_into_bundle(trunk_handle             *spl,    \/\/ IN$/;"	f
trunk_for_each_node	external/splinterdb/src/trunk.c	/^trunk_for_each_node(trunk_handle *spl, node_fn func, void *arg)$/;"	f
trunk_for_each_subtree	external/splinterdb/src/trunk.c	/^trunk_for_each_subtree(trunk_handle *spl, uint64 addr, node_fn func, void *arg)$/;"	f
trunk_garbage_collect_bundle	external/splinterdb/src/trunk.c	/^trunk_garbage_collect_bundle(trunk_handle             *spl,$/;"	f	file:
trunk_garbage_collect_filters	external/splinterdb/src/trunk.c	/^trunk_garbage_collect_filters(trunk_handle             *spl,$/;"	f	file:
trunk_garbage_collect_node_get	external/splinterdb/src/trunk.c	/^trunk_garbage_collect_node_get(trunk_handle             *spl,$/;"	f	file:
trunk_get_branch	external/splinterdb/src/trunk.c	/^trunk_get_branch(trunk_handle *spl, trunk_node *node, uint32 k)$/;"	f	file:
trunk_get_bundle	external/splinterdb/src/trunk.c	/^trunk_get_bundle(trunk_handle *spl, trunk_node *node, uint16 bundle_no)$/;"	f	file:
trunk_get_compacted_memtable	external/splinterdb/src/trunk.c	/^trunk_get_compacted_memtable(trunk_handle *spl, uint64 generation)$/;"	f
trunk_get_memtable	external/splinterdb/src/trunk.c	/^trunk_get_memtable(trunk_handle *spl, uint64 generation)$/;"	f
trunk_get_new_branch	external/splinterdb/src/trunk.c	/^trunk_get_new_branch(trunk_handle *spl, trunk_node *node)$/;"	f	file:
trunk_get_new_bundle	external/splinterdb/src/trunk.c	/^trunk_get_new_bundle(trunk_handle *spl, trunk_node *node)$/;"	f	file:
trunk_get_new_subbundle	external/splinterdb/src/trunk.c	/^trunk_get_new_subbundle(trunk_handle *spl, trunk_node *node, uint16 num_filters)$/;"	f	file:
trunk_get_pivot	external/splinterdb/src/trunk.c	/^trunk_get_pivot(trunk_handle *spl, trunk_node *node, uint16 pivot_no)$/;"	f	file:
trunk_get_pivot_data	external/splinterdb/src/trunk.c	/^trunk_get_pivot_data(trunk_handle *spl, trunk_node *node, uint16 pivot_no)$/;"	f	file:
trunk_get_sb_filter	external/splinterdb/src/trunk.c	/^trunk_get_sb_filter(trunk_handle *spl, trunk_node *node, uint16 filter_no)$/;"	f	file:
trunk_get_scratch_size	external/splinterdb/src/trunk.c	/^trunk_get_scratch_size()$/;"	f
trunk_get_subbundle	external/splinterdb/src/trunk.c	/^trunk_get_subbundle(trunk_handle *spl, trunk_node *node, uint16 subbundle_no)$/;"	f	file:
trunk_get_super_block_if_valid	external/splinterdb/src/trunk.c	/^trunk_get_super_block_if_valid(trunk_handle *spl, page_handle **super_page)$/;"	f
trunk_handle	external/splinterdb/src/trunk.h	/^struct trunk_handle {$/;"	s
trunk_handle	external/splinterdb/src/trunk.h	/^typedef struct trunk_handle             trunk_handle;$/;"	t	typeref:struct:trunk_handle
trunk_has_vacancy	external/splinterdb/src/trunk.c	/^trunk_has_vacancy(trunk_handle *spl, trunk_node *node, uint16 num_new_branches)$/;"	f	file:
trunk_hdr	external/splinterdb/src/trunk.c	/^typedef struct ONDISK trunk_hdr {$/;"	s	file:
trunk_hdr	external/splinterdb/src/trunk.c	/^} trunk_hdr;$/;"	t	typeref:struct:trunk_hdr	file:
trunk_hdr	external/splinterdb/src/trunk.h	/^typedef struct trunk_hdr trunk_hdr;$/;"	t	typeref:struct:trunk_hdr
trunk_hdr_size	external/splinterdb/src/trunk.c	/^trunk_hdr_size()$/;"	f
trunk_id	external/splinterdb/src/splinterdb.c	/^   allocator_root_id  trunk_id;$/;"	m	struct:splinterdb	file:
trunk_inc_branch_range	external/splinterdb/src/trunk.c	/^trunk_inc_branch_range(trunk_handle *spl,$/;"	f	file:
trunk_inc_filter	external/splinterdb/src/trunk.c	830;"	d	file:
trunk_inc_filter_ref	external/splinterdb/src/trunk.c	/^trunk_inc_filter_ref(trunk_handle *spl, routing_filter *filter, uint32 lineno)$/;"	f	file:
trunk_inc_intersection	external/splinterdb/src/trunk.c	/^trunk_inc_intersection(trunk_handle *spl,$/;"	f	file:
trunk_inc_num_pivot_keys	external/splinterdb/src/trunk.c	/^trunk_inc_num_pivot_keys(trunk_handle *spl, trunk_node *node)$/;"	f	file:
trunk_inc_pivot_generation	external/splinterdb/src/trunk.c	/^trunk_inc_pivot_generation(trunk_handle *spl, trunk_node *node)$/;"	f	file:
trunk_inc_start_bundle	external/splinterdb/src/trunk.c	/^trunk_inc_start_bundle(trunk_handle *spl, trunk_node *node)$/;"	f	file:
trunk_init_pivot_data_from_pred	external/splinterdb/src/trunk.c	/^trunk_init_pivot_data_from_pred(trunk_handle *spl,$/;"	f	file:
trunk_insert	external/splinterdb/src/trunk.c	/^trunk_insert(trunk_handle *spl, key tuple_key, message data)$/;"	f
trunk_install_new_compacted_subbundle	external/splinterdb/src/trunk.c	/^trunk_install_new_compacted_subbundle(trunk_handle             *spl,$/;"	f	file:
trunk_key_compare	external/splinterdb/src/trunk.h	/^trunk_key_compare(trunk_handle *spl, key key1, key key2)$/;"	f
trunk_key_to_string	external/splinterdb/src/trunk.h	/^trunk_key_to_string(trunk_handle *spl, key key_to_print, char str[static 128])$/;"	f
trunk_leaf_get_new_subbundle_at_head	external/splinterdb/src/trunk.c	/^trunk_leaf_get_new_subbundle_at_head(trunk_handle *spl, trunk_node *node)$/;"	f	file:
trunk_leaf_rebundle_all_branches	external/splinterdb/src/trunk.c	/^trunk_leaf_rebundle_all_branches(trunk_handle *spl,$/;"	f	file:
trunk_leaf_remove_bundles_except	external/splinterdb/src/trunk.c	/^trunk_leaf_remove_bundles_except(trunk_handle *spl,$/;"	f	file:
trunk_log_handle	external/splinterdb/src/trunk.c	/^trunk_log_handle(trunk_handle *spl)$/;"	f	file:
trunk_log_node_if_enabled	external/splinterdb/src/trunk.c	/^trunk_log_node_if_enabled(platform_stream_handle *stream,$/;"	f	file:
trunk_log_stream_if_enabled	external/splinterdb/src/trunk.c	149;"	d	file:
trunk_logical_branch_count	external/splinterdb/src/trunk.c	/^trunk_logical_branch_count(trunk_handle *spl, trunk_node *node)$/;"	f	file:
trunk_lookup	external/splinterdb/src/trunk.c	/^trunk_lookup(trunk_handle *spl, key target, merge_accumulator *result)$/;"	f
trunk_lookup_async	external/splinterdb/src/trunk.c	/^trunk_lookup_async(trunk_handle      *spl,    \/\/ IN$/;"	f
trunk_lookup_found	external/splinterdb/src/trunk.h	/^trunk_lookup_found(merge_accumulator *result)$/;"	f
trunk_max_key	external/splinterdb/src/trunk.c	/^trunk_max_key(trunk_handle *spl, trunk_node *node)$/;"	f	file:
trunk_max_key_size	external/splinterdb/src/trunk.h	/^trunk_max_key_size(trunk_handle *spl)$/;"	f
trunk_maybe_reclaim_space	external/splinterdb/src/trunk.c	/^trunk_maybe_reclaim_space(trunk_handle *spl)$/;"	f
trunk_memtable_args	external/splinterdb/src/trunk.h	/^typedef struct trunk_memtable_args {$/;"	s
trunk_memtable_args	external/splinterdb/src/trunk.h	/^} trunk_memtable_args;$/;"	t	typeref:struct:trunk_memtable_args
trunk_memtable_compact_and_build_filter	external/splinterdb/src/trunk.c	/^trunk_memtable_compact_and_build_filter(trunk_handle  *spl,$/;"	f	file:
trunk_memtable_dec_ref	external/splinterdb/src/trunk.c	/^trunk_memtable_dec_ref(trunk_handle *spl, uint64 generation)$/;"	f
trunk_memtable_flush	external/splinterdb/src/trunk.c	/^trunk_memtable_flush(trunk_handle *spl, uint64 generation)$/;"	f
trunk_memtable_flush_internal	external/splinterdb/src/trunk.c	/^trunk_memtable_flush_internal(trunk_handle *spl, uint64 generation)$/;"	f	file:
trunk_memtable_flush_internal_virtual	external/splinterdb/src/trunk.c	/^trunk_memtable_flush_internal_virtual(void *arg, void *scratch)$/;"	f	file:
trunk_memtable_flush_virtual	external/splinterdb/src/trunk.c	/^trunk_memtable_flush_virtual(void *arg, uint64 generation)$/;"	f
trunk_memtable_inc_ref	external/splinterdb/src/trunk.c	/^trunk_memtable_inc_ref(trunk_handle *spl, uint64 mt_gen)$/;"	f	file:
trunk_memtable_incorporate_and_flush	external/splinterdb/src/trunk.c	/^trunk_memtable_incorporate_and_flush(trunk_handle  *spl,$/;"	f	file:
trunk_memtable_insert	external/splinterdb/src/trunk.c	/^trunk_memtable_insert(trunk_handle *spl, key tuple_key, message msg)$/;"	f
trunk_memtable_iterator_deinit	external/splinterdb/src/trunk.c	/^trunk_memtable_iterator_deinit(trunk_handle   *spl,$/;"	f	file:
trunk_memtable_iterator_init	external/splinterdb/src/trunk.c	/^trunk_memtable_iterator_init(trunk_handle   *spl,$/;"	f	file:
trunk_memtable_lookup	external/splinterdb/src/trunk.c	/^trunk_memtable_lookup(trunk_handle      *spl,$/;"	f	file:
trunk_memtable_root_addr_for_lookup	external/splinterdb/src/trunk.c	/^trunk_memtable_root_addr_for_lookup(trunk_handle *spl,$/;"	f	file:
trunk_message_to_string	external/splinterdb/src/trunk.h	/^trunk_message_to_string(trunk_handle *spl, message msg, char str[static 128])$/;"	f
trunk_min_key	external/splinterdb/src/trunk.c	/^trunk_min_key(trunk_handle *spl, trunk_node *node)$/;"	f	file:
trunk_mount	external/splinterdb/src/trunk.c	/^trunk_mount(trunk_config     *cfg,$/;"	f
trunk_needs_split	external/splinterdb/src/trunk.c	/^trunk_needs_split(trunk_handle *spl, trunk_node *node)$/;"	f	file:
trunk_next_node_id	external/splinterdb/src/trunk.c	/^trunk_next_node_id(trunk_handle *spl)$/;"	f	file:
trunk_node	external/splinterdb/src/trunk.h	/^   trunk_node        trunk_node; \/\/ Current trunk node$/;"	m	struct:trunk_async_ctxt
trunk_node	external/splinterdb/src/trunk.h	/^typedef struct trunk_node {$/;"	s
trunk_node	external/splinterdb/src/trunk.h	/^} trunk_node;$/;"	t	typeref:struct:trunk_node
trunk_node_async_done	external/splinterdb/src/trunk.c	/^trunk_node_async_done(trunk_handle *spl, trunk_async_ctxt *ctxt)$/;"	f	file:
trunk_node_claim	external/splinterdb/src/trunk.c	/^trunk_node_claim(cache *cc, trunk_node *node)$/;"	f	file:
trunk_node_copy	external/splinterdb/src/trunk.c	/^trunk_node_copy(trunk_handle *spl, trunk_node *node, trunk_node *node_copy)$/;"	f	file:
trunk_node_destroy	external/splinterdb/src/trunk.c	/^trunk_node_destroy(trunk_handle *spl, uint64 addr, void *arg)$/;"	f
trunk_node_get	external/splinterdb/src/trunk.c	/^trunk_node_get(cache *cc, uint64 addr, trunk_node *node)$/;"	f	file:
trunk_node_get_async	external/splinterdb/src/trunk.c	/^trunk_node_get_async(cache *cc, uint64 addr, trunk_async_ctxt *ctxt)$/;"	f	file:
trunk_node_get_by_key_and_height	external/splinterdb/src/trunk.c	/^trunk_node_get_by_key_and_height(trunk_handle *spl,    \/\/ IN$/;"	f
trunk_node_get_by_key_and_height_from_root	external/splinterdb/src/trunk.c	/^trunk_node_get_by_key_and_height_from_root(trunk_handle *spl,    \/\/ IN$/;"	f
trunk_node_height	external/splinterdb/src/trunk.c	/^trunk_node_height(trunk_node *node)$/;"	f	file:
trunk_node_is_full	external/splinterdb/src/trunk.c	/^trunk_node_is_full(trunk_handle *spl, trunk_node *node)$/;"	f	file:
trunk_node_is_index	external/splinterdb/src/trunk.c	/^trunk_node_is_index(trunk_node *node)$/;"	f	file:
trunk_node_is_leaf	external/splinterdb/src/trunk.c	/^trunk_node_is_leaf(trunk_node *node)$/;"	f	file:
trunk_node_lock	external/splinterdb/src/trunk.c	/^trunk_node_lock(cache *cc, trunk_node *node)$/;"	f	file:
trunk_node_print_branches	external/splinterdb/src/trunk.c	/^trunk_node_print_branches(trunk_handle *spl, uint64 addr, void *arg)$/;"	f
trunk_node_space_use	external/splinterdb/src/trunk.c	/^trunk_node_space_use(trunk_handle *spl, uint64 addr, void *arg)$/;"	f
trunk_node_unclaim	external/splinterdb/src/trunk.c	/^trunk_node_unclaim(cache *cc, trunk_node *node)$/;"	f	file:
trunk_node_unget	external/splinterdb/src/trunk.c	/^trunk_node_unget(cache *cc, trunk_node *node)$/;"	f	file:
trunk_node_unlock	external/splinterdb/src/trunk.c	/^trunk_node_unlock(cache *cc, trunk_node *node)$/;"	f	file:
trunk_num_children	external/splinterdb/src/trunk.c	/^trunk_num_children(trunk_handle *spl, trunk_node *node)$/;"	f	file:
trunk_num_pivot_keys	external/splinterdb/src/trunk.c	/^trunk_num_pivot_keys(trunk_handle *spl, trunk_node *node)$/;"	f	file:
trunk_open_log_stream_if_enabled	external/splinterdb/src/trunk.c	/^trunk_open_log_stream_if_enabled(trunk_handle           *spl,$/;"	f	file:
trunk_page_size	external/splinterdb/src/trunk.c	/^trunk_page_size(const trunk_config *cfg)$/;"	f	file:
trunk_pages_per_extent	external/splinterdb/src/trunk.c	/^trunk_pages_per_extent(const trunk_config *cfg)$/;"	f	file:
trunk_pdata_to_pivot_index	external/splinterdb/src/trunk.c	/^trunk_pdata_to_pivot_index(trunk_handle     *spl,$/;"	f	file:
trunk_perform_tasks	external/splinterdb/src/trunk.c	/^trunk_perform_tasks(trunk_handle *spl)$/;"	f
trunk_pivot_add_bundle_tuple_counts	external/splinterdb/src/trunk.c	/^trunk_pivot_add_bundle_tuple_counts($/;"	f	file:
trunk_pivot_branch_count	external/splinterdb/src/trunk.c	/^trunk_pivot_branch_count(trunk_handle     *spl,$/;"	f	file:
trunk_pivot_branch_tuple_counts	external/splinterdb/src/trunk.c	/^trunk_pivot_branch_tuple_counts(trunk_handle *spl,$/;"	f	file:
trunk_pivot_btree_tuple_counts	external/splinterdb/src/trunk.c	/^trunk_pivot_btree_tuple_counts(trunk_handle *spl,$/;"	f	file:
trunk_pivot_bundle_count	external/splinterdb/src/trunk.c	/^trunk_pivot_bundle_count(trunk_handle     *spl,$/;"	f	file:
trunk_pivot_clear	external/splinterdb/src/trunk.c	/^trunk_pivot_clear(trunk_handle *spl, trunk_node *node, trunk_pivot_data *pdata)$/;"	f	file:
trunk_pivot_clear_counts	external/splinterdb/src/trunk.c	/^trunk_pivot_clear_counts(trunk_handle *spl, trunk_node *node, uint16 pivot_no)$/;"	f
trunk_pivot_data	external/splinterdb/src/trunk.c	/^typedef struct ONDISK trunk_pivot_data {$/;"	s	file:
trunk_pivot_data	external/splinterdb/src/trunk.c	/^} trunk_pivot_data;$/;"	t	typeref:struct:trunk_pivot_data	file:
trunk_pivot_end_subbundle_for_lookup	external/splinterdb/src/trunk.c	/^trunk_pivot_end_subbundle_for_lookup(trunk_handle     *spl,$/;"	f	file:
trunk_pivot_estimate_unique_keys	external/splinterdb/src/trunk.c	/^trunk_pivot_estimate_unique_keys(trunk_handle     *spl,$/;"	f	file:
trunk_pivot_generation	external/splinterdb/src/trunk.c	/^trunk_pivot_generation(trunk_handle *spl, trunk_node *node)$/;"	f	file:
trunk_pivot_kv_bytes	external/splinterdb/src/trunk.c	/^trunk_pivot_kv_bytes(trunk_handle *spl, trunk_node *node, uint16 pivot_no)$/;"	f	file:
trunk_pivot_kv_bytes_bundle	external/splinterdb/src/trunk.c	/^trunk_pivot_kv_bytes_bundle(trunk_handle *spl,$/;"	f	file:
trunk_pivot_kv_bytes_whole	external/splinterdb/src/trunk.c	/^trunk_pivot_kv_bytes_whole(trunk_handle *spl, trunk_node *node, uint16 pivot_no)$/;"	f	file:
trunk_pivot_logical_branch_count	external/splinterdb/src/trunk.c	/^trunk_pivot_logical_branch_count(trunk_handle     *spl,$/;"	f	file:
trunk_pivot_lookup	external/splinterdb/src/trunk.c	/^trunk_pivot_lookup(trunk_handle      *spl,$/;"	f
trunk_pivot_needs_flush	external/splinterdb/src/trunk.c	/^trunk_pivot_needs_flush(trunk_handle     *spl,$/;"	f	file:
trunk_pivot_num_tuples	external/splinterdb/src/trunk.c	/^trunk_pivot_num_tuples(trunk_handle *spl, trunk_node *node, uint16 pivot_no)$/;"	f	file:
trunk_pivot_num_tuples_bundle	external/splinterdb/src/trunk.c	/^trunk_pivot_num_tuples_bundle(trunk_handle *spl,$/;"	f	file:
trunk_pivot_num_tuples_whole	external/splinterdb/src/trunk.c	/^trunk_pivot_num_tuples_whole(trunk_handle *spl,$/;"	f	file:
trunk_pivot_recount_num_tuples_and_kv_bytes	external/splinterdb/src/trunk.c	/^trunk_pivot_recount_num_tuples_and_kv_bytes(trunk_handle *spl,$/;"	f
trunk_pivot_set_bundle_counts	external/splinterdb/src/trunk.c	/^trunk_pivot_set_bundle_counts(trunk_handle *spl,$/;"	f
trunk_pivot_size	external/splinterdb/src/trunk.c	/^trunk_pivot_size(trunk_handle *spl)$/;"	f
trunk_pivot_start_branch	external/splinterdb/src/trunk.c	/^trunk_pivot_start_branch(trunk_handle *spl, trunk_node *node, uint16 pivot_no)$/;"	f	file:
trunk_pivot_start_bundle	external/splinterdb/src/trunk.c	/^trunk_pivot_start_bundle(trunk_handle *spl, trunk_node *node, uint16 pivot_no)$/;"	f	file:
trunk_pivot_start_subbundle	external/splinterdb/src/trunk.c	/^trunk_pivot_start_subbundle(trunk_handle     *spl,$/;"	f	file:
trunk_pivot_subbundle_count	external/splinterdb/src/trunk.c	/^trunk_pivot_subbundle_count(trunk_handle     *spl,$/;"	f	file:
trunk_pivot_tuples_in_branch_slow	external/splinterdb/src/trunk.c	/^trunk_pivot_tuples_in_branch_slow(trunk_handle *spl,$/;"	f	file:
trunk_pivot_tuples_to_reclaim	external/splinterdb/src/trunk.c	/^trunk_pivot_tuples_to_reclaim(trunk_handle *spl, trunk_pivot_data *pdata)$/;"	f	file:
trunk_pivot_whole_branch_count	external/splinterdb/src/trunk.c	/^trunk_pivot_whole_branch_count(trunk_handle     *spl,$/;"	f	file:
trunk_prepare_build_filter	external/splinterdb/src/trunk.c	/^trunk_prepare_build_filter(trunk_handle             *spl,$/;"	f	file:
trunk_prepare_for_shutdown	external/splinterdb/src/trunk.c	/^trunk_prepare_for_shutdown(trunk_handle *spl)$/;"	f
trunk_print	external/splinterdb/src/trunk.c	/^trunk_print(platform_log_handle *log_handle, trunk_handle *spl)$/;"	f
trunk_print_branches	external/splinterdb/src/trunk.c	/^trunk_print_branches(platform_log_handle *log_handle, trunk_handle *spl)$/;"	f
trunk_print_branches_and_bundles	external/splinterdb/src/trunk.c	/^trunk_print_branches_and_bundles(platform_log_handle *log_handle,$/;"	f	file:
trunk_print_insertion_stats	external/splinterdb/src/trunk.c	/^trunk_print_insertion_stats(platform_log_handle *log_handle, trunk_handle *spl)$/;"	f
trunk_print_locked_node	external/splinterdb/src/trunk.c	/^trunk_print_locked_node(platform_log_handle *log_handle,$/;"	f
trunk_print_lookup	external/splinterdb/src/trunk.c	/^trunk_print_lookup(trunk_handle        *spl,$/;"	f
trunk_print_lookup_stats	external/splinterdb/src/trunk.c	/^trunk_print_lookup_stats(platform_log_handle *log_handle, trunk_handle *spl)$/;"	f
trunk_print_memtable	external/splinterdb/src/trunk.c	/^trunk_print_memtable(platform_log_handle *log_handle, trunk_handle *spl)$/;"	f
trunk_print_node	external/splinterdb/src/trunk.c	/^trunk_print_node(platform_log_handle *log_handle,$/;"	f
trunk_print_pivots	external/splinterdb/src/trunk.c	/^trunk_print_pivots(platform_log_handle *log_handle,$/;"	f	file:
trunk_print_space_use	external/splinterdb/src/trunk.c	/^trunk_print_space_use(platform_log_handle *log_handle, trunk_handle *spl)$/;"	f
trunk_print_subtree	external/splinterdb/src/trunk.c	/^trunk_print_subtree(platform_log_handle *log_handle,$/;"	f
trunk_print_super_block	external/splinterdb/src/trunk.c	/^trunk_print_super_block(platform_log_handle *log_handle, trunk_handle *spl)$/;"	f
trunk_process_generation_to_fp_bounds	external/splinterdb/src/trunk.c	/^trunk_process_generation_to_fp_bounds(trunk_handle             *spl,$/;"	f	file:
trunk_process_generation_to_pos	external/splinterdb/src/trunk.c	/^trunk_process_generation_to_pos(trunk_handle             *spl,$/;"	f	file:
trunk_range	external/splinterdb/src/trunk.c	/^trunk_range(trunk_handle  *spl,$/;"	f
trunk_range_iterator	external/splinterdb/src/trunk.h	/^typedef struct trunk_range_iterator {$/;"	s
trunk_range_iterator	external/splinterdb/src/trunk.h	/^} trunk_range_iterator;$/;"	t	typeref:struct:trunk_range_iterator
trunk_range_iterator_can_next	external/splinterdb/src/trunk.c	/^trunk_range_iterator_can_next(iterator *itor)$/;"	f
trunk_range_iterator_can_prev	external/splinterdb/src/trunk.c	/^trunk_range_iterator_can_prev(iterator *itor)$/;"	f
trunk_range_iterator_curr	external/splinterdb/src/trunk.c	/^trunk_range_iterator_curr(iterator *itor, key *curr_key, message *data)$/;"	f
trunk_range_iterator_deinit	external/splinterdb/src/trunk.c	/^trunk_range_iterator_deinit(trunk_range_iterator *range_itor)$/;"	f
trunk_range_iterator_init	external/splinterdb/src/trunk.c	/^trunk_range_iterator_init(trunk_handle         *spl,$/;"	f
trunk_range_iterator_next	external/splinterdb/src/trunk.c	/^trunk_range_iterator_next(iterator *itor)$/;"	f
trunk_range_iterator_ops	external/splinterdb/src/trunk.c	/^const static iterator_ops trunk_range_iterator_ops = {$/;"	v	file:
trunk_range_iterator_prev	external/splinterdb/src/trunk.c	/^trunk_range_iterator_prev(iterator *itor)$/;"	f
trunk_range_perf_params	external/splinterdb/tests/functional/splinter_test.c	/^typedef struct trunk_range_perf_params {$/;"	s	file:
trunk_range_perf_params	external/splinterdb/tests/functional/splinter_test.c	/^} trunk_range_perf_params;$/;"	t	typeref:struct:trunk_range_perf_params	file:
trunk_reclaim_space	external/splinterdb/src/trunk.c	/^trunk_reclaim_space(trunk_handle *spl)$/;"	f
trunk_release_super_block	external/splinterdb/src/trunk.c	/^trunk_release_super_block(trunk_handle *spl, page_handle *super_page)$/;"	f
trunk_replace_bundle_branches	external/splinterdb/src/trunk.c	/^trunk_replace_bundle_branches(trunk_handle             *spl,$/;"	f
trunk_replace_routing_filter	external/splinterdb/src/trunk.c	/^trunk_replace_routing_filter(trunk_handle             *spl,$/;"	f	file:
trunk_reset_start_branch	external/splinterdb/src/trunk.c	/^trunk_reset_start_branch(trunk_handle *spl, trunk_node *node)$/;"	f	file:
trunk_reset_start_frac_branch	external/splinterdb/src/trunk.c	/^trunk_reset_start_frac_branch(trunk_handle *spl, trunk_node *node)$/;"	f	file:
trunk_reset_stats	external/splinterdb/src/trunk.c	/^trunk_reset_stats(trunk_handle *spl)$/;"	f
trunk_room_to_flush	external/splinterdb/src/trunk.c	/^trunk_room_to_flush(trunk_handle     *spl,$/;"	f	file:
trunk_root_full_claim	external/splinterdb/src/trunk.c	/^trunk_root_full_claim(trunk_handle *spl)$/;"	f	file:
trunk_root_full_unclaim	external/splinterdb/src/trunk.c	/^trunk_root_full_unclaim(trunk_handle *spl)$/;"	f	file:
trunk_root_get	external/splinterdb/src/trunk.c	/^trunk_root_get(trunk_handle *spl, trunk_node *root)$/;"	f	file:
trunk_root_lock	external/splinterdb/src/trunk.c	/^trunk_root_lock(trunk_handle *spl)$/;"	f	file:
trunk_root_lock	external/splinterdb/src/trunk.h	/^   platform_batch_rwlock trunk_root_lock;$/;"	m	struct:trunk_handle
trunk_root_unlock	external/splinterdb/src/trunk.c	/^trunk_root_unlock(trunk_handle *spl)$/;"	f	file:
trunk_routing_cfg	external/splinterdb/src/trunk.c	/^trunk_routing_cfg(trunk_handle *spl)$/;"	f	file:
trunk_sb_filter_valid	external/splinterdb/src/trunk.c	/^trunk_sb_filter_valid(trunk_handle *spl, trunk_node *node, uint16 filter_no)$/;"	f	file:
trunk_set_initial_pivots	external/splinterdb/src/trunk.c	/^trunk_set_initial_pivots(trunk_handle *spl, trunk_node *node)$/;"	f	file:
trunk_set_num_pivot_keys	external/splinterdb/src/trunk.c	/^trunk_set_num_pivot_keys(trunk_handle *spl,$/;"	f	file:
trunk_set_pivot	external/splinterdb/src/trunk.c	/^trunk_set_pivot(trunk_handle *spl,$/;"	f	file:
trunk_set_pivot_data_new_root	external/splinterdb/src/trunk.c	/^trunk_set_pivot_data_new_root(trunk_handle *spl,$/;"	f	file:
trunk_set_start_frac_branch	external/splinterdb/src/trunk.c	/^trunk_set_start_frac_branch(trunk_handle *spl,$/;"	f	file:
trunk_set_super_block	external/splinterdb/src/trunk.c	/^trunk_set_super_block(trunk_handle *spl,$/;"	f
trunk_shadow	external/splinterdb/tests/unit/splinter_test.c	/^typedef struct trunk_shadow {$/;"	s	file:
trunk_shadow	external/splinterdb/tests/unit/splinter_test.c	/^} trunk_shadow;$/;"	t	typeref:struct:trunk_shadow	file:
trunk_shadow_append	external/splinterdb/tests/unit/splinter_test.c	/^trunk_shadow_append(trunk_shadow *shadow, key tuple_key, message value)$/;"	f	file:
trunk_shadow_deinit	external/splinterdb/tests/unit/splinter_test.c	/^trunk_shadow_deinit(trunk_shadow *shadow)$/;"	f	file:
trunk_shadow_get	external/splinterdb/tests/unit/splinter_test.c	/^trunk_shadow_get(trunk_shadow *shadow, uint64 i, key *tuple_key, message *value)$/;"	f	file:
trunk_shadow_init	external/splinterdb/tests/unit/splinter_test.c	/^trunk_shadow_init(trunk_shadow    *shadow,$/;"	f	file:
trunk_shadow_length	external/splinterdb/tests/unit/splinter_test.c	/^trunk_shadow_length(trunk_shadow *shadow)$/;"	f	file:
trunk_shadow_reinit	external/splinterdb/tests/unit/splinter_test.c	/^trunk_shadow_reinit(trunk_shadow *shadow)$/;"	f	file:
trunk_shadow_sort	external/splinterdb/tests/unit/splinter_test.c	/^trunk_shadow_sort(trunk_shadow *shadow)$/;"	f	file:
trunk_shift_pivots	external/splinterdb/src/trunk.c	/^trunk_shift_pivots(trunk_handle *spl,$/;"	f	file:
trunk_should_reclaim_space	external/splinterdb/src/trunk.c	/^trunk_should_reclaim_space(trunk_handle *spl)$/;"	f
trunk_single_leaf_threshold	external/splinterdb/src/trunk.c	/^trunk_single_leaf_threshold(trunk_handle *spl)$/;"	f	file:
trunk_split_index	external/splinterdb/src/trunk.c	/^trunk_split_index(trunk_handle             *spl,$/;"	f
trunk_split_leaf	external/splinterdb/src/trunk.c	/^trunk_split_leaf(trunk_handle *spl,$/;"	f
trunk_split_root	external/splinterdb/src/trunk.c	/^trunk_split_root(trunk_handle *spl, trunk_node *root)$/;"	f
trunk_start_branch	external/splinterdb/src/trunk.c	/^trunk_start_branch(trunk_handle *spl, trunk_node *node)$/;"	f	file:
trunk_start_bundle	external/splinterdb/src/trunk.c	/^trunk_start_bundle(trunk_handle *spl, trunk_node *node)$/;"	f	file:
trunk_start_frac_branch	external/splinterdb/src/trunk.c	/^trunk_start_frac_branch(trunk_handle *spl, trunk_node *node)$/;"	f	file:
trunk_start_sb_filter	external/splinterdb/src/trunk.c	/^trunk_start_sb_filter(trunk_handle *spl, trunk_node *node)$/;"	f	file:
trunk_start_subbundle	external/splinterdb/src/trunk.c	/^trunk_start_subbundle(trunk_handle *spl, trunk_node *node)$/;"	f	file:
trunk_start_subbundle_for_lookup	external/splinterdb/src/trunk.c	/^trunk_start_subbundle_for_lookup(trunk_handle *spl, trunk_node *node)$/;"	f	file:
trunk_stats	external/splinterdb/src/trunk.h	/^typedef struct trunk_stats {$/;"	s
trunk_stats	external/splinterdb/src/trunk.h	/^} PLATFORM_CACHELINE_ALIGNED trunk_stats;$/;"	t	typeref:struct:trunk_stats
trunk_subbundle	external/splinterdb/src/trunk.c	/^typedef struct ONDISK trunk_subbundle {$/;"	s	file:
trunk_subbundle	external/splinterdb/src/trunk.c	/^} trunk_subbundle;$/;"	t	typeref:struct:trunk_subbundle	file:
trunk_subbundle_branch_count	external/splinterdb/src/trunk.c	/^trunk_subbundle_branch_count(trunk_handle    *spl,$/;"	f	file:
trunk_subbundle_count	external/splinterdb/src/trunk.c	/^trunk_subbundle_count(trunk_handle *spl, trunk_node *node)$/;"	f	file:
trunk_subbundle_filter	external/splinterdb/src/trunk.c	/^trunk_subbundle_filter(trunk_handle    *spl,$/;"	f	file:
trunk_subbundle_filter_count	external/splinterdb/src/trunk.c	/^trunk_subbundle_filter_count(trunk_handle    *spl,$/;"	f	file:
trunk_subbundle_no	external/splinterdb/src/trunk.c	/^trunk_subbundle_no(trunk_handle *spl, trunk_node *node, trunk_subbundle *sb)$/;"	f	file:
trunk_subbundle_state	external/splinterdb/src/trunk.c	/^typedef enum trunk_subbundle_state {$/;"	g	file:
trunk_subbundle_state	external/splinterdb/src/trunk.c	/^} trunk_subbundle_state;$/;"	t	typeref:enum:trunk_subbundle_state	file:
trunk_subbundle_state_t	external/splinterdb/src/trunk.c	/^typedef uint16 trunk_subbundle_state_t;$/;"	t	file:
trunk_subtract_branch_number	external/splinterdb/src/trunk.c	/^trunk_subtract_branch_number(trunk_handle *spl, uint16 branch_no, uint16 offset)$/;"	f	file:
trunk_subtract_bundle_number	external/splinterdb/src/trunk.c	/^trunk_subtract_bundle_number(trunk_handle *spl, uint16 start, uint16 end)$/;"	f	file:
trunk_subtract_subbundle_filter_number	external/splinterdb/src/trunk.c	/^trunk_subtract_subbundle_filter_number(trunk_handle *spl,$/;"	f	file:
trunk_subtract_subbundle_number	external/splinterdb/src/trunk.c	/^trunk_subtract_subbundle_number(trunk_handle *spl, uint16 start, uint16 end)$/;"	f	file:
trunk_super_block	external/splinterdb/src/trunk.c	/^typedef struct ONDISK trunk_super_block {$/;"	s	file:
trunk_super_block	external/splinterdb/src/trunk.c	/^} trunk_super_block;$/;"	t	typeref:struct:trunk_super_block	file:
trunk_task_scratch	external/splinterdb/src/trunk.c	/^} trunk_task_scratch;$/;"	t	typeref:union:__anon43	file:
trunk_tree_height	external/splinterdb/src/trunk.c	/^trunk_tree_height(trunk_handle *spl)$/;"	f	file:
trunk_try_continue_incorporate	external/splinterdb/src/trunk.c	/^trunk_try_continue_incorporate(trunk_handle *spl, uint64 next_generation)$/;"	f	file:
trunk_try_get_memtable	external/splinterdb/src/trunk.c	/^trunk_try_get_memtable(trunk_handle *spl, uint64 generation)$/;"	f
trunk_try_start_incorporate	external/splinterdb/src/trunk.c	/^trunk_try_start_incorporate(trunk_handle *spl, uint64 generation)$/;"	f	file:
trunk_tuples_in_bundle	external/splinterdb/src/trunk.c	/^trunk_tuples_in_bundle(trunk_handle *spl,$/;"	f	file:
trunk_unmount	external/splinterdb/src/trunk.c	/^trunk_unmount(trunk_handle **spl_in)$/;"	f
trunk_update_claimed_root	external/splinterdb/src/trunk.c	/^trunk_update_claimed_root(trunk_handle *spl,    \/\/ IN$/;"	f
trunk_update_claimed_root_and_unlock	external/splinterdb/src/trunk.c	/^trunk_update_claimed_root_and_unlock(trunk_handle *spl,    \/\/ IN$/;"	f
trunk_update_lowerbound	external/splinterdb/src/trunk.c	/^trunk_update_lowerbound(uint16 *lo, uint16 *mid, int cmp, comparison comp)$/;"	f	file:
trunk_validate_data_config	external/splinterdb/src/trunk.c	/^trunk_validate_data_config(const data_config *cfg)$/;"	f	file:
trunk_verbose_logging_enabled	external/splinterdb/src/trunk.c	/^trunk_verbose_logging_enabled(trunk_handle *spl)$/;"	f	file:
trunk_verify_node	external/splinterdb/src/trunk.c	/^trunk_verify_node(trunk_handle *spl, trunk_node *node)$/;"	f
trunk_verify_node_and_neighbors	external/splinterdb/src/trunk.c	/^trunk_verify_node_and_neighbors(trunk_handle *spl, uint64 addr, void *arg)$/;"	f
trunk_verify_node_with_neighbors	external/splinterdb/src/trunk.c	/^trunk_verify_node_with_neighbors(trunk_handle         *spl,$/;"	f
trunk_verify_scratch	external/splinterdb/src/trunk.c	/^typedef struct trunk_verify_scratch {$/;"	s	file:
trunk_verify_scratch	external/splinterdb/src/trunk.c	/^} trunk_verify_scratch;$/;"	t	typeref:struct:trunk_verify_scratch	file:
trunk_verify_tree	external/splinterdb/src/trunk.c	/^trunk_verify_tree(trunk_handle *spl)$/;"	f
trunk_zap_branch_range	external/splinterdb/src/trunk.c	/^trunk_zap_branch_range(trunk_handle *spl,$/;"	f	file:
try_string_to_int16	external/splinterdb/src/util.c	/^try_string_to_int16(const char *nptr, \/\/ IN$/;"	f
try_string_to_int32	external/splinterdb/src/util.c	/^try_string_to_int32(const char *nptr, \/\/ IN$/;"	f
try_string_to_int64	external/splinterdb/src/util.c	/^try_string_to_int64(const char *nptr, \/\/ IN$/;"	f
try_string_to_int8	external/splinterdb/src/util.c	/^try_string_to_int8(const char *nptr, \/\/ IN$/;"	f
try_string_to_uint16	external/splinterdb/src/util.c	/^try_string_to_uint16(const char *nptr, \/\/ IN$/;"	f
try_string_to_uint32	external/splinterdb/src/util.c	/^try_string_to_uint32(const char *nptr, \/\/ IN$/;"	f
try_string_to_uint64	external/splinterdb/src/util.c	/^try_string_to_uint64(const char *nptr, \/\/ IN$/;"	f
try_string_to_uint64_limit	external/splinterdb/src/util.c	/^try_string_to_uint64_limit(const char  *nptr,           \/\/ IN$/;"	f	file:
try_string_to_uint8	external/splinterdb/src/util.c	/^try_string_to_uint8(const char *nptr, \/\/ IN$/;"	f
ts	external/splinterdb/src/memtable.h	/^   task_system    *ts;$/;"	m	struct:memtable_context
ts	external/splinterdb/src/task.c	/^   task_system     *ts;$/;"	m	struct:__anon10	file:
ts	external/splinterdb/src/task.h	/^   task_system *ts;$/;"	m	struct:task
ts	external/splinterdb/src/task.h	/^   task_system *ts;$/;"	m	struct:task_group
ts	external/splinterdb/src/trunk.h	/^   task_system *ts; \/\/ ALEX: currently not durable$/;"	m	struct:trunk_handle
ts	external/splinterdb/tests/functional/cache_test.c	/^   task_system       *ts;                      \/\/ IN$/;"	m	struct:__anon54	file:
ts	external/splinterdb/tests/functional/splinter_test.c	/^   task_system       *ts;$/;"	m	struct:test_splinter_thread_params	file:
ts	external/splinterdb/tests/functional/ycsb_test.c	/^   task_system *ts;$/;"	m	struct:ycsb_log_params	file:
ttl_ms	external/splinterdb/examples/splinterdb_custom_ipv4_addr_sortcmp_example.c	/^   uint32     ttl_ms; \/\/ Time-to-live$/;"	m	struct:www_ping_metrics	file:
ttname	external/splinterdb/tests/unit/ctest.h	/^   const char                *ttname; \/\/ test case name$/;"	m	struct:ctest
tuple	external/splinterdb/src/shard_log.c	/^   ondisk_tuple tuple;$/;"	m	struct:log_entry	file:
tuple_function	external/splinterdb/src/trunk.h	/^typedef void (*tuple_function)(key tuple_key, message value, void *arg);$/;"	t
tuple_key	external/splinterdb/src/btree_private.h	/^   key   tuple_key;$/;"	m	struct:leaf_incorporate_spec
tuples_reclaimed	external/splinterdb/src/trunk.c	/^   uint64  tuples_reclaimed;$/;"	m	struct:trunk_compact_bundle_req	file:
tuples_reclaimed	external/splinterdb/src/trunk.h	/^   uint64 tuples_reclaimed[TRUNK_MAX_HEIGHT];$/;"	m	struct:trunk_stats
tv2msec	other_filters/cqf/src/bm.c	/^uint64_t tv2msec(struct timeval tv)$/;"	f
tv2msec	other_filters/cqf/src/test_partitioned_counter.c	/^uint64_t tv2msec(struct timeval tv)$/;"	f
tv2msec	src/bm.c	/^uint64_t tv2msec(struct timeval tv)$/;"	f
tv2msec	src/test_partitioned_counter.c	/^uint64_t tv2msec(struct timeval tv)$/;"	f
type	external/splinterdb/include/splinterdb/data.h	/^   message_type type;$/;"	m	struct:message
type	external/splinterdb/src/clockcache.h	/^   page_type             type;$/;"	m	struct:clockcache_entry
type	external/splinterdb/src/default_data_config.c	/^   uint8 type;$/;"	m	struct:ONDISK	file:
type	external/splinterdb/src/mini_allocator.h	/^   page_type       type;$/;"	m	struct:mini_allocator
type	external/splinterdb/src/trunk.c	/^   trunk_compaction_type type;$/;"	m	struct:trunk_compact_bundle_req	file:
type	external/splinterdb/tests/functional/btree_test.c	/^   test_key_type           type;$/;"	m	struct:test_btree_config	file:
type	external/splinterdb/tests/functional/cache_test.c	/^   enum { MONO, RAND, HOP } type;$/;"	m	struct:__anon47	typeref:enum:__anon47::__anon48	file:
type	external/splinterdb/tests/functional/test.h	/^   message_type type;$/;"	m	struct:test_message_generator
tzcnt	other_filters/taf/src/bit_util.c	/^int tzcnt(uint64_t val) {$/;"	f
tzcnt	src/taf.cc	/^int tzcnt(uint64_t val) {$/;"	f
uchar	external/splinterdb/include/splinterdb/platform_linux/public_platform.h	/^typedef unsigned char uchar;$/;"	t
uint16	external/splinterdb/include/splinterdb/platform_linux/public_platform.h	/^typedef uint16_t      uint16;$/;"	t
uint32	external/splinterdb/include/splinterdb/platform_linux/public_platform.h	/^typedef uint32_t      uint32;$/;"	t
uint64	external/splinterdb/include/splinterdb/platform_linux/public_platform.h	/^typedef uint64_t      uint64;$/;"	t
uint8	external/splinterdb/include/splinterdb/platform_linux/public_platform.h	/^typedef uint8_t       uint8;$/;"	t
ulltobin	other_filters/acf/example/test_bits.cc	/^void ulltobin(char buffer[65], uint64_t n) {$/;"	f
ulltobin	other_filters/acfsim/example/test_bits.cc	/^void ulltobin(char buffer[65], uint64_t n) {$/;"	f
unary	external/splinterdb/tests/unit/ctest.h	/^   ctest_unary_run_func   unary;$/;"	m	union:ctest_run_func_union
ungen_key	external/splinterdb/tests/unit/btree_stress_test.c	/^ungen_key(key test_key)$/;"	f	file:
uniform_online	other_filters/cqf/src/bm.c	/^rand_generator uniform_online = {$/;"	v
uniform_online	src/bm.c	/^rand_generator uniform_online = {$/;"	v
uniform_online_duplicate	other_filters/cqf/src/bm.c	/^void *uniform_online_duplicate(void *_state)$/;"	f
uniform_online_duplicate	src/bm.c	/^void *uniform_online_duplicate(void *_state)$/;"	f
uniform_online_gen_rand	other_filters/cqf/src/bm.c	/^int uniform_online_gen_rand(void *_state, uint64_t noutputs, __uint128_t *outputs)$/;"	f
uniform_online_gen_rand	src/bm.c	/^int uniform_online_gen_rand(void *_state, uint64_t noutputs, __uint128_t *outputs)$/;"	f
uniform_online_init	other_filters/cqf/src/bm.c	/^void *uniform_online_init(uint64_t maxoutputs, __uint128_t maxvalue, void *params)$/;"	f
uniform_online_init	src/bm.c	/^void *uniform_online_init(uint64_t maxoutputs, __uint128_t maxvalue, void *params)$/;"	f
uniform_online_state	other_filters/cqf/src/bm.c	/^typedef struct uniform_online_state {$/;"	s	file:
uniform_online_state	other_filters/cqf/src/bm.c	/^} uniform_online_state;$/;"	t	typeref:struct:uniform_online_state	file:
uniform_online_state	src/bm.c	/^typedef struct uniform_online_state {$/;"	s	file:
uniform_online_state	src/bm.c	/^} uniform_online_state;$/;"	t	typeref:struct:uniform_online_state	file:
uniform_pregen	other_filters/cqf/src/bm.c	/^rand_generator uniform_pregen = {$/;"	v
uniform_pregen	src/bm.c	/^rand_generator uniform_pregen = {$/;"	v
uniform_pregen_duplicate	other_filters/cqf/src/bm.c	/^void *uniform_pregen_duplicate(void *state)$/;"	f
uniform_pregen_duplicate	src/bm.c	/^void *uniform_pregen_duplicate(void *state)$/;"	f
uniform_pregen_gen_rand	other_filters/cqf/src/bm.c	/^int uniform_pregen_gen_rand(void *_state, uint64_t noutputs, __uint128_t *outputs)$/;"	f
uniform_pregen_gen_rand	src/bm.c	/^int uniform_pregen_gen_rand(void *_state, uint64_t noutputs, __uint128_t *outputs)$/;"	f
uniform_pregen_init	other_filters/cqf/src/bm.c	/^void *uniform_pregen_init(uint64_t maxoutputs, __uint128_t maxvalue, void *params)$/;"	f
uniform_pregen_init	src/bm.c	/^void *uniform_pregen_init(uint64_t maxoutputs, __uint128_t maxvalue, void *params)$/;"	f
uniform_pregen_state	other_filters/cqf/src/bm.c	/^typedef struct uniform_pregen_state {$/;"	s	file:
uniform_pregen_state	other_filters/cqf/src/bm.c	/^} uniform_pregen_state;$/;"	t	typeref:struct:uniform_pregen_state	file:
uniform_pregen_state	src/bm.c	/^typedef struct uniform_pregen_state {$/;"	s	file:
uniform_pregen_state	src/bm.c	/^} uniform_pregen_state;$/;"	t	typeref:struct:uniform_pregen_state	file:
unit_test_self_dependency	external/splinterdb/Makefile	/^define unit_test_self_dependency =$/;"	m
universe	other_filters/cqf/src/bm.c	/^	long universe;$/;"	m	struct:zipf_params	file:
universe	src/bm.c	/^	long universe;$/;"	m	struct:zipf_params	file:
unkeyed_first_entry	external/splinterdb/src/mini_allocator.c	/^unkeyed_first_entry(page_handle *meta_page)$/;"	f	file:
unkeyed_meta_entry	external/splinterdb/src/mini_allocator.c	/^typedef struct ONDISK unkeyed_meta_entry {$/;"	s	file:
unkeyed_meta_entry	external/splinterdb/src/mini_allocator.c	/^} unkeyed_meta_entry;$/;"	t	typeref:struct:unkeyed_meta_entry	file:
unkeyed_next_entry	external/splinterdb/src/mini_allocator.c	/^unkeyed_next_entry(unkeyed_meta_entry *entry)$/;"	f	file:
unload_ycsb_log	external/splinterdb/tests/functional/ycsb_test.c	/^unload_ycsb_log(ycsb_op *log, uint64 num_ops)$/;"	f
unload_ycsb_logs	external/splinterdb/tests/functional/ycsb_test.c	/^unload_ycsb_logs(ycsb_phase *phases, uint64 nphases)$/;"	f
unlock_ctx	external/splinterdb/src/platform_linux/laio.c	/^unlock_ctx(laio_handle *io)$/;"	f	file:
unmounted	external/splinterdb/src/trunk.c	/^   bool32      unmounted;$/;"	m	struct:trunk_super_block	file:
unordered_map_t	other_filters/cf/example/test_ext_throughput.cc	/^typedef stxxl::unordered_map<uint64_t, uint64_t, HashFunctor, CompareGreater, SUB_BLOCK_SIZE, SUB_BLOCKS_PER_BLOCK> unordered_map_t;$/;"	t	file:
unordered_map_t	other_filters/cqf/src/test_adversarial.cc	/^typedef stxxl::unordered_map<uint64_t, uint64_t, HashFunctor, CompareGreater, SUB_BLOCK_SIZE, SUB_BLOCKS_PER_BLOCK> unordered_map_t;$/;"	t	file:
unordered_map_t	other_filters/cqf/src/test_ext_throughput.cc	/^typedef stxxl::unordered_map<uint64_t, uint64_t, HashFunctor, CompareGreater, SUB_BLOCK_SIZE, SUB_BLOCKS_PER_BLOCK> unordered_map_t;$/;"	t	file:
unordered_map_t	src/test_ext_churn.cc	/^typedef stxxl::unordered_map<uint64_t, uint64_t, HashFunctor, CompareGreater, SUB_BLOCK_SIZE, SUB_BLOCKS_PER_BLOCK> unordered_map_t;$/;"	t	file:
unordered_map_t	src/test_ext_inc_throughput.cc	/^typedef stxxl::unordered_map<uint64_t, uint64_t, HashFunctor, CompareGreater, SUB_BLOCK_SIZE, SUB_BLOCKS_PER_BLOCK> unordered_map_t;$/;"	t	file:
unordered_map_t	src/test_ext_throughput.cc	/^typedef stxxl::unordered_map<uint64_t, uint64_t, HashFunctor, CompareGreater, SUB_BLOCK_SIZE, SUB_BLOCKS_PER_BLOCK> unordered_map_t;$/;"	t	file:
unordered_map_t	src/test_zipf_throughput.cc	/^typedef stxxl::unordered_map<uint64_t, uint64_t, HashFunctor, CompareGreater, SUB_BLOCK_SIZE, SUB_BLOCKS_PER_BLOCK> unordered_map_t;$/;"	t	file:
unpack	other_filters/acf/src/permencoding.h	/^  inline void unpack(uint16_t in, uint8_t out[4]) const {$/;"	f	class:cuckoofilter::PermEncoding
unpack	other_filters/acfsim/src/permencoding.h	/^  inline void unpack(uint16_t in, uint8_t out[4]) const {$/;"	f	class:cuckoofilter::PermEncoding
unpack	other_filters/cf/src/permencoding.h	/^  inline void unpack(uint16_t in, uint8_t out[4]) const {$/;"	f	class:cuckoofilter::PermEncoding
unset_occupied	other_filters/taf/src/macros.h	48;"	d
unset_occupied	src/taf.cc	254;"	d	file:
unset_runend	other_filters/taf/src/macros.h	58;"	d
unset_runend	src/taf.cc	264;"	d	file:
update_latency_histo	external/splinterdb/src/trunk.h	/^   platform_histo_handle update_latency_histo;$/;"	m	struct:trunk_stats
updates	external/splinterdb/src/trunk.h	/^   uint64 updates;$/;"	m	struct:trunk_stats
updates	external/splinterdb/tests/functional/ycsb_test.c	/^   latency_table updates;$/;"	m	struct:latency_tables	file:
upperpower2	other_filters/acf/src/bitsutil.h	/^inline uint64_t upperpower2(uint64_t x) {$/;"	f	namespace:cuckoofilter
upperpower2	other_filters/acfsim/src/bitsutil.h	/^inline uint64_t upperpower2(uint64_t x) {$/;"	f	namespace:cuckoofilter
upperpower2	other_filters/cf/src/bitsutil.h	/^inline uint64_t upperpower2(uint64_t x) {$/;"	f	namespace:cuckoofilter
usage	external/splinterdb/src/platform_linux/shmem.c	/^   shminfo_usage_stats usage;$/;"	m	struct:shmem_heap	file:
usage	external/splinterdb/test.sh	/^function usage() {$/;"	f
usage	external/splinterdb/tests/functional/btree_test.c	/^usage(const char *argv0)$/;"	f	file:
usage	external/splinterdb/tests/functional/cache_test.c	/^usage(const char *argv0)$/;"	f	file:
usage	external/splinterdb/tests/functional/filter_test.c	/^usage(const char *argv0)$/;"	f	file:
usage	external/splinterdb/tests/functional/log_test.c	/^usage(const char *argv0)$/;"	f	file:
usage	external/splinterdb/tests/functional/splinter_test.c	/^usage(const char *argv0)$/;"	f	file:
usage	external/splinterdb/tests/functional/test_dispatcher.c	/^usage(void)$/;"	f	file:
usage	external/splinterdb/tests/functional/ycsb_test.c	/^usage(const char *argv0)$/;"	f	file:
usage	other_filters/cqf/src/bm.c	/^void usage(char *name)$/;"	f
usage	src/bm.c	/^void usage(char *name)$/;"	f
use_log	external/splinterdb/include/splinterdb/splinterdb.h	/^   _Bool use_log;$/;"	m	struct:splinterdb_config
use_log	external/splinterdb/src/trunk.h	/^   bool32          use_log;$/;"	m	struct:trunk_config
use_log	external/splinterdb/tests/config.h	/^   bool32 use_log;$/;"	m	struct:master_config
use_shmem	external/splinterdb/include/splinterdb/splinterdb.h	/^   _Bool  use_shmem; \/\/ Default is FALSE.$/;"	m	struct:splinterdb_config
use_shmem	external/splinterdb/src/platform_linux/platform.c	/^                     bool               use_shmem,$/;"	v
use_shmem	external/splinterdb/tests/config.h	/^   bool   use_shmem;  \/\/ Memory allocation done from shared segment$/;"	m	struct:master_config
use_stats	external/splinterdb/include/splinterdb/splinterdb.h	/^   uint64 use_stats;$/;"	m	struct:splinterdb_config
use_stats	external/splinterdb/src/clockcache.h	/^   bool32       use_stats;$/;"	m	struct:clockcache_config
use_stats	external/splinterdb/src/task.h	/^   bool32     use_stats;$/;"	m	struct:task_group
use_stats	external/splinterdb/src/task.h	/^   bool32 use_stats;$/;"	m	struct:task_system_config
use_stats	external/splinterdb/src/trunk.h	/^   bool32          use_stats;   \/\/ stats$/;"	m	struct:trunk_config
use_stats	external/splinterdb/tests/config.h	/^   uint64 use_stats;$/;"	m	struct:master_config
used	other_filters/acf/src/cuckoofilter.h	/^					 bool used;$/;"	m	struct:cuckoofilter::CuckooFilter::__anon5
used	other_filters/acfsim/src/cuckoofilter.h	/^					 bool used;$/;"	m	struct:cuckoofilter::CuckooFilter::__anon7
used	other_filters/cf/src/cuckoofilter.h	/^    bool used;$/;"	m	struct:cuckoofilter::CuckooFilter::__anon6
used_by_large_frags_bytes	external/splinterdb/src/platform_linux/shmem.c	/^   size_t used_by_large_frags_bytes; \/\/ Actually reserved$/;"	m	struct:shminfo_usage_stats	file:
used_bytes	external/splinterdb/src/platform_linux/shmem.c	/^   size_t used_bytes;       \/\/ Used bytes of memory left (that were allocated)$/;"	m	struct:shminfo_usage_stats	file:
used_bytes_HWM	external/splinterdb/src/platform_linux/shmem.c	/^   size_t used_bytes_HWM;   \/\/ High-water mark of memory used bytes$/;"	m	struct:shminfo_usage_stats	file:
user_slice	external/splinterdb/src/data_internal.h	/^   slice    user_slice;$/;"	m	struct:key
utaf_block_t	other_filters/taf/src/utaf.h	/^typedef struct utaf_block_t {$/;"	s
utaf_clear	other_filters/taf/src/utaf.c	/^void utaf_clear(FullTAF* filter) {$/;"	f
utaf_destroy	other_filters/taf/src/utaf.c	/^void utaf_destroy(FullTAF* filter) {$/;"	f
utaf_hash	other_filters/taf/src/utaf.c	/^static uint64_t utaf_hash(const FullTAF *filter, elt_t elt) {$/;"	f	file:
utaf_init	other_filters/taf/src/utaf.c	/^void utaf_init(FullTAF *filter, size_t n, int seed) {$/;"	f
utaf_insert	other_filters/taf/src/utaf.c	/^void utaf_insert(FullTAF *filter, elt_t elt) {$/;"	f
utaf_load	other_filters/taf/src/utaf.c	/^double utaf_load(FullTAF *filter) {$/;"	f
utaf_lookup	other_filters/taf/src/utaf.c	/^int utaf_lookup(FullTAF *filter, elt_t elt) {$/;"	f
utaf_t	other_filters/taf/src/utaf.h	/^typedef struct utaf_t {$/;"	s
v	external/splinterdb/src/platform_linux/platform.h	/^   uint32 v;$/;"	m	struct:__anon26
v	external/splinterdb/src/platform_linux/platform.h	/^   uint64 v;$/;"	m	struct:__anon25
val	src/test_bulk.c	/^	uint64_t val; \/\/ the value of the actual item$/;"	m	struct:_ilist	file:
val	src/test_deletions.c	/^	uint64_t val; \/\/ the value of the actual item$/;"	m	struct:_ilist	file:
val	src/test_fill_varied_throughput.c	/^	uint64_t val; \/\/ the value of the actual item$/;"	m	struct:_ilist	file:
val	src/test_hash_accesses.c	/^	uint64_t val; \/\/ the value of the actual item$/;"	m	struct:_ilist	file:
val	src/test_merge.c	/^	uint64_t val; \/\/ the value of the actual item$/;"	m	struct:_ilist	file:
val	src/test_near_full.c	/^	uint64_t val; \/\/ the value of the actual item$/;"	m	struct:_ilist	file:
val	src/test_throughput_old.c	/^	uint64_t val; \/\/ the value of the actual item$/;"	m	struct:_ilist	file:
val	src/test_unit_old.c	/^	uint64_t val; \/\/ the value of the actual item$/;"	m	struct:_ilist	file:
val	src/test_whitelist.c	/^	uint64_t val; \/\/ the value of the actual item$/;"	m	struct:_ilist	file:
val_fmt	external/splinterdb/tests/unit/splinterdb_quick_test.c	/^static const char val_fmt[] = "val-%04x";$/;"	v	file:
validate_page	external/splinterdb/src/cache.h	/^   validate_page_fn     validate_page;$/;"	m	struct:cache_ops
validate_page_fn	external/splinterdb/src/cache.h	/^typedef void (*validate_page_fn)(cache *cc, page_handle *page, uint64 addr);$/;"	t
validate_tree_against_shadow	external/splinterdb/tests/functional/test_functionality.c	/^validate_tree_against_shadow(trunk_handle              *spl,$/;"	f	file:
vals	other_filters/cqf/src/test_threadsafe.c	/^	uint64_t *vals;$/;"	m	struct:insert_args	file:
vals	src/test_threadsafe.c	/^	uint64_t *vals;$/;"	m	struct:insert_args	file:
value	external/splinterdb/src/default_data_config.c	/^   uint8 value[0];$/;"	m	struct:ONDISK	file:
value	external/splinterdb/src/splinterdb.c	/^   merge_accumulator value;$/;"	m	struct:__anon45	file:
value	external/splinterdb/src/trunk.c	/^   uint16         value[TRUNK_MAX_PIVOTS];$/;"	m	struct:trunk_filter_scratch	file:
value	external/splinterdb/src/trunk.h	/^   uint16                   value;        \/\/ Current value found in filter$/;"	m	struct:trunk_async_ctxt
value	external/splinterdb/tests/functional/test_splinter_shadow.h	/^   uint64       value;$/;"	m	struct:test_splinter_shadow_node
value	external/splinterdb/tests/functional/ycsb_test.c	/^   char   value[YCSB_DATA_SIZE];$/;"	m	struct:ycsb_op	file:
value	other_filters/acf/example/test.cc	/^	uint64_t value;$/;"	m	struct:_set_node	file:
value	other_filters/acf/example/test_fill_varied_throughput.cc	/^	uint64_t value;$/;"	m	struct:_set_node	file:
value	other_filters/acf/example/test_fp.cc	/^	uint64_t value;$/;"	m	struct:_set_node	file:
value	other_filters/acf/example/test_micro.cc	/^	uint64_t value;$/;"	m	struct:_set_node	file:
value	other_filters/acf/src/cuckoofilter.h	/^        uint64_t value;$/;"	m	struct:_set_node
value	other_filters/acfsim/example/test.cc	/^	uint64_t value;$/;"	m	struct:_set_node	file:
value	other_filters/acfsim/example/test_fill_varied_throughput.cc	/^	uint64_t value;$/;"	m	struct:_set_node	file:
value	other_filters/acfsim/example/test_fp.cc	/^	uint64_t value;$/;"	m	struct:_set_node	file:
value	other_filters/acfsim/example/test_micro.cc	/^	uint64_t value;$/;"	m	struct:_set_node	file:
value	other_filters/acfsim/src/cuckoofilter.h	/^        uint64_t value;$/;"	m	struct:_set_node
value	other_filters/cf/example/test.cc	/^        uint64_t value;$/;"	m	struct:_set_node	file:
value	other_filters/cf/example/test_micro_throughput.cc	/^        uint64_t value;$/;"	m	struct:_set_node	file:
value	other_filters/cqf/src/test_micro_super.c	/^        uint64_t value;$/;"	m	struct:_set_node	file:
value	other_filters/cqf/src/test_micro_throughput.c	/^        uint64_t value;$/;"	m	struct:_set_node	file:
value	other_filters/cqf/src/test_parallel.c	/^        uint64_t value;$/;"	m	struct:_set_node	file:
value	other_filters/taf/src/set.h	/^  char* value;$/;"	m	struct:setnode_t
value	src/taf.cc	/^  char* value;$/;"	m	struct:setnode_t	file:
value	src/test_lltable_throughput.c	/^	uint64_t value;$/;"	m	struct:_set_node	file:
value	src/test_micro_throughput.c	/^	uint64_t value;$/;"	m	struct:_set_node	file:
value	src/test_micro_write.c	/^	uint64_t value;$/;"	m	struct:_set_node	file:
value	src/test_progress.c	/^        uint64_t value;$/;"	m	struct:_set_node	file:
value_bits	include/gqf_int.h	/^		uint64_t value_bits;$/;"	m	struct:quotient_filter_metadata
value_bits	other_filters/cqf/include/gqf_int.h	/^		uint64_t value_bits;$/;"	m	struct:quotient_filter_metadata
value_length	external/splinterdb/tests/unit/splinter_test.c	/^   uint64 value_length;$/;"	m	struct:shadow_entry	file:
value_size	external/splinterdb/src/routing_filter.h	/^   uint32 value_size;$/;"	m	struct:routing_filter
verbose_logging_enabled	external/splinterdb/src/trunk.h	/^   bool32               verbose_logging_enabled;$/;"	m	struct:trunk_config
verbose_logging_enabled	external/splinterdb/tests/config.h	/^   bool   verbose_logging_enabled;$/;"	m	struct:master_config
verbose_progress	external/splinterdb/tests/config.h	/^   bool   verbose_progress;$/;"	m	struct:master_config
verbose_progress	external/splinterdb/tests/functional/test.h	/^   bool32 verbose_progress; \/\/ --verbose-progress: During test execution$/;"	m	struct:test_exec_config
verify_against_shadow	external/splinterdb/tests/functional/test_functionality.c	/^verify_against_shadow(trunk_handle               *spl,$/;"	f
verify_range_against_shadow	external/splinterdb/tests/functional/test_functionality.c	/^verify_range_against_shadow(trunk_handle               *spl,$/;"	f
verify_range_against_shadow_all_types	external/splinterdb/tests/functional/test_functionality.c	/^verify_range_against_shadow_all_types(trunk_handle               *spl,$/;"	f
verify_tuple	external/splinterdb/tests/functional/test_functionality.c	/^verify_tuple(trunk_handle    *spl,$/;"	f	file:
verify_tuple	external/splinterdb/tests/test_common.c	/^verify_tuple(trunk_handle           *spl,$/;"	f
verify_tuple_arg	external/splinterdb/tests/test_common.h	/^} verify_tuple_arg;$/;"	t	typeref:struct:__anon61
verify_tuple_callback	external/splinterdb/tests/functional/test_functionality.c	/^verify_tuple_callback(trunk_handle *spl, test_async_ctxt *ctxt, void *arg)$/;"	f	file:
verify_tuple_callback	external/splinterdb/tests/test_common.c	/^verify_tuple_callback(trunk_handle *spl, test_async_ctxt *ctxt, void *arg)$/;"	f
victim_	other_filters/acf/src/cuckoofilter.h	/^				 VictimCache victim_;$/;"	m	class:cuckoofilter::CuckooFilter
victim_	other_filters/acfsim/src/cuckoofilter.h	/^				 VictimCache victim_;$/;"	m	class:cuckoofilter::CuckooFilter
victim_	other_filters/cf/src/cuckoofilter.h	/^  VictimCache victim_;$/;"	m	class:cuckoofilter::CuckooFilter
vprint_errormsg	external/splinterdb/tests/unit/main.c	/^vprint_errormsg(const char *const fmt, va_list ap)$/;"	f	file:
wait_all	external/splinterdb/src/io.h	/^   io_wait_all_fn            wait_all;$/;"	m	struct:io_ops
wait_for_gdb	external/splinterdb/tests/config.h	/^   bool   wait_for_gdb;  \/\/ To debug child processes.$/;"	m	struct:master_config
wait_start	external/splinterdb/src/trunk.h	/^   timestamp                 wait_start;$/;"	m	struct:trunk_compacted_memtable
wait_time_data	include/gqf_int.h	/^	} wait_time_data;$/;"	t	typeref:struct:__anon68
wait_time_data	other_filters/cqf/include/gqf_int.h	/^	} wait_time_data;$/;"	t	typeref:struct:__anon3
wait_times	include/gqf_int.h	/^		wait_time_data *wait_times;$/;"	m	struct:quotient_filter_runtime_data
wait_times	other_filters/cqf/include/gqf_int.h	/^		wait_time_data *wait_times;$/;"	m	struct:quotient_filter_runtime_data
waitfor_stop_signal	external/splinterdb/tests/unit/task_system_test.c	/^   bool32       waitfor_stop_signal;$/;"	m	struct:__anon65	file:
warm_up_filter	src/test_driver.c	/^void warm_up_filter(const QF *qf, size_t num_query_set) {$/;"	f
was_async	external/splinterdb/src/btree.h	/^   bool32            was_async;  \/\/ Was the last cache_get async ?$/;"	m	struct:btree_async_ctxt
was_async	external/splinterdb/src/routing_filter.h	/^   bool32              was_async;  \/\/ Was the last cache_get async ?$/;"	m	struct:routing_async_ctxt
was_async	external/splinterdb/src/trunk.h	/^   bool32        was_async; \/\/ Did an async IO for trunk ?$/;"	m	struct:trunk_async_ctxt
wb	external/splinterdb/src/data_internal.h	/^   writable_buffer wb;$/;"	m	struct:__anon38
we_created_heap	external/splinterdb/src/splinterdb.c	/^   bool               we_created_heap;$/;"	m	struct:splinterdb	file:
whoami	external/splinterdb/tests/functional/io_apis_test.c	/^   const char         *whoami; \/\/ 'Parent' or 'Child'$/;"	m	struct:io_test_fn_args	file:
will_overflow	other_filters/taf/src/arcd.c	/^int will_overflow(Ext exts[64]) {$/;"	f
will_overflow	src/taf.cc	/^int will_overflow(Ext exts[64]) {$/;"	f
window.onclick	external/splinterdb/docs/site/themes/template/assets/js/main.js	/^window.onclick = function(event) {$/;"	f
window.onclick	external/splinterdb/docs/site/themes/template/static/js/main.js	/^window.onclick = function(event) {$/;"	f
worker_config	external/splinterdb/tests/unit/large_inserts_stress_test.c	/^} worker_config;$/;"	t	typeref:struct:__anon62	file:
worker_config	external/splinterdb/tests/unit/splinterdb_stress_test.c	/^} worker_config;$/;"	t	typeref:struct:__anon66	file:
workload_name	external/splinterdb/scripts/run_ycsb.py	/^                workload_name = trace_filename.title()$/;"	v
workload_output	external/splinterdb/scripts/run_ycsb.py	/^                    workload_output = subprocess.check_output(run_command, stderr=subprocess.STDOUT)$/;"	v
workload_string	external/splinterdb/scripts/run_ycsb.py	/^                workload_string = get_workload_string($/;"	v
writable_buffer	external/splinterdb/src/util.h	/^typedef struct writable_buffer {$/;"	s
writable_buffer	external/splinterdb/src/util.h	/^} writable_buffer;$/;"	t	typeref:struct:writable_buffer
writable_buffer_append	external/splinterdb/src/util.h	/^writable_buffer_append(writable_buffer *wb, uint64 length, const void *newdata)$/;"	f
writable_buffer_copy_slice	external/splinterdb/src/util.h	/^writable_buffer_copy_slice(writable_buffer *wb, slice src)$/;"	f
writable_buffer_data	external/splinterdb/src/util.h	/^writable_buffer_data(const writable_buffer *wb)$/;"	f
writable_buffer_deinit	external/splinterdb/src/util.h	/^writable_buffer_deinit(writable_buffer *wb)$/;"	f
writable_buffer_ensure_space	external/splinterdb/src/util.c	/^writable_buffer_ensure_space(writable_buffer *wb, uint64 minspace)$/;"	f	file:
writable_buffer_init	external/splinterdb/src/util.h	/^writable_buffer_init(writable_buffer *wb, platform_heap_id heap_id)$/;"	f
writable_buffer_init_from_slice	external/splinterdb/src/util.h	/^writable_buffer_init_from_slice(writable_buffer *wb,$/;"	f
writable_buffer_init_with_buffer	external/splinterdb/src/util.h	/^writable_buffer_init_with_buffer(writable_buffer *wb,$/;"	f
writable_buffer_is_null	external/splinterdb/src/util.h	/^writable_buffer_is_null(const writable_buffer *wb)$/;"	f
writable_buffer_length	external/splinterdb/src/util.h	/^writable_buffer_length(const writable_buffer *wb)$/;"	f
writable_buffer_memset	external/splinterdb/src/util.h	/^writable_buffer_memset(writable_buffer *wb, int c)$/;"	f
writable_buffer_resize	external/splinterdb/src/util.c	/^writable_buffer_resize(writable_buffer *wb, uint64 newlength)$/;"	f
writable_buffer_set_to_null	external/splinterdb/src/util.h	/^writable_buffer_set_to_null(writable_buffer *wb)$/;"	f
writable_buffer_to_slice	external/splinterdb/src/util.h	/^writable_buffer_to_slice(const writable_buffer *wb)$/;"	f
write	external/splinterdb/src/io.h	/^   io_write_fn               write;$/;"	m	struct:io_ops
write	external/splinterdb/src/log.h	/^   log_write_fn   write;$/;"	m	struct:log_ops
write_all_reports	external/splinterdb/tests/functional/ycsb_test.c	/^write_all_reports(ycsb_phase *phases, int num_phases)$/;"	f
write_amp	external/splinterdb/scripts/run_ycsb.py	/^                        write_amp = float(net_diskstats[3]) \/ logical_data_size$/;"	v
write_async	external/splinterdb/src/io.h	/^   io_write_async_fn         write_async;$/;"	m	struct:io_ops
write_latency_cdf	external/splinterdb/tests/functional/ycsb_test.c	/^write_latency_cdf(char *filename, latency_table table)$/;"	f
write_latency_table	external/splinterdb/tests/functional/ycsb_test.c	/^write_latency_table(char *filename, latency_table table)$/;"	f
write_lock	external/splinterdb/src/platform_linux/platform_types.h	/^   platform_claimlock write_lock[PLATFORM_CACHELINE_SIZE \/ 2];$/;"	m	struct:__anon31
write_log_latency_cdf	external/splinterdb/tests/functional/ycsb_test.c	/^write_log_latency_cdf(char         *phase_name,$/;"	f
write_log_latency_table	external/splinterdb/tests/functional/ycsb_test.c	/^write_log_latency_table(char         *phase_name,$/;"	f
write_log_statistics_file	external/splinterdb/tests/functional/ycsb_test.c	/^write_log_statistics_file(char            *phase_name,$/;"	f
write_phase_latency_cdf	external/splinterdb/tests/functional/ycsb_test.c	/^write_phase_latency_cdf(char         *phase_name,$/;"	f
write_phase_latency_table	external/splinterdb/tests/functional/ycsb_test.c	/^write_phase_latency_table(char         *phase_name,$/;"	f
write_phase_latency_tables	external/splinterdb/tests/functional/ycsb_test.c	/^write_phase_latency_tables(ycsb_phase *phase)$/;"	f
write_phase_statistics_files	external/splinterdb/tests/functional/ycsb_test.c	/^write_phase_statistics_files(ycsb_phase *phase)$/;"	f
write_version_info	external/splinterdb/scripts/run_ycsb.py	/^def write_version_info(out_dir):$/;"	f
writes_issued	external/splinterdb/src/cache.h	/^   uint64 writes_issued;$/;"	m	struct:cache_stats
www_inet_info	external/splinterdb/examples/splinterdb_iterators_example.c	/^kv_pair www_inet_info[] =$/;"	v
www_name	external/splinterdb/examples/splinterdb_custom_ipv4_addr_sortcmp_example.c	/^   const char www_name[30];$/;"	m	struct:www_ping_metrics	file:
www_ping_metrics	external/splinterdb/examples/splinterdb_custom_ipv4_addr_sortcmp_example.c	/^typedef struct www_ping_metrics {$/;"	s	file:
www_ping_metrics	external/splinterdb/examples/splinterdb_custom_ipv4_addr_sortcmp_example.c	/^} www_ping_metrics;$/;"	t	typeref:struct:www_ping_metrics	file:
xnslots	include/gqf_int.h	/^		uint64_t xnslots;$/;"	m	struct:quotient_filter_metadata
xnslots	other_filters/cqf/include/gqf_int.h	/^		uint64_t xnslots;$/;"	m	struct:quotient_filter_metadata
xxxtid	external/splinterdb/src/platform_linux/platform.c	/^__thread threadid xxxtid = INVALID_TID;$/;"	v
ycsb_csv_name	external/splinterdb/scripts/run_ycsb.py	/^        ycsb_csv_name = get_ycsb_string(SAVE_DIR, DATETIME_STRING, thread_count, mem, MESSAGE_SIZE)$/;"	v
ycsb_log_params	external/splinterdb/tests/functional/ycsb_test.c	/^typedef struct ycsb_log_params {$/;"	s	file:
ycsb_log_params	external/splinterdb/tests/functional/ycsb_test.c	/^} ycsb_log_params;$/;"	t	typeref:struct:ycsb_log_params	file:
ycsb_op	external/splinterdb/tests/functional/ycsb_test.c	/^typedef struct ycsb_op {$/;"	s	file:
ycsb_op	external/splinterdb/tests/functional/ycsb_test.c	/^} ycsb_op;$/;"	t	typeref:struct:ycsb_op	file:
ycsb_ops	external/splinterdb/tests/functional/ycsb_test.c	/^   ycsb_op **ycsb_ops;$/;"	m	struct:parse_ycsb_log_req	file:
ycsb_ops	external/splinterdb/tests/functional/ycsb_test.c	/^   ycsb_op *ycsb_ops; \/\/ array of ops to be performed$/;"	m	struct:ycsb_log_params	file:
ycsb_phase	external/splinterdb/tests/functional/ycsb_test.c	/^typedef struct ycsb_phase {$/;"	s	file:
ycsb_phase	external/splinterdb/tests/functional/ycsb_test.c	/^} ycsb_phase;$/;"	t	typeref:struct:ycsb_phase	file:
ycsb_test	external/splinterdb/tests/functional/ycsb_test.c	/^ycsb_test(int argc, char *argv[])$/;"	f
ycsb_thread	external/splinterdb/tests/functional/ycsb_test.c	/^ycsb_thread(void *arg)$/;"	f	file:
z_search	other_filters/cqf/src/zipf.c	/^static long z_search (ZIPFIAN s, double C, long low, long pcount) $/;"	f	file:
z_search	src/zipf.c	/^static long z_search (ZIPFIAN s, double C, long low, long pcount) $/;"	f	file:
zero_fraction	external/splinterdb/src/util.h	69;"	d
zipf_gen	other_filters/cqf/src/bm.c	/^static __uint128_t* zipf_gen(long N, long gencount, double s) {$/;"	f	file:
zipf_gen	src/bm.c	/^static __uint128_t* zipf_gen(long N, long gencount, double s) {$/;"	f	file:
zipf_params	other_filters/cqf/src/bm.c	/^typedef struct zipf_params {$/;"	s	file:
zipf_params	other_filters/cqf/src/bm.c	/^} zipf_params;$/;"	t	typeref:struct:zipf_params	file:
zipf_params	src/bm.c	/^typedef struct zipf_params {$/;"	s	file:
zipf_params	src/bm.c	/^} zipf_params;$/;"	t	typeref:struct:zipf_params	file:
zipfian	other_filters/cqf/src/zipf.c	/^struct zipfian {$/;"	s	file:
zipfian	src/zipf.c	/^struct zipfian {$/;"	s	file:
zipfian_gen	other_filters/cqf/src/zipf.c	/^long zipfian_gen (ZIPFIAN z) {$/;"	f
zipfian_gen	src/zipf.c	/^long zipfian_gen (ZIPFIAN z) {$/;"	f
zipfian_pregen	other_filters/cqf/src/bm.c	/^rand_generator zipfian_pregen = {$/;"	v
zipfian_pregen	src/bm.c	/^rand_generator zipfian_pregen = {$/;"	v
zipfian_pregen_duplicate	other_filters/cqf/src/bm.c	/^void *zipfian_pregen_duplicate(void *state)$/;"	f
zipfian_pregen_duplicate	src/bm.c	/^void *zipfian_pregen_duplicate(void *state)$/;"	f
zipfian_pregen_gen_rand	other_filters/cqf/src/bm.c	/^int zipfian_pregen_gen_rand(void *_state, uint64_t noutputs, __uint128_t *outputs)$/;"	f
zipfian_pregen_gen_rand	src/bm.c	/^int zipfian_pregen_gen_rand(void *_state, uint64_t noutputs, __uint128_t *outputs)$/;"	f
zipfian_pregen_init	other_filters/cqf/src/bm.c	/^void *zipfian_pregen_init(uint64_t maxoutputs, __uint128_t maxvalue, void *params)$/;"	f
zipfian_pregen_init	src/bm.c	/^void *zipfian_pregen_init(uint64_t maxoutputs, __uint128_t maxvalue, void *params)$/;"	f
zipfian_pregen_state	other_filters/cqf/src/bm.c	/^typedef struct zipfian_pregen_state {$/;"	s	file:
zipfian_pregen_state	other_filters/cqf/src/bm.c	/^} zipfian_pregen_state;$/;"	t	typeref:struct:zipfian_pregen_state	file:
zipfian_pregen_state	src/bm.c	/^typedef struct zipfian_pregen_state {$/;"	s	file:
zipfian_pregen_state	src/bm.c	/^} zipfian_pregen_state;$/;"	t	typeref:struct:zipfian_pregen_state	file:
zipfian_seed	other_filters/acf/example/test.cc	/^int zipfian_seed = 0;$/;"	v
zipfian_seed	other_filters/acf/example/test_fill_varied_throughput.cc	/^int zipfian_seed = 0;$/;"	v
zipfian_seed	other_filters/acf/example/test_fp.cc	/^int zipfian_seed = 0;$/;"	v
zipfian_seed	other_filters/acfsim/example/test.cc	/^int zipfian_seed = 0;$/;"	v
zipfian_seed	other_filters/acfsim/example/test_fill_varied_throughput.cc	/^int zipfian_seed = 0;$/;"	v
zipfian_seed	other_filters/acfsim/example/test_fp.cc	/^int zipfian_seed = 0;$/;"	v
zpair	other_filters/cqf/src/zipf.c	/^struct zpair {                   \/\/ For the ith element of the array:$/;"	s	file:
zpair	src/zipf.c	/^struct zpair {                   \/\/ For the ith element of the array:$/;"	s	file:
zprint	other_filters/cqf/src/zipf.c	/^static void zprint (ZIPFIAN z) {$/;"	f	file:
zprint	src/zipf.c	/^static void zprint (ZIPFIAN z) {$/;"	f	file:
~CuckooFilter	other_filters/acf/src/cuckoofilter.h	/^				 ~CuckooFilter() { delete table_; }$/;"	f	class:cuckoofilter::CuckooFilter
~CuckooFilter	other_filters/acfsim/src/cuckoofilter.h	/^				 ~CuckooFilter() { delete table_; }$/;"	f	class:cuckoofilter::CuckooFilter
~CuckooFilter	other_filters/cf/src/cuckoofilter.h	/^  ~CuckooFilter() { delete table_; }$/;"	f	class:cuckoofilter::CuckooFilter
~MirroredTable	other_filters/acf/src/mirroredtable.h	/^		~MirroredTable() { $/;"	f	class:cuckoofilter::MirroredTable
~MirroredTable	other_filters/acfsim/src/mirroredtable.h	/^		~MirroredTable() { $/;"	f	class:cuckoofilter::MirroredTable
~PackedTable	other_filters/acf/src/packedtable.h	/^  ~PackedTable() { $/;"	f	class:cuckoofilter::PackedTable
~PackedTable	other_filters/acfsim/src/packedtable.h	/^  ~PackedTable() { $/;"	f	class:cuckoofilter::PackedTable
~PackedTable	other_filters/cf/src/packedtable.h	/^  ~PackedTable() { $/;"	f	class:cuckoofilter::PackedTable
~PermEncoding	other_filters/acf/src/permencoding.h	/^  ~PermEncoding() {}$/;"	f	class:cuckoofilter::PermEncoding
~PermEncoding	other_filters/acfsim/src/permencoding.h	/^  ~PermEncoding() {}$/;"	f	class:cuckoofilter::PermEncoding
~PermEncoding	other_filters/cf/src/permencoding.h	/^  ~PermEncoding() {}$/;"	f	class:cuckoofilter::PermEncoding
~SingleTable	other_filters/acf/src/singletable.h	/^  ~SingleTable() { $/;"	f	class:cuckoofilter::SingleTable
~SingleTable	other_filters/acfsim/src/singletable.h	/^  ~SingleTable() { $/;"	f	class:cuckoofilter::SingleTable
~SingleTable	other_filters/cf/src/singletable.h	/^  ~SingleTable() { $/;"	f	class:cuckoofilter::SingleTable
