cmake_minimum_required(VERSION 3.16.3)
project(rangefilters-bench)

option(ALL_RENCODER "compile all REncoder implementation (SE/SS)" ON)

# TODO(chesetti): Check if CMakeLists.txt can be organized better.

# fetch latest argparse
include(FetchContent)
FetchContent_Declare(
    argparse
    GIT_REPOSITORY https://github.com/p-ranav/argparse.git
    GIT_TAG        v2.7
)
FetchContent_MakeAvailable(argparse)

set(CMAKE_CXX_STANDARD 17)

list(APPEND SUCCINCT_LIBS "sux" "sdsl-lite")
list(APPEND Targets "memento" "bucketing" "grafite" "surf" "rosetta" "proteus" "snarf" "rencoder")
list(APPEND x86Targets "surf" "rosetta" "proteus" "rencoder")

set(CMAKE_CXX_STANDARD 17)
if (CMAKE_BUILD_TYPE STREQUAL "Release")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -march=native")
else()
    set(USE_MULTI_THREADED OFF)
endif ()

function(compile_bench ds)
    if (NOT ds IN_LIST Targets)
        message(WARNING "${ds} is not defined")
        return()
    endif()
    if (ds IN_LIST x86Targets AND NOT CMAKE_SYSTEM_PROCESSOR MATCHES "(x86)|(X86)|(amd64)|(AMD64)")
        message(WARNING "cannot compile ${ds} on this architecture")
        return()
    endif()
    add_executable(bench_${ds} filters_benchmark/bench_${ds}.cpp)
    target_link_libraries(bench_${ds} argparse)

    if (ds MATCHES "memento")
        add_library(mementolib STATIC ./filters/Memento/src/memento.c ./filters/Memento/src/hashutil.c)
        target_include_directories(mementolib PUBLIC ./filters/Memento/include)
        target_compile_options(mementolib PUBLIC -Ofast -msse4.2 -D__SSE4_2_)
        target_link_libraries(bench_memento mementolib)

        set(Boost_USE_STATIC_LIBS OFF)
        set(Boost_USE_STATIC_RUNTIME OFF)
        if (USE_BOOST AND USE_MULTI_THREADED)
            set(Boost_USE_MULTITHREADED ON)
            find_package(Boost REQUIRED COMPONENTS thread)
            message(STATUS "Boost found, using it for the multi-threaded version of the library")
            target_compile_definitions(bench_memento INTERFACE -DUSE_LIBRARY_BOOST_PARALLEL)
            target_link_libraries(bench_memento INTERFACE Boost::thread)
            target_include_directories(bench_memento INTERFACE ${Boost_INCLUDE_DIRS})
        elseif (USE_BOOST)
            set(Boost_USE_MULTITHREADED OFF)
            find_package(Boost REQUIRED)
            message(STATUS "Boost found, using it for the single-threaded version of the library")
            target_compile_definitions(bench_memento INTERFACE -DUSE_LIBRARY_BOOST)
            target_include_directories(bench_memento INTERFACE ${Boost_INCLUDE_DIRS})
        elseif (USE_MULTI_THREADED)
            message(STATUS "Using TBB and std::execution for the multi-threaded version of the library")
            find_package(TBB REQUIRED)
            target_compile_definitions(bench_memento INTERFACE -DUSE_LIBRARY_STL_PARALLEL)
            target_link_libraries(bench_memento INTERFACE tbb)
        else ()
            # target_compile_definitions(bench_memento INTERFACE -DUSE_LIBRARY_STL)
        endif ()

    elseif (ds MATCHES "grafite")
        target_link_libraries(bench_grafite grafitelib)
    elseif (ds MATCHES "bucketing")
        add_library(grafitelib INTERFACE)
        if ("sux" IN_LIST SUCCINCT_LIBS)
            message(STATUS "Using sux")
            target_compile_definitions(grafitelib INTERFACE -DSUCCINCT_LIB_SUX)
            target_include_directories(grafitelib INTERFACE ./filters/grafite/include ./filters/grafite/lib/sux)
        endif()
        if ("sdsl-lite" IN_LIST SUCCINCT_LIBS)
            message(STATUS "Using sdsl-lite")
            target_compile_definitions(grafitelib INTERFACE -DSUCCINCT_LIB_SDSL)
            target_include_directories(grafitelib INTERFACE ./filters/grafite/include ./filters/grafite/lib/sdsl-lite/include)
        endif()

        set(Boost_USE_STATIC_LIBS OFF)
        set(Boost_USE_STATIC_RUNTIME OFF)
        if (USE_BOOST AND USE_MULTI_THREADED)
            set(Boost_USE_MULTITHREADED ON)
            find_package(Boost REQUIRED COMPONENTS thread)
            message(STATUS "Boost found, using it for the multi-threaded version of the library")
            target_compile_definitions(grafitelib INTERFACE -DUSE_LIBRARY_BOOST_PARALLEL)
            target_link_libraries(grafitelib INTERFACE Boost::thread)
            target_include_directories(grafitelib INTERFACE ${Boost_INCLUDE_DIRS})
        elseif (USE_BOOST)
            set(Boost_USE_MULTITHREADED OFF)
            find_package(Boost REQUIRED)
            message(STATUS "Boost found, using it for the single-threaded version of the library")
            target_compile_definitions(grafitelib INTERFACE -DUSE_LIBRARY_BOOST)
            target_include_directories(grafitelib INTERFACE ${Boost_INCLUDE_DIRS})
        elseif (USE_MULTI_THREADED)
            message(STATUS "Using TBB and std::execution for the multi-threaded version of the library")
            find_package(TBB REQUIRED)
            target_compile_definitions(grafitelib INTERFACE -DUSE_LIBRARY_STL_PARALLEL)
            target_link_libraries(grafitelib INTERFACE tbb)
        else ()
            # target_compile_definitions(grafitelib INTERFACE -DUSE_LIBRARY_STL)
        endif ()

        target_link_libraries(bench_bucketing grafitelib)
    elseif (ds MATCHES "rosetta")
        add_library(rosetta STATIC ./filters/Rosetta/dst.cpp ./filters/Rosetta/MurmurHash3.cpp)
        target_link_libraries(bench_rosetta rosetta)
    elseif(ds MATCHES "proteus")
        add_library(proteus STATIC ./filters/Proteus/include/config.cpp ./filters/Proteus/include/clhash.cpp ./filters/Proteus/include/prefixbf.cpp ./filters/Proteus/include/MurmurHash3.cpp ./filters/Proteus/include/util.cpp ./filters/Proteus/include/modeling.cpp)
        target_link_libraries(bench_proteus proteus)
    elseif(ds MATCHES "snarf" AND NOT CMAKE_SYSTEM_PROCESSOR MATCHES "(x86)|(X86)|(amd64)|(AMD64)")
        link_directories("/opt/homebrew/lib")
        include_directories("/opt/homebrew/include")
    elseif(ds MATCHES "rencoder")
        #target_compile_definitions(bench_rencoder PRIVATE USE_SIMD=1)
        target_compile_options(bench_rencoder PRIVATE -mcmodel=medium -mavx512f -O2)
    endif()
endfunction(compile_bench)

foreach(ds ${Targets})
    compile_bench(${ds})
endforeach()

if (ALL_RENCODER AND CMAKE_SYSTEM_PROCESSOR MATCHES "(x86)|(X86)|(amd64)|(AMD64)")
    add_executable(bench_rencoder_se filters_benchmark/bench_rencoder.cpp)
    #target_compile_definitions(bench_rencoder_se PRIVATE SET_VERSION="REncoderSE" USE_SIMD=1)
    target_compile_definitions(bench_rencoder_se PRIVATE SET_VERSION="REncoderSE")
    target_compile_options(bench_rencoder_se PRIVATE -mcmodel=medium -mavx512f -O2)
    target_link_libraries(bench_rencoder_se argparse)
    add_executable(bench_rencoder_ss filters_benchmark/bench_rencoder.cpp)
    #target_compile_definitions(bench_rencoder_ss PRIVATE SET_VERSION="REncoderSS" USE_SIMD=1)
    target_compile_definitions(bench_rencoder_ss PRIVATE SET_VERSION="REncoderSS")
    target_link_libraries(bench_rencoder_ss argparse)
    target_compile_options(bench_rencoder_ss PRIVATE -mcmodel=medium -mavx512f -O2)
endif()

add_executable(workload_gen workload_gen.cpp)
target_link_libraries(workload_gen argparse)
